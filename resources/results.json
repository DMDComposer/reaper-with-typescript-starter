[
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "mediaitem", "item", "track", "empty"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Creates a new media item. It will be empty and therefore not be shown in the arrange-view, until you associate a mediafile(audio, picture, video, etc) or a length and position to it using [SetMediaItemInfo\\_Value](#SetMediaItemInfo_Value)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack tr",
          "description": "tracknumber(zero based), with 0 for track 1, 1 for track 2, etc."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "AddMediaItemToTrack",
    "functioncall": {
      "lua": "MediaItem item = reaper.AddMediaItemToTrack(MediaTrack tr)",
      "cpp": "MediaItem* item AddMediaItemToTrack(MediaTrack* tr)",
      "python": "MediaItem item RPR_AddMediaItemToTrack(MediaTrack tr)",
      "eel": "MediaItem item AddMediaItemToTrack(MediaTrack tr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "the newly created MediaItem-object" }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tr", "type": "MediaTrack" }],
        "method_name": "reaper.AddMediaItemToTrack",
        "return_values": [{ "identifier": "item", "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [
      "markermanagement",
      "region",
      "marker",
      "name",
      "shownnumber",
      "pos",
      "project",
      "add"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Creates a new Projectmarker/Region.\nReturns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "boolean isrgn",
          "description": "true, if it shall be a region; false, if a normal marker"
        },
        {
          "identifier": "number pos",
          "description": "the position of the newly created marker/region in seconds"
        },
        {
          "identifier": "number rgnend",
          "description": "if the marker is a region, this is the end of the region in seconds"
        },
        { "identifier": "string name", "description": "the shown name of the marker" },
        {
          "identifier": "integer wantidx",
          "description": "the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "AddProjectMarker",
    "functioncall": {
      "lua": "integer = reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)",
      "cpp": "int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)",
      "python": "Int RPR_AddProjectMarker(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx)",
      "eel": "int AddProjectMarker(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the shown-number of the newly created marker/region"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "wantidx", "type": "integer" }
        ],
        "method_name": "reaper.AddProjectMarker",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [
      "markermanagement",
      "region",
      "marker",
      "name",
      "shownnumber",
      "pos",
      "project",
      "add"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or [ColorToNative(r,g,b)|0x1000000](#ColorToNative)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project, in which to add the new marker; use 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "boolean isrgn",
          "description": "true, if it shall be a region; false, if a normal marker"
        },
        {
          "identifier": "number pos",
          "description": "the position of the newly created marker/region in seconds"
        },
        {
          "identifier": "number rgnend",
          "description": "if the marker is a region, this is the end of the region in seconds"
        },
        { "identifier": "string name", "description": "the shown name of the marker" },
        {
          "identifier": "integer wantidx",
          "description": "the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given."
        },
        {
          "identifier": "integer color",
          "description": "the color as returned by the function [ColorToNative(r,g,b)|0x1000000](#ColorToNative)"
        }
      ],
      "param_count": 7,
      "markup_type": "markdown"
    },
    "title": "AddProjectMarker2",
    "functioncall": {
      "lua": "integer = reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)",
      "cpp": "int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)",
      "python": "Int RPR_AddProjectMarker2(ReaProject proj, Boolean isrgn, Float pos, Float rgnend, String name, Int wantidx, Int color)",
      "eel": "int AddProjectMarker2(ReaProject proj, bool isrgn, pos, rgnend, \"name\", int wantidx, int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the shown-number of the newly created marker/region"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "wantidx", "type": "integer" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.AddProjectMarker2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "reascript", "lua", "python", "eel", "add", "remove", "commandid"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Adds a ReaScript (returns the new command ID, or 0 if failed) or removes a ReaScript\nReturns &gt;0 on success. \nUse commit==true when adding/removing a single script. \nWhen bulk adding/removing multiple scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.            \nThe commandID returned, might change, when addng this script into an other Reaper-installation. \nTo be sure to use the right command-id, use [ReverseNamedCommandLookup()](#ReverseNamedCommandLookup) to get the ActionCommandID, which will never change, until you remove the script.\n\nIf you want to add a script to several sections, you need to add them individually, by calling the function again with the changed section-number.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean add",
          "description": "true, if it shall be added, false if it shall be removed"
        },
        {
          "identifier": "integer sectionID",
          "description": "the section, in which this script shall appear(e.g. in the Show Actions-Dialog)\n  0, Main\n  100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.\n  32060, MIDI Editor\n  32061, MIDI Event List Editor\n  32062, MIDI Inline Editor\n  32063, Media Explorer"
        },
        {
          "identifier": "string scriptfn",
          "description": "the filename of the Reascript to be added"
        },
        {
          "identifier": "boolean commit",
          "description": "true, if it shall be committed, false, if you want to add new scripts first. \nCommitting means, that Reaper stores the Reascript-information into the reaper-kb.ini for permanent use. \nIt will be committed at Reaper's exit as well, but if Reaper crashes before exiting properly, your added\nscript might get lost. When adding many Reascripts to Reaper, setting commit to false might help prevail \nressources, as you don't rewrite the reaper-kb.ini file over and over again. However, if you only add a \nfew scripts, this might not be of importance to you."
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "AddRemoveReaScript",
    "functioncall": {
      "lua": "integer = reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)",
      "cpp": "int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)",
      "python": "Int RPR_AddRemoveReaScript(Boolean add, Int sectionID, String scriptfn, Boolean commit)",
      "eel": "int AddRemoveReaScript(bool add, int sectionID, \"scriptfn\", bool commit)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the command ID for this script." }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "add", "type": "boolean" },
          { "identifier": "sectionID", "type": "integer" },
          { "identifier": "scriptfn", "type": "string" },
          { "identifier": "commit", "type": "boolean" }
        ],
        "method_name": "reaper.AddRemoveReaScript",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "mediaitem", "item", "track", "empty", "take"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "creates a new take in an item",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "a MediaItem-object, in which you want to add the new take"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "AddTakeToMediaItem",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.AddTakeToMediaItem(MediaItem item)",
      "cpp": "MediaItem_Take* AddTakeToMediaItem(MediaItem* item)",
      "python": "MediaItem_Take RPR_AddTakeToMediaItem(MediaItem item)",
      "eel": "MediaItem_Take AddTakeToMediaItem(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take", "description": "the newly created MediaItem_Take-object" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.AddTakeToMediaItem",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "timesignature", "tempo", "marker", "add"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deprecated. Use [SetTempoTimeSigMarker](#SetTempoTimeSigMarker) with ptidx=-1.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project in which to add the TempoTimesigMarker, 0 for the current project; can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "number timepos", "description": "the position in seconds" },
        { "identifier": "number bpm", "description": "the speed in bpm" },
        {
          "identifier": "integer timesig_num",
          "description": "timesignature number : timesig\\_num/timesig\\_denom, e.g. 3/4"
        },
        {
          "identifier": "integer timesig_denom",
          "description": "timesignature denominator : timesig\\_num/timesig\\_denom, e.g. 3/4"
        },
        {
          "identifier": "boolean lineartempochange",
          "description": "true, linear tempo change, false not"
        }
      ],
      "param_count": 6,
      "markup_type": "markdown"
    },
    "title": "AddTempoTimeSigMarker",
    "functioncall": {
      "lua": "boolean = reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)",
      "cpp": "bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)",
      "python": "Boolean RPR_AddTempoTimeSigMarker(ReaProject proj, Float timepos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempochange)",
      "eel": "bool AddTempoTimeSigMarker(ReaProject proj, timepos, bpm, int timesig_num, int timesig_denom, bool lineartempochange)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if adding was successful; false, if not" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "timepos", "type": "number" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "timesig_num", "type": "integer" },
          { "identifier": "timesig_denom", "type": "integer" },
          { "identifier": "lineartempochange", "type": "boolean" }
        ],
        "method_name": "reaper.AddTempoTimeSigMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "view", "zoom", "center"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets horizontal zoom in track view.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number amt",
          "description": "the zoom factor, positive values=zoom in, negative values=zoom out, 0=no zoom"
        },
        {
          "identifier": "integer forceset",
          "description": "forces one amt-zoomfactor(non zero) or allows repeatable zoom-in/zoomout(0)"
        },
        {
          "identifier": "boolean doupd",
          "description": "true, updates the track-view instantly; false, or only when mouse hovers over trackview"
        },
        {
          "identifier": "integer centermode",
          "description": "decides, what shall be in the center of the view. The following are available:\n -1, default selection, as set in the reaper-prefs, \n  0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,\n  1, keeps edit-cursor in center of zoom\n  2, keeps center of view in the center during zoom\n  3, keeps in center of zoom, what is beneath the mousecursor"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "adjustZoom",
    "functioncall": {
      "lua": "reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)",
      "cpp": "void adjustZoom(double amt, int forceset, bool doupd, int centermode)",
      "python": "RPR_adjustZoom(Float amt, Int forceset, Boolean doupd, Int centermode)",
      "eel": "adjustZoom(amt, int forceset, bool doupd, int centermode)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "amt", "type": "number" },
          { "identifier": "forceset", "type": "integer" },
          { "identifier": "doupd", "type": "boolean" },
          { "identifier": "centermode", "type": "integer" }
        ],
        "method_name": "reaper.adjustZoom",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "states", "solo"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns, whether any of the tracks is solo in Project proj",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "AnyTrackSolo",
    "functioncall": {
      "lua": "boolean = reaper.AnyTrackSolo(ReaProject proj)",
      "cpp": "bool AnyTrackSolo(ReaProject* proj)",
      "python": "Boolean RPR_AnyTrackSolo(ReaProject proj)",
      "eel": "bool AnyTrackSolo(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true if any track is solo; false if not. Covers all solo-states(solo in place, ignore routing, exclusive solo, solo defeat)."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.AnyTrackSolo",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["api", "exists", "check", "helper"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if function_name exists in the REAPER API",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string function_name",
          "description": "the name of the function you want to check the existence for"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "APIExists",
    "functioncall": {
      "lua": "boolean = reaper.APIExists(string function_name)",
      "cpp": "bool APIExists(const char* function_name)",
      "python": "Boolean RPR_APIExists(String function_name)",
      "eel": "bool APIExists(function_name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if function_name exists, false if not" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "function_name", "type": "string" }],
        "method_name": "reaper.APIExists",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["api", "test", "check", "hello world"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Displays a message window with \"Hello World\", if the API was successfully called.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "APITest",
    "functioncall": {
      "lua": "reaper.APITest()",
      "cpp": "void APITest()",
      "python": "RPR_APITest()",
      "eel": "APITest()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.APITest", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [
      "arrangeviewmanagement",
      "nudge",
      "snap",
      "value",
      "units",
      "trim",
      "position",
      "content",
      "duplicate",
      "editcursor",
      "ms",
      "grid",
      "pixels",
      "frames",
      "samples",
      "measures",
      "beats",
      "length",
      "selection"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Nudges elements like items, cursor, contents, etc to or by a value you want. Nudges only selected mediaitems.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project, in which to nudge; 0 for the current project"
        },
        {
          "identifier": "integer nudgeflag",
          "description": "the way to nudge\n&1, set to value(otherwise nudge by values)\n&2, snap"
        },
        {
          "identifier": "integer nudgewhat",
          "description": "what to nudge\n0, position\n1, left trim\n2, left edge\n3, right edge\n4, contents\n5, duplicate\n6, editcursor"
        },
        {
          "identifier": "integer nudgeunits",
          "description": "the unit, in which to nudge\n0, ms\n1, seconds\n2, grid\n3, 256th notes\n...\n15, whole notes\n16, measures.beats (1.15 = 1 measure + 1.5 beats)\n17, samples\n18, frames\n19, pixels \n20, item lengths\n21, item selections"
        },
        {
          "identifier": "number value",
          "description": "amount to nudge by, or value to set to(depending on the settings in nudgeflag and the unit in nudgeunits)"
        },
        {
          "identifier": "boolean reverse",
          "description": "in nudge mode: true nudges left; right doesn't nudge to left"
        },
        {
          "identifier": "integer copies",
          "description": "in nudge duplicate mode, number of copies (otherwise ignored)"
        }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "ApplyNudge",
    "functioncall": {
      "lua": "boolean = reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)",
      "cpp": "bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)",
      "python": "Boolean RPR_ApplyNudge(ReaProject project, Int nudgeflag, Int nudgewhat, Int nudgeunits, Float value, Boolean reverse, Int copies)",
      "eel": "bool ApplyNudge(ReaProject project, int nudgeflag, int nudgewhat, int nudgeunits, value, bool reverse, int copies)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if it worked; false, if it didn't" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "nudgeflag", "type": "integer" },
          { "identifier": "nudgewhat", "type": "integer" },
          { "identifier": "nudgeunits", "type": "integer" },
          { "identifier": "value", "type": "number" },
          { "identifier": "reverse", "type": "boolean" },
          { "identifier": "copies", "type": "integer" }
        ],
        "method_name": "reaper.ApplyNudge",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "midi", "audiomanagement", "open", "devices"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "open all audio and MIDI devices, if not open",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Audio_Init",
    "functioncall": {
      "lua": "reaper.Audio_Init()",
      "cpp": "void Audio_Init()",
      "python": "RPR_Audio_Init()",
      "eel": "Audio_Init()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.Audio_Init", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "is in pre-buffer? threadsafe",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Audio_IsPreBuffer",
    "functioncall": {
      "lua": "integer = reaper.Audio_IsPreBuffer()",
      "cpp": "int Audio_IsPreBuffer()",
      "python": "Int RPR_Audio_IsPreBuffer()",
      "eel": "int Audio_IsPreBuffer()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.Audio_IsPreBuffer",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "midi", "audiomanagement", "running", "devices"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "is audio running at all? threadsafe",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Audio_IsRunning",
    "functioncall": {
      "lua": "integer = reaper.Audio_IsRunning()",
      "cpp": "int Audio_IsRunning()",
      "python": "Int RPR_Audio_IsRunning()",
      "eel": "int Audio_IsRunning()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "0, audio is not running; 1, audio is running" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.Audio_IsRunning",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "midi", "audiomanagement", "quit", "devices"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "close all audio and MIDI devices, if open",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Audio_Quit",
    "functioncall": {
      "lua": "reaper.Audio_Quit()",
      "cpp": "void Audio_Quit()",
      "python": "RPR_Audio_Quit()",
      "eel": "Audio_Quit()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.Audio_Quit", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "accessor", "get", "statechange"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call [AudioAccessorValidateState](#AudioAccessorValidateState) only when needed. \n\nSee [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "AudioAccessorStateChanged",
    "functioncall": {
      "lua": "boolean reaper.AudioAccessorStateChanged(AudioAccessor accessor)",
      "cpp": "bool AudioAccessorStateChanged(AudioAccessor* accessor)",
      "python": "Boolean RPR_AudioAccessorStateChanged(AudioAccessor accessor)",
      "eel": "bool AudioAccessorStateChanged(AudioAccessor accessor)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "accessor", "type": "AudioAccessor" }
        ],
        "method_name": "reaper.AudioAccessorStateChanged",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "accessor", "update", "mediatrack", "mediaitemtake"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Force the accessor to reload its state from the underlying track or media item take. \n\nSee [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "AudioAccessorUpdate",
    "functioncall": {
      "lua": "reaper.AudioAccessorUpdate(AudioAccessor accessor)",
      "cpp": "void AudioAccessorUpdate(AudioAccessor* accessor)",
      "python": "RPR_AudioAccessorUpdate(AudioAccessor accessor)",
      "eel": "AudioAccessorUpdate(AudioAccessor accessor)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "accessor", "type": "AudioAccessor" }],
        "method_name": "reaper.AudioAccessorUpdate",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": ["audiomanagement", "validate", "audio", "accessor", "item", "take"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "AudioAccessor accessor",
          "description": "the AudioAccessor for a MediaTrack or a MediaItem_take"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "AudioAccessorValidateState",
    "functioncall": {
      "lua": "boolean = reaper.AudioAccessorValidateState(AudioAccessor accessor)",
      "cpp": "bool AudioAccessorValidateState(AudioAccessor* accessor)",
      "python": "Boolean RPR_AudioAccessorValidateState(AudioAccessor accessor)",
      "eel": "bool AudioAccessorValidateState(AudioAccessor accessor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if state has changed; false, if state hasn't changed"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "accessor", "type": "AudioAccessor" }],
        "method_name": "reaper.AudioAccessorValidateState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "track", "bypass", "fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Does bypassing of the fx of all tracks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer bypass",
          "description": "-1, bypass all if not all bypassed,otherwise unbypass all"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BypassFxAllTracks",
    "functioncall": {
      "lua": "reaper.BypassFxAllTracks(integer bypass)",
      "cpp": "void BypassFxAllTracks(int bypass)",
      "python": "RPR_BypassFxAllTracks(Int bypass)",
      "eel": "BypassFxAllTracks(int bypass)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "bypass", "type": "integer" }],
        "method_name": "reaper.BypassFxAllTracks",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "rec", "arm", "state", "clear", "off"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Clears all armed states of all tracks.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "ClearAllRecArmed",
    "functioncall": {
      "lua": "reaper.ClearAllRecArmed()",
      "cpp": "void ClearAllRecArmed()",
      "python": "RPR_ClearAllRecArmed()",
      "eel": "ClearAllRecArmed()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.ClearAllRecArmed", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "console", "clear", "reaconsole"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Clear the ReaScript console. See [ShowConsoleMsg](#ShowConsoleMsg)",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "ClearConsole",
    "functioncall": {
      "lua": "reaper.ClearConsole()",
      "cpp": "void ClearConsole()",
      "python": "RPR_ClearConsole()",
      "eel": "ClearConsole()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.ClearConsole", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "peak", "cache", "clear"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "resets the global peak caches",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "ClearPeakCache",
    "functioncall": {
      "lua": "reaper.ClearPeakCache()",
      "cpp": "void ClearPeakCache()",
      "python": "RPR_ClearPeakCache()",
      "eel": "ClearPeakCache()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.ClearPeakCache", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["colormanagement", "native", "from", "conversion"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Extract RGB values from an OS dependent color. See [ColorToNative](#ColorToNative).\n\nAs Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](#ColorToNative).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer col", "description": "the colorvalue to convert from" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ColorFromNative",
    "functioncall": {
      "lua": "integer r, integer g, integer b = reaper.ColorFromNative(integer col)",
      "cpp": "void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)",
      "python": "(Int col, Int rOut, Int gOut, Int bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)",
      "eel": "ColorFromNative(int col, int &amp;r, int &amp;g, int &amp;b)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer r", "description": "the value for red, from 0 to 255" },
        { "identifier": "integer g", "description": "the value for green, from 0 to 255" },
        { "identifier": "integer b", "description": "the value for blue, from 0 to 255" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "col", "type": "integer" }],
        "method_name": "reaper.ColorFromNative",
        "return_values": [
          { "identifier": "r", "type": "integer" },
          { "identifier": "g", "type": "integer" },
          { "identifier": "b", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["colormanagement", "native", "from", "conversion"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See [ColorFromNative](#ColorFromNative)\nAs Reaper treats colors differently on Mac and Windows, you should always use [ColorFromNative](#ColorFromNative) and [ColorToNative](ColorToNative).\n\nWhen using the returned colorvalue, you need to add |0x1000000 at the end of it, like ColorToNative(20,30,40)|0x1000000.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer r", "description": "the value for red, from 0 to 255" },
        { "identifier": "integer g", "description": "the value for green, from 0 to 255" },
        { "identifier": "integer b", "description": "the value for blue, from 0 to 255" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "ColorToNative",
    "functioncall": {
      "lua": "integer = reaper.ColorToNative(integer r, integer g, integer b)",
      "cpp": "int ColorToNative(int r, int g, int b)",
      "python": "Int RPR_ColorToNative(Int r, Int g, Int b)",
      "eel": "int ColorToNative(int r, int g, int b)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer col",
          "description": "the correct colorvalue, fitting to your system."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "r", "type": "integer" },
          { "identifier": "g", "type": "integer" },
          { "identifier": "b", "type": "integer" }
        ],
        "method_name": "reaper.ColorToNative",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Automation Management"],
    "tags": ["envelopemanagement", "automation items", "count", "envelopes"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the number of automation items on this envelope. See [GetSetAutomationItemInfo](#GetSetAutomationItemInfo).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope env",
          "description": "the envelope-object for the envelope-lane"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountAutomationItems",
    "functioncall": {
      "lua": "integer = reaper.CountAutomationItems(TrackEnvelope env)",
      "cpp": "int CountAutomationItems(TrackEnvelope* env)",
      "python": "Int RPR_CountAutomationItems(TrackEnvelope env)",
      "eel": "int CountAutomationItems(TrackEnvelope env)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "number of automation items" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "env", "type": "TrackEnvelope" }],
        "method_name": "reaper.CountAutomationItems",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "envelopes", "count", "points"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the number of points in the envelope. See [#CountEnvelopePointsEx](#CountEnvelopePointsEx)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope envelope",
          "description": "the TrackEnvelope-object, in which to count for the envelope-points"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountEnvelopePoints",
    "functioncall": {
      "lua": "integer = reaper.CountEnvelopePoints(TrackEnvelope envelope)",
      "cpp": "int CountEnvelopePoints(TrackEnvelope* envelope)",
      "python": "Int RPR_CountEnvelopePoints(TrackEnvelope envelope)",
      "eel": "int CountEnvelopePoints(TrackEnvelope envelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of envelope-points in the envelopeobject envelope"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "TrackEnvelope" }],
        "method_name": "reaper.CountEnvelopePoints",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "envelopes", "count", "points", "automation items"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the number of points in the envelope.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee [GetEnvelopePointEx](#GetEnvelopePointEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope envelope",
          "description": "the TrackEnvelope-object, in which to count for the envelope-points"
        },
        {
          "identifier": "integer autoitem_idx",
          "description": "-1, for the underlying envelope, 0, for the first automation item on the envelope, etc."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CountEnvelopePointsEx",
    "functioncall": {
      "lua": "integer = reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)",
      "cpp": "int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)",
      "python": "Int RPR_CountEnvelopePointsEx(TrackEnvelope envelope, Int autoitem_idx)",
      "eel": "int CountEnvelopePointsEx(TrackEnvelope envelope, int autoitem_idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of envelope-points in the envelopeobject envelope"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" }
        ],
        "method_name": "reaper.CountEnvelopePointsEx",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "count", "mediaitems"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "count the number of items in the project (proj=0 for active project)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project, in which to count for the number of items; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "CountMediaItems",
    "functioncall": {
      "lua": "integer = reaper.CountMediaItems(ReaProject proj)",
      "cpp": "int CountMediaItems(ReaProject* proj)",
      "python": "Int RPR_CountMediaItems(ReaProject proj)",
      "eel": "int CountMediaItems(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of MediaItems in a project" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountMediaItems",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "count", "all", "markers", "regions"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns the number of all markers and regions, as well as all markers and all regions in a project.\nnum_markersOut and num_regionsOut may be NULL.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project, in which to count the markers; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "CountProjectMarkers",
    "functioncall": {
      "lua": "integer retval, number num_markers, number num_regions = reaper.CountProjectMarkers(ReaProject proj)",
      "cpp": "int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)",
      "python": "(Int retval, ReaProject proj, Int num_markersOut, Int num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)",
      "eel": "int CountProjectMarkers(ReaProject proj, int &amp;num_markers, int &amp;num_regions)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "all markers and regions in the project" },
        {
          "identifier": "integer num_markers",
          "description": "the number of markers in the project"
        },
        {
          "identifier": "integer num_regions",
          "description": "the number of regions in the project"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountProjectMarkers",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "num_markers", "type": "number" },
          { "identifier": "num_regions", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "count", "selected", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "count the number of selected items in the project (proj=0 for active project)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project, in which to count for the selected mediaitems; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "CountSelectedMediaItems",
    "functioncall": {
      "lua": "integer = reaper.CountSelectedMediaItems(ReaProject proj)",
      "cpp": "int CountSelectedMediaItems(ReaProject* proj)",
      "python": "Int RPR_CountSelectedMediaItems(ReaProject proj)",
      "eel": "int CountSelectedMediaItems(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of selected items in the project" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountSelectedMediaItems",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "track", "selected", "count"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Count the number of selected tracks in the project. \nThis function ignores the master track, see [CountSelectedTracks2](#CountSelectedTracks2)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "CountSelectedTracks",
    "functioncall": {
      "lua": "integer = reaper.CountSelectedTracks(ReaProject proj)",
      "cpp": "int CountSelectedTracks(ReaProject* proj)",
      "python": "Int RPR_CountSelectedTracks(ReaProject proj)",
      "eel": "int CountSelectedTracks(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of selected tracks in the project" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountSelectedTracks",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "selected", "track", "master", "count"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Count the number of selected tracks in the project.\nif you set wantmaster to true, it will include the master track as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the number of the project in which to count the selected tracks; 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "boolean wantmaster",
          "description": "true, if you want to count the master-track as well; false, if you don't want to count it"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "CountSelectedTracks2",
    "functioncall": {
      "lua": "integer = reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)",
      "cpp": "int CountSelectedTracks2(ReaProject* proj, bool wantmaster)",
      "python": "Int RPR_CountSelectedTracks2(ReaProject proj, Boolean wantmaster)",
      "eel": "int CountSelectedTracks2(ReaProject proj, bool wantmaster)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of selected tracks in your project" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "wantmaster", "type": "boolean" }
        ],
        "method_name": "reaper.CountSelectedTracks2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "take", "envelope"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetTakeEnvelope](#GetTakeEnvelope)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the mediaitem-object for a certain take"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountTakeEnvelopes",
    "functioncall": {
      "lua": "integer = reaper.CountTakeEnvelopes(MediaItem_Take take)",
      "cpp": "int CountTakeEnvelopes(MediaItem_Take* take)",
      "python": "Int RPR_CountTakeEnvelopes(MediaItem_Take take)",
      "eel": "int CountTakeEnvelopes(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "number of envelopes of this take of a mediaitem"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.CountTakeEnvelopes",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "count", "takes", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "count the number of takes in the item",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "the mediaitem to count the takes of" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountTakes",
    "functioncall": {
      "lua": "integer = reaper.CountTakes(MediaItem item)",
      "cpp": "int CountTakes(MediaItem* item)",
      "python": "Int RPR_CountTakes(MediaItem item)",
      "eel": "int CountTakes(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the number of takes in a mediaitem" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.CountTakes",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "count", "fx", "parameter", "knobs", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Count the number of FX parameter knobs displayed on the track control panel.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project, in which to count the knobs"
        },
        { "identifier": "MediaTrack track", "description": "the track of which to count the knobs" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CountTCPFXParms",
    "functioncall": {
      "lua": "integer = reaper.CountTCPFXParms(ReaProject project, MediaTrack track)",
      "cpp": "int CountTCPFXParms(ReaProject* project, MediaTrack* track)",
      "python": "Int RPR_CountTCPFXParms(ReaProject project, MediaTrack track)",
      "eel": "int CountTCPFXParms(ReaProject project, MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the number of FX-parameter-knobs " }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.CountTCPFXParms",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "tempo", "timesignature", "count"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Count the number of tempo/time signature markers in the project. See [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "project number; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountTempoTimeSigMarkers",
    "functioncall": {
      "lua": "integer = reaper.CountTempoTimeSigMarkers(ReaProject proj)",
      "cpp": "int CountTempoTimeSigMarkers(ReaProject* proj)",
      "python": "Int RPR_CountTempoTimeSigMarkers(ReaProject proj)",
      "eel": "int CountTempoTimeSigMarkers(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of tempo/time-signature markers in the project."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountTempoTimeSigMarkers",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "count", "track-envelopes", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Counts the number of track-envelopes of a certain track.\nsee [GetTrackEnvelope](#GetTrackEnvelope)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the object of the track to count it's envelopes"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountTrackEnvelopes",
    "functioncall": {
      "lua": "integer = reaper.CountTrackEnvelopes(MediaTrack track)",
      "cpp": "int CountTrackEnvelopes(MediaTrack* track)",
      "python": "Int RPR_CountTrackEnvelopes(MediaTrack track)",
      "eel": "int CountTrackEnvelopes(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of track-envelopes in a track" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.CountTrackEnvelopes",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "track", "count", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "count the number of items in the track",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "the MediaTrack to count the items of" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CountTrackMediaItems",
    "functioncall": {
      "lua": "integer = reaper.CountTrackMediaItems(MediaTrack track)",
      "cpp": "int CountTrackMediaItems(MediaTrack* track)",
      "python": "Int RPR_CountTrackMediaItems(MediaTrack track)",
      "eel": "int CountTrackMediaItems(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of mediaitems in the track" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.CountTrackMediaItems",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "count", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "count the number of tracks in the project (proj=0 for active project)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project in which to count the tracks; 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "CountTracks",
    "functioncall": {
      "lua": "integer = reaper.CountTracks(ReaProject proj)",
      "cpp": "int CountTracks(ReaProject* proj)",
      "python": "Int RPR_CountTracks(ReaProject proj)",
      "eel": "int CountTracks(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of tracks in the project, excluding the master-track."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.CountTracks",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "midi", "track", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the object of the track, in which to create this mediaitem"
        },
        {
          "identifier": "number starttime",
          "description": "starttime of the item in seconds, unless qnIn is set to true"
        },
        {
          "identifier": "number endtime",
          "description": "endtime of the item in seconds, unless qnIn is set to true"
        },
        {
          "identifier": "boolean qnIn",
          "description": "unknown; can be set to true, or false or be omitted"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CreateNewMIDIItemInProj",
    "functioncall": {
      "lua": "MediaItem = reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)",
      "cpp": "MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)",
      "python": "MediaItem RPR_CreateNewMIDIItemInProj(MediaTrack track, Float starttime, Float endtime, const bool qnInOptional)",
      "eel": "MediaItem CreateNewMIDIItemInProj(MediaTrack track, starttime, endtime, optional bool qnIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem", "description": "the newly created MIDI-mediaitem." }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "starttime", "type": "number" },
          { "identifier": "endtime", "type": "number" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.CreateNewMIDIItemInProj",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": ["audiomanagement", "audio", "accessor", "create", "item", "take"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create an audio accessor object for this take. Must only call from the main thread. \n\nSee [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the take from a MediaItem-object, of which you want to create a new AudioAccessor"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CreateTakeAudioAccessor",
    "functioncall": {
      "lua": "AudioAccessor = reaper.CreateTakeAudioAccessor(MediaItem_Take take)",
      "cpp": "AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)",
      "python": "AudioAccessor RPR_CreateTakeAudioAccessor(MediaItem_Take take)",
      "eel": "AudioAccessor CreateTakeAudioAccessor(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "AudioAccessor", "description": "the newly created AudioAccessor" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.CreateTakeAudioAccessor",
        "return_values": [{ "type": "AudioAccessor" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": ["audiomanagement", "audio", "accessor", "create", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create an audio accessor object for this track. Must only call from the main thread. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the MediaTrack, of which you want to create an AudioAccessor"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CreateTrackAudioAccessor",
    "functioncall": {
      "lua": "AudioAccessor = reaper.CreateTrackAudioAccessor(MediaTrack track)",
      "cpp": "AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)",
      "python": "AudioAccessor RPR_CreateTrackAudioAccessor(MediaTrack track)",
      "eel": "AudioAccessor CreateTrackAudioAccessor(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "AudioAccessor",
          "description": "the newly created AudioAccessor for this MediaTrack"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.CreateTrackAudioAccessor",
        "return_values": [{ "type": "AudioAccessor" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "create", "routing", "hwout", "hardware out", "send", "receive"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return &gt;=0 on success (== new send/receive index). See [RemoveTrackSend](#RemoveTrackSend), [GetSetTrackSendInfo](#GetSetTrackSendInfo), [GetTrackSendInfo\\_Value](#GetTrackSendInfo_Value), [SetTrackSendInfo\\_Value](#SetTrackSendInfo_Value).\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack tr",
          "description": "the MediaTrack in which to create the send/hwout"
        },
        {
          "identifier": "MediaTrack desttrIn",
          "description": "destination track input; \na MediaTrack-object, creates a new send to tr from MediaTrack-object; \nnil(or no MediaTrack-object), creates a new hardware-output"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CreateTrackSend",
    "functioncall": {
      "lua": "integer = reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)",
      "cpp": "int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)",
      "python": "Int RPR_CreateTrackSend(MediaTrack tr, MediaTrack desttrInOptional)",
      "eel": "int CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the id of the new HWOut or Send created. HWOut and Send have their own individual index-numbering."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "desttrIn", "type": "MediaTrack" }
        ],
        "method_name": "reaper.CreateTrackSend",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call this to force flushing of the undo states after using CSurf_On*Change()",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean force", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_FlushUndo",
    "functioncall": {
      "lua": "reaper.CSurf_FlushUndo(boolean force)",
      "cpp": "void CSurf_FlushUndo(bool force)",
      "python": "RPR_CSurf_FlushUndo(Boolean force)",
      "eel": "CSurf_FlushUndo(bool force)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "force", "type": "boolean" }],
        "method_name": "reaper.CSurf_FlushUndo",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "integer isPan", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_GetTouchState",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)",
      "cpp": "bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)",
      "python": "Boolean RPR_CSurf_GetTouchState(MediaTrack trackid, Int isPan)",
      "eel": "bool CSurf_GetTouchState(MediaTrack trackid, int isPan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "isPan", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_GetTouchState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "move", "cursor", "end", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves the cursor to the end of the last item in the project.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_GoEnd",
    "functioncall": {
      "lua": "reaper.CSurf_GoEnd()",
      "cpp": "void CSurf_GoEnd()",
      "python": "RPR_CSurf_GoEnd()",
      "eel": "CSurf_GoEnd()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_GoEnd", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "move", "cursor", "start", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves the cursor to the start of the project.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_GoStart",
    "functioncall": {
      "lua": "reaper.CSurf_GoStart()",
      "cpp": "void CSurf_GoStart()",
      "python": "RPR_CSurf_GoStart()",
      "eel": "CSurf_GoStart()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_GoStart", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "count", "tracks", "visible", "invisible"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "counts the number of tracks, or the number of visible tracks, when mcpView is set to true.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean mcpView",
          "description": "true, only return the number of tracks visible in MCP; false, count all tracks, incl. invisible"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_NumTracks",
    "functioncall": {
      "lua": "integer = reaper.CSurf_NumTracks(boolean mcpView)",
      "cpp": "int CSurf_NumTracks(bool mcpView)",
      "python": "Int RPR_CSurf_NumTracks(Boolean mcpView)",
      "eel": "int CSurf_NumTracks(bool mcpView)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "number of tracks" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "mcpView", "type": "boolean" }],
        "method_name": "reaper.CSurf_NumTracks",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "zoom", "vertical", "scroll", "arrange", "view"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Zoom or scroll the Arrangeview vertically. \nThe stepsize with scrolling is track by track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer whichdir",
          "description": "into which (zoom-)direction to change\n  0, move arrangeview upward(one track each step)/zoom in\n  1, move arrangeview downward(one track each step)/zoom out"
        },
        {
          "identifier": "boolean wantzoom",
          "description": "true, adjust vertical zoom; false, adjust vertical scrolling"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnArrow",
    "functioncall": {
      "lua": "reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)",
      "cpp": "void CSurf_OnArrow(int whichdir, bool wantzoom)",
      "python": "RPR_CSurf_OnArrow(Int whichdir, Boolean wantzoom)",
      "eel": "CSurf_OnArrow(int whichdir, bool wantzoom)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "whichdir", "type": "integer" },
          { "identifier": "wantzoom", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnArrow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "cursor", "forward", "jump", "seekplay"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves editcursor forward, and optionally with seekplay.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer seekplay",
          "description": "how to move the editcursor forward\n  0, move cursor forward in small steps. Stepsize depends on horizontal zoomfactor.\n  1, move cursor forward, in half-second steps when stopped; when playing it jumps ahead with playing restarting at editcursor"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnFwd",
    "functioncall": {
      "lua": "reaper.CSurf_OnFwd(integer seekplay)",
      "cpp": "void CSurf_OnFwd(int seekplay)",
      "python": "RPR_CSurf_OnFwd(Int seekplay)",
      "eel": "CSurf_OnFwd(int seekplay)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "seekplay", "type": "integer" }],
        "method_name": "reaper.CSurf_OnFwd",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "fx", "set", "toggle", "chain"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/toggles activation of FX-Chain.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack, whose FX-chain you want to de-/activate"
        },
        {
          "identifier": "integer en",
          "description": "activation state of FX-chain\n  -1, toggle FX-chain on/off\n   0, set FX-chain off\n   1, set FX-chain on"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnFXChange",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)",
      "cpp": "bool CSurf_OnFXChange(MediaTrack* trackid, int en)",
      "python": "Boolean RPR_CSurf_OnFXChange(MediaTrack trackid, Int en)",
      "eel": "bool CSurf_OnFXChange(MediaTrack trackid, int en)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if FX-chain is activated; false, if FX-chain is deactivated"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "en", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnFXChange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "rec", "toggle", "monitoring"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets rec-monitoring of a specific track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack, of which you want to toggle the monitor-button"
        },
        {
          "identifier": "integer monitor",
          "description": "monitor-input-state\n  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)\n   0, monitor off (can be set with 3 and higher as well)\n   1, monitor input on"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnInputMonitorChange",
    "functioncall": {
      "lua": "integer = reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)",
      "cpp": "int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)",
      "python": "Int RPR_CSurf_OnInputMonitorChange(MediaTrack trackid, Int monitor)",
      "eel": "int CSurf_OnInputMonitorChange(MediaTrack trackid, int monitor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the new input-monitor-state (refer to parameter monitor for description)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "monitor", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnInputMonitorChange",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "set", "monitor", "input", "tape auto style", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets monitor-input-state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack, whose monitor-input-state you want to set"
        },
        {
          "identifier": "integer monitor",
          "description": "monitor-input-state\n  -1, monitor input on(tape auto style) (can be set with negative values, and 2 as well)\n   0, monitor off (can be set with 3 and higher as well)\n   1, monitor input on"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnInputMonitorChangeEx",
    "functioncall": {
      "lua": "integer = reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)",
      "cpp": "int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)",
      "python": "Int RPR_CSurf_OnInputMonitorChangeEx(MediaTrack trackid, Int monitor, Boolean allowgang)",
      "eel": "int CSurf_OnInputMonitorChangeEx(MediaTrack trackid, int monitor, bool allowgang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the new input-monitor-state (refer to parameter monitor for description)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "monitor", "type": "integer" },
          { "identifier": "allowgang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnInputMonitorChangeEx",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "mute", "set", "toggle"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets mute state of a MediaTrack.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "the MediaTrack to be muted" },
        {
          "identifier": "integer mute",
          "description": "mute state\n  0, mute off\n  1 and higher, mute on\n  negative values toggle mute-state"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnMuteChange",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)",
      "cpp": "bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)",
      "python": "Boolean RPR_CSurf_OnMuteChange(MediaTrack trackid, Int mute)",
      "eel": "bool CSurf_OnMuteChange(MediaTrack trackid, int mute)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "the new mute-state; true, mute is on; false, mute is off"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "mute", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnMuteChange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "mute", "set", "toggle"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/toggles mute-state for a MediaTrack. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "the MediaTrack to be muted" },
        {
          "identifier": "integer mute",
          "description": "mute state\n  0, mute off\n  1, and higher, mute on\n  negative values toggle mute-state"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnMuteChangeEx",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)",
      "cpp": "bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)",
      "python": "Boolean RPR_CSurf_OnMuteChangeEx(MediaTrack trackid, Int mute, Boolean allowgang)",
      "eel": "bool CSurf_OnMuteChangeEx(MediaTrack trackid, int mute, bool allowgang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "the new mute-state; true, mute is on; false, mute is off"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "mute", "type": "integer" },
          { "identifier": "allowgang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnMuteChangeEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "pan", "value", "center", "relative", "set", "change"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Changes the pan-value of a track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to change the pan"
        },
        {
          "identifier": "number pan",
          "description": "-1, full pan left; 1, full pan right; 0, pan centered"
        },
        {
          "identifier": "boolean relative",
          "description": "true, add/subtract pan to the currently set pan-value"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnPanChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)",
      "cpp": "double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)",
      "python": "Float RPR_CSurf_OnPanChange(MediaTrack trackid, Float pan, Boolean relative)",
      "eel": "double CSurf_OnPanChange(MediaTrack trackid, pan, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new pan-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnPanChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "pan", "value", "center", "relative", "set", "change", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Changes the pan-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to change the pan"
        },
        {
          "identifier": "number pan",
          "description": "-1, full pan left; 1, full pan right; 0, pan centered"
        },
        {
          "identifier": "boolean relative",
          "description": "true, add/subtract pan to the currently set pan-value"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnPanChangeEx",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)",
      "cpp": "double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)",
      "python": "Float RPR_CSurf_OnPanChangeEx(MediaTrack trackid, Float pan, Boolean relative, Boolean allowGang)",
      "eel": "double CSurf_OnPanChangeEx(MediaTrack trackid, pan, bool relative, bool allowGang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new pan-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "relative", "type": "boolean" },
          { "identifier": "allowGang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnPanChangeEx",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "toggle", "play", "rec", "pause"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Toggles between pause and play or when recording has started between pause and rec. Unlike [CSurf\\_OnPlay()](#CSurf_OnPlay) it toggles pause first, then plays.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "CSurf_OnPause",
    "functioncall": {
      "lua": "reaper.CSurf_OnPause()",
      "cpp": "void CSurf_OnPause()",
      "python": "RPR_CSurf_OnPause()",
      "eel": "CSurf_OnPause()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_OnPause", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "toggle", "play", "rec", "pause"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Toggles between play and pause or, when recording, rec and pause. Unlike [CSurf\\_OnPause()](#CSurf_OnPause) it toggles play first, then pauses.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "CSurf_OnPlay",
    "functioncall": {
      "lua": "reaper.CSurf_OnPlay()",
      "cpp": "void CSurf_OnPlay()",
      "python": "RPR_CSurf_OnPlay()",
      "eel": "CSurf_OnPlay()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_OnPlay", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "playback", "rate", "playrate"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the playbackrate of the current project. Can be between 0.25x to 4x.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number playrate",
          "description": "the playbackrate of the current project. 0.25 to 4.00"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnPlayRateChange",
    "functioncall": {
      "lua": "reaper.CSurf_OnPlayRateChange(number playrate)",
      "cpp": "void CSurf_OnPlayRateChange(double playrate)",
      "python": "RPR_CSurf_OnPlayRateChange(Float playrate)",
      "eel": "CSurf_OnPlayRateChange(playrate)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "playrate", "type": "number" }],
        "method_name": "reaper.CSurf_OnPlayRateChange",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "arm", "state", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets a MediaTrack's armed state.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to set the armed-state"
        },
        {
          "identifier": "integer recarm",
          "description": "the armstate; \n   0, set to unarmed\n   1 and higher, set to armed\n  -1 and lower, toggle recarm"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRecArmChange",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)",
      "cpp": "bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)",
      "python": "Boolean RPR_CSurf_OnRecArmChange(MediaTrack trackid, Int recarm)",
      "eel": "bool CSurf_OnRecArmChange(MediaTrack trackid, int recarm)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if set to armed; false, if not" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "recarm", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnRecArmChange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "arm", "state", "set", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets a MediaTrack's armed state. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to set the armed-state"
        },
        {
          "identifier": "integer recarm",
          "description": "the armstate; \n   0, set to unarmed\n   1 and higher, set to armed\n  -1 and lower, toggle recarm"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRecArmChangeEx",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)",
      "cpp": "bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)",
      "python": "Boolean RPR_CSurf_OnRecArmChangeEx(MediaTrack trackid, Int recarm, Boolean allowgang)",
      "eel": "bool CSurf_OnRecArmChangeEx(MediaTrack trackid, int recarm, bool allowgang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if set to armed; false, if not" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "recarm", "type": "integer" },
          { "identifier": "allowgang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnRecArmChangeEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "recording", "toggle", "on", "off"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Toggles recording on and off. Starts recording from edit-cursor-position.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_OnRecord",
    "functioncall": {
      "lua": "reaper.CSurf_OnRecord()",
      "cpp": "void CSurf_OnRecord()",
      "python": "RPR_CSurf_OnRecord()",
      "eel": "CSurf_OnRecord()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_OnRecord", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "routing", "receive", "pan", "set", "alter", "relative"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters a pan-value for a received-track. Will also change pan in the accompanying send-track!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack-object whose receive-pan you want to change"
        },
        {
          "identifier": "integer recv_index",
          "description": "the receive to be changed. 0 for the first receive, 1 for the second, etc"
        },
        {
          "identifier": "number pan",
          "description": "the new pan value; -1, full left; 1, full right; 0, center"
        },
        {
          "identifier": "boolean relative",
          "description": "false, set pan to new value; true, alter pan by new value"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRecvPanChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)",
      "cpp": "double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)",
      "python": "Float RPR_CSurf_OnRecvPanChange(MediaTrack trackid, Int recv_index, Float pan, Boolean relative)",
      "eel": "double CSurf_OnRecvPanChange(MediaTrack trackid, int recv_index, pan, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new receive-pan-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "recv_index", "type": "integer" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnRecvPanChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "routing", "receive", "volume", "set", "alter", "relative"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters the volume-value of a received track. Will also change volume in the accompanying send-track!\n\nNote: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here! Use [mkvolstr](#mkvolstr) instead.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack-object whose receive-pan you want to change"
        },
        {
          "identifier": "integer recv_index",
          "description": "the receive to be changed. 0 for the first receive, 1 for the second, etc"
        },
        {
          "identifier": "number volume",
          "description": "the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; higher values are possible, though fader will not reflect them. but higher values will still be applied.           "
        },
        {
          "identifier": "boolean relative",
          "description": "false, set volume to new value; true, alter volume by new value"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRecvVolumeChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)",
      "cpp": "double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)",
      "python": "Float RPR_CSurf_OnRecvVolumeChange(MediaTrack trackid, Int recv_index, Float volume, Boolean relative)",
      "eel": "double CSurf_OnRecvVolumeChange(MediaTrack trackid, int recv_index, volume, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new receive-volume-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "recv_index", "type": "integer" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnRecvVolumeChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "cursor", "backward", "jump", "seekplay"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves editcursor backward, and optionally with seekplay.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer seekplay",
          "description": "how to move the editcursor backward\n  0, move cursor backward in small steps. Stepsize depends on horizontal zoomfactor.\n  1, move cursor backward, in half-second steps when stopped; when playing, playing will restart at playcursor"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRew",
    "functioncall": {
      "lua": "reaper.CSurf_OnRew(integer seekplay)",
      "cpp": "void CSurf_OnRew(int seekplay)",
      "python": "RPR_CSurf_OnRew(Int seekplay)",
      "eel": "CSurf_OnRew(int seekplay)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "seekplay", "type": "integer" }],
        "method_name": "reaper.CSurf_OnRew",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "move", "editcursor", "seekplay", "forward", "backward"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Will move editcursor for or backward, depending on parameter dir.\nDuring play and whith seekplay set, the movement of the editcursor depends on the playcursor-position at the time of calling CSurf_OnRewFwd.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer seekplay",
          "description": "turns seekplay on or off; has no effect during recording\n  0, when stopped, jump for/backwards in small steps(stepsize depending on zoom-factor)\n  1, when stopped, jump for/backwards in 0.5 seconds steps. When play/rec"
        },
        {
          "identifier": "integer dir",
          "description": "the direction; -1, move backwards; 0, keep the position; 1, move forwards"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnRewFwd",
    "functioncall": {
      "lua": "reaper.CSurf_OnRewFwd(integer seekplay, integer dir)",
      "cpp": "void CSurf_OnRewFwd(int seekplay, int dir)",
      "python": "RPR_CSurf_OnRewFwd(Int seekplay, Int dir)",
      "eel": "CSurf_OnRewFwd(int seekplay, int dir)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "seekplay", "type": "integer" },
          { "identifier": "dir", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnRewFwd",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "scroll", "horizontal", "vertical", "relative"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Scroll arrangeview relative to it's current view-settings.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer xdir",
          "description": "scroll horizontally(timeline) through the project. \nNegative values toward the beginning, positive toward the end. The higher the values, the farther the movement."
        },
        {
          "identifier": "integer ydir",
          "description": "scroll vertically(tracks) through the project. \nNegative values toward the top, positive toward the bottom. The higher the values, the farther the movement."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnScroll",
    "functioncall": {
      "lua": "reaper.CSurf_OnScroll(integer xdir, integer ydir)",
      "cpp": "void CSurf_OnScroll(int xdir, int ydir)",
      "python": "RPR_CSurf_OnScroll(Int xdir, Int ydir)",
      "eel": "CSurf_OnScroll(int xdir, int ydir)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "xdir", "type": "integer" },
          { "identifier": "ydir", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnScroll",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "select", "deselect", "unselect", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets a track selected or not.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack to be selected/unselected"
        },
        {
          "identifier": "integer selected",
          "description": "select-state; 0, track is selected; 1, track is unselected"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnSelectedChange",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)",
      "cpp": "bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)",
      "python": "Boolean RPR_CSurf_OnSelectedChange(MediaTrack trackid, Int selected)",
      "eel": "bool CSurf_OnSelectedChange(MediaTrack trackid, int selected)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, track is selected; false, track is unselected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "selected", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnSelectedChange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "receive", "pan", "routing", "set", "alter", "relative"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters the pan-volume of a send-track. Will also change the volume of the accompanying receive-track!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrackObject, whose pan-value you want to change"
        },
        {
          "identifier": "integer send_index",
          "description": "the index-number of the send-track. 0 for the first, 2 for the second, etc"
        },
        {
          "identifier": "number pan",
          "description": "the pan value; -1 for hard left; 1 for hard right; 0 for center"
        },
        {
          "identifier": "boolean relative",
          "description": "false, set pan to new value; true, alter pan by new value"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnSendPanChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)",
      "cpp": "double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)",
      "python": "Float RPR_CSurf_OnSendPanChange(MediaTrack trackid, Int send_index, Float pan, Boolean relative)",
      "eel": "double CSurf_OnSendPanChange(MediaTrack trackid, int send_index, pan, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new pan-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "send_index", "type": "integer" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnSendPanChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "routing", "receive", "volume", "set", "alter", "relative"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters the volume-value of a send-track. Will also alter the volume of the accompanying receive-track.\n\nNote: You can't(!) use SLIDER2DB or DB2SLIDER for getting the volume-values, you want to set here!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrackObject, whose volume-value you want to change"
        },
        {
          "identifier": "integer send_index",
          "description": "the index-number of the send-track. 0 for the first, 2 for the second, etc"
        },
        {
          "identifier": "number volume",
          "description": "the volume-level of the receive; 0, -inf; 1, 0dB; 4, ca +12 db; \nhigher values are possible, though fader will not reflect them. but higher values will still be applied."
        },
        {
          "identifier": "boolean relative",
          "description": "false, set volume to new value; true, alter volume by new value"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnSendVolumeChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)",
      "cpp": "double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)",
      "python": "Float RPR_CSurf_OnSendVolumeChange(MediaTrack trackid, Int send_index, Float volume, Boolean relative)",
      "eel": "double CSurf_OnSendVolumeChange(MediaTrack trackid, int send_index, volume, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new volume-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "send_index", "type": "integer" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnSendVolumeChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "solo", "toggle", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/toggles solo state of a track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to toggle solo state"
        },
        {
          "identifier": "integer solo",
          "description": "solo state. \n   0, solo off\n   1 and higher, solo on\n  -1 and lower, toggle solo on/off"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnSoloChange",
    "functioncall": {
      "lua": "boolean = reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)",
      "cpp": "bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)",
      "python": "Boolean RPR_CSurf_OnSoloChange(MediaTrack trackid, Int solo)",
      "eel": "bool CSurf_OnSoloChange(MediaTrack trackid, int solo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, solo has been turned on; false, solo has been turned off"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "solo", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnSoloChange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "solo", "toggle", "set", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/toggles solo state of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack in which to toggle solo state"
        },
        {
          "identifier": "integer solo",
          "description": "solo state. \n  0, solo off\n  1 and higher, solo on\n -1 and lower, toggle solo on/off"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnSoloChangeEx",
    "functioncall": {
      "lua": "boolean retval = reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)",
      "cpp": "bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)",
      "python": "Boolean RPR_CSurf_OnSoloChangeEx(MediaTrack trackid, Int solo, Boolean allowgang)",
      "eel": "bool CSurf_OnSoloChangeEx(MediaTrack trackid, int solo, bool allowgang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, solo has been turned on; false, solo has been turned off"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "solo", "type": "integer" },
          { "identifier": "allowgang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnSoloChangeEx",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "stop", "recording", "play", "pause"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Stops playing/recording in current project.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_OnStop",
    "functioncall": {
      "lua": "reaper.CSurf_OnStop()",
      "cpp": "void CSurf_OnStop()",
      "python": "RPR_CSurf_OnStop()",
      "eel": "CSurf_OnStop()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.CSurf_OnStop", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "tempo", "bpm", "beats per minute"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the tempo of the project in beats per minute.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number bpm", "description": "the beats per minute value; 1 to 1000" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnTempoChange",
    "functioncall": {
      "lua": "reaper.CSurf_OnTempoChange(number bpm)",
      "cpp": "void CSurf_OnTempoChange(double bpm)",
      "python": "RPR_CSurf_OnTempoChange(Float bpm)",
      "eel": "CSurf_OnTempoChange(bpm)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "bpm", "type": "number" }],
        "method_name": "reaper.CSurf_OnTempoChange",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack trackid", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnTrackSelection",
    "functioncall": {
      "lua": "reaper.CSurf_OnTrackSelection(MediaTrack trackid)",
      "cpp": "void CSurf_OnTrackSelection(MediaTrack* trackid)",
      "python": "RPR_CSurf_OnTrackSelection(MediaTrack trackid)",
      "eel": "CSurf_OnTrackSelection(MediaTrack trackid)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "trackid", "type": "MediaTrack" }],
        "method_name": "reaper.CSurf_OnTrackSelection",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "volume", "set", "alter", "relative", "value"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets or alters volume of a track to a new value.\n\nUse [DB2SLIDER](#DB2SLIDER) to convert dB-value to fitting numbers of the volume-parameter.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack, whose volume you want to change."
        },
        {
          "identifier": "number volume",
          "description": "volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range."
        },
        {
          "identifier": "boolean relative",
          "description": "false, set volume to new value; true, alter volume by new value"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnVolumeChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)",
      "cpp": "double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)",
      "python": "Float RPR_CSurf_OnVolumeChange(MediaTrack trackid, Float volume, Boolean relative)",
      "eel": "double CSurf_OnVolumeChange(MediaTrack trackid, volume, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new volume-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnVolumeChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "volume", "set", "alter", "relative", "value", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets or alters volume of a track to a new value. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.\n\nUse [DB2SLIDER](#DB2SLIDER) to convert dB-value to fitting numbers of the volume-parameter.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaTrack, whose volume you want to change."
        },
        {
          "identifier": "number volume",
          "description": "volume-value; 3.1622776601684e-008(minimum) to 3.981071705535(maximum). Higher values are possible to set but are out of fader-range."
        },
        {
          "identifier": "boolean relative",
          "description": "false, set volume to new value; true, alter volume by new value"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnVolumeChangeEx",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)",
      "cpp": "double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)",
      "python": "Float RPR_CSurf_OnVolumeChangeEx(MediaTrack trackid, Float volume, Boolean relative, Boolean allowGang)",
      "eel": "double CSurf_OnVolumeChangeEx(MediaTrack trackid, volume, bool relative, bool allowGang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new volume-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "relative", "type": "boolean" },
          { "identifier": "allowGang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnVolumeChangeEx",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "width", "set", "alter"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters the width-value of a track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaItem, whose width you want to change"
        },
        {
          "identifier": "number width",
          "description": "the width-value; -1 to 1; 0 is no width/mono"
        },
        {
          "identifier": "boolean relative",
          "description": "false, set width to the new width-value; true, alter width by the new width-value"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnWidthChange",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)",
      "cpp": "double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)",
      "python": "Float RPR_CSurf_OnWidthChange(MediaTrack trackid, Float width, Boolean relative)",
      "eel": "double CSurf_OnWidthChange(MediaTrack trackid, width, bool relative)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new width-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "width", "type": "number" },
          { "identifier": "relative", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnWidthChange",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "width", "set", "alter", "allowgang"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters the width-value of a track. If MediaTrack is selected, among others, and allowgang is set to true, the new state will be set to them as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack trackid",
          "description": "the MediaItem, whose width you want to change"
        },
        {
          "identifier": "number width",
          "description": "the width-value; -1 to 1; 0 is no width/mono"
        },
        {
          "identifier": "boolean relative",
          "description": "false, set width to the new width-value; true, alter width by the new width-value"
        },
        {
          "identifier": "boolean allowgang",
          "description": "true, if trackid is selected with other tracks, set new state to them as well; false, set new state only to trackid "
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnWidthChangeEx",
    "functioncall": {
      "lua": "number = reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)",
      "cpp": "double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)",
      "python": "Float RPR_CSurf_OnWidthChangeEx(MediaTrack trackid, Float width, Boolean relative, Boolean allowGang)",
      "eel": "double CSurf_OnWidthChangeEx(MediaTrack trackid, width, bool relative, bool allowGang)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the new width-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "width", "type": "number" },
          { "identifier": "relative", "type": "boolean" },
          { "identifier": "allowGang", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_OnWidthChangeEx",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "zoom", "vertical", "horizontal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Changes horizontal/vertical zoom.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer xdir",
          "description": "horizontal zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize."
        },
        {
          "identifier": "integer ydir",
          "description": "vertical zoom; 0, no change; negative values, zoom out; positive values, zoom in; the higher the values, the bigger the zoom-stepsize."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnZoom",
    "functioncall": {
      "lua": "reaper.CSurf_OnZoom(integer xdir, integer ydir)",
      "cpp": "void CSurf_OnZoom(int xdir, int ydir)",
      "python": "RPR_CSurf_OnZoom(Int xdir, Int ydir)",
      "eel": "CSurf_OnZoom(int xdir, int ydir)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "xdir", "type": "integer" },
          { "identifier": "ydir", "type": "integer" }
        ],
        "method_name": "reaper.CSurf_OnZoom",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "reset", "vol", "pan", "state", "cache"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Resets all cached vol-pan-states.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_ResetAllCachedVolPanStates",
    "functioncall": {
      "lua": "reaper.CSurf_ResetAllCachedVolPanStates()",
      "cpp": "void CSurf_ResetAllCachedVolPanStates()",
      "python": "RPR_CSurf_ResetAllCachedVolPanStates()",
      "eel": "CSurf_ResetAllCachedVolPanStates()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.CSurf_ResetAllCachedVolPanStates",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "playcursor", "editcursor", "move"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Changes position of the editcursor by amt-value in seconds. When playing, the playposition changes to the editcursor-position.\nDuring recording, it changes only the position of the editcursor.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number amt",
          "description": "how far to change position of the editcursor in seconds. Positive values toward the end, negative toward the beginning of the project."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CSurf_ScrubAmt",
    "functioncall": {
      "lua": "reaper.CSurf_ScrubAmt(number amt)",
      "cpp": "void CSurf_ScrubAmt(double amt)",
      "python": "RPR_CSurf_ScrubAmt(Float amt)",
      "eel": "CSurf_ScrubAmt(amt)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "amt", "type": "number" }],
        "method_name": "reaper.CSurf_ScrubAmt",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer mode", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetAutoMode",
    "functioncall": {
      "lua": "reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetAutoMode(Int mode, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetAutoMode(int mode, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mode", "type": "integer" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetAutoMode",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean play", "description": "" },
        { "identifier": "boolean pause", "description": "" },
        { "identifier": "boolean rec", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetPlayState",
    "functioncall": {
      "lua": "reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetPlayState(Boolean play, Boolean pause, Boolean rec, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "play", "type": "boolean" },
          { "identifier": "pause", "type": "boolean" },
          { "identifier": "rec", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetPlayState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean rep", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetRepeatState",
    "functioncall": {
      "lua": "reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetRepeatState(Boolean rep, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetRepeatState(bool rep, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "rep", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetRepeatState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "integer mute", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfaceMute",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfaceMute(MediaTrack trackid, Boolean mute, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfaceMute(MediaTrack trackid, bool mute, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "mute", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfaceMute",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "number pan", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfacePan",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfacePan(MediaTrack trackid, Float pan, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfacePan(MediaTrack trackid, pan, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfacePan",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "boolean recarm", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfaceRecArm",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfaceRecArm(MediaTrack trackid, Boolean recarm, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfaceRecArm(MediaTrack trackid, bool recarm, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "recarm", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfaceRecArm",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "boolean selected", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfaceSelected",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfaceSelected(MediaTrack trackid, Boolean selected, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfaceSelected(MediaTrack trackid, bool selected, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfaceSelected",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "boolean solo", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfaceSolo",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfaceSolo(MediaTrack trackid, Boolean solo, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfaceSolo(MediaTrack trackid, bool solo, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "solo", "type": "boolean" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfaceSolo",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack trackid", "description": "" },
        { "identifier": "number volume", "description": "" },
        { "identifier": "IReaperControlSurface ignoresurf", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CSurf_SetSurfaceVolume",
    "functioncall": {
      "lua": "reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)",
      "cpp": "void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)",
      "python": "RPR_CSurf_SetSurfaceVolume(MediaTrack trackid, Float volume, IReaperControlSurface ignoresurf)",
      "eel": "CSurf_SetSurfaceVolume(MediaTrack trackid, volume, IReaperControlSurface ignoresurf)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "trackid", "type": "MediaTrack" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "ignoresurf", "type": "IReaperControlSurface" }
        ],
        "method_name": "reaper.CSurf_SetSurfaceVolume",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CSurf_SetTrackListChange",
    "functioncall": {
      "lua": "reaper.CSurf_SetTrackListChange()",
      "cpp": "void CSurf_SetTrackListChange()",
      "python": "RPR_CSurf_SetTrackListChange()",
      "eel": "CSurf_SetTrackListChange()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.CSurf_SetTrackListChange",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "id", "tracknumber", "mediatrack", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets a MediaTrack-object by it's number.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the tracknumber of the track you want to have; 0 for track 1, 1 for track 2, etc."
        },
        {
          "identifier": "boolean mcpView",
          "description": "true, count only tracks, that are visible in MixerControlPanel"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_TrackFromID",
    "functioncall": {
      "lua": "MediaTrack = reaper.CSurf_TrackFromID(integer idx, boolean mcpView)",
      "cpp": "MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)",
      "python": "MediaTrack RPR_CSurf_TrackFromID(Int idx, Boolean mcpView)",
      "eel": "MediaTrack CSurf_TrackFromID(int idx, bool mcpView)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack",
          "description": "the MediaTrack-object of the track you requested"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "idx", "type": "integer" },
          { "identifier": "mcpView", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_TrackFromID",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "id", "tracknumber", "mediatrack", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the tracknumber of a MediaTrack-object.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the MediaTrack-object, whose number you want to know"
        },
        {
          "identifier": "boolean mcpView",
          "description": "true, only tracks visible in MixerControlPanel; false, all tracks visible in MixerControlPanel"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_TrackToID",
    "functioncall": {
      "lua": "integer = reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)",
      "cpp": "int CSurf_TrackToID(MediaTrack* track, bool mcpView)",
      "python": "Int RPR_CSurf_TrackToID(MediaTrack track, Boolean mcpView)",
      "eel": "int CSurf_TrackToID(MediaTrack track, bool mcpView)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the tracknumber of the MediaTrack; when mcpView is true, invisible tracks will return -1 as number"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "mcpView", "type": "boolean" }
        ],
        "method_name": "reaper.CSurf_TrackToID",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "db", "slider", "converter", "value"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts dB-value into a slider-value. Good for converting envelope-point-values.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number x",
          "description": "the dB-value to be converted. Minimum -332db for position 0"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DB2SLIDER",
    "functioncall": {
      "lua": "number = reaper.DB2SLIDER(number x)",
      "cpp": "double DB2SLIDER(double x)",
      "python": "Float RPR_DB2SLIDER(Float x)",
      "eel": "double DB2SLIDER(x)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the slider-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "x", "type": "number" }],
        "method_name": "reaper.DB2SLIDER",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "envelopepoints", "delete", "range"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee [CountEnvelopePointsEx](#CountEnvelopePointsEx), [GetEnvelopePointEx](#GetEnvelopePointEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope envelope",
          "description": "the envelope, in which the point lies, that you want to delete"
        },
        {
          "identifier": "integer autoitem_idx",
          "description": "-1, the underlying envelope; \n0 to x, the 1st to x-1th automation-item\n|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations."
        },
        { "identifier": "integer ptidx", "description": "the envelope-point to delete" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DeleteEnvelopePointEx",
    "functioncall": {
      "lua": "boolean reaper.DeleteEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)",
      "cpp": "bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)",
      "python": "Boolean RPR_DeleteEnvelopePointEx(TrackEnvelope envelope, Int autoitem_idx, Int ptidx)",
      "eel": "bool DeleteEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, deleting was successful; false, deleting was unsuccessful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "ptidx", "type": "integer" }
        ],
        "method_name": "reaper.DeleteEnvelopePointEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "envelopepoints", "delete", "range"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a range of envelope points. \n\nSee [DeleteEnvelopePointRangeEx](#DeleteEnvelopePointRangeEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope envelope",
          "description": "the envelope-point-object, in which to delete the envelope-points"
        },
        {
          "identifier": "number time_start",
          "description": "the starttime of the deletionrange in seconds"
        },
        {
          "identifier": "number time_end",
          "description": "the endtime of the deletionrange in seconds"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DeleteEnvelopePointRange",
    "functioncall": {
      "lua": "boolean = reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)",
      "cpp": "bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)",
      "python": "Boolean RPR_DeleteEnvelopePointRange(TrackEnvelope envelope, Float time_start, Float time_end)",
      "eel": "bool DeleteEnvelopePointRange(TrackEnvelope envelope, time_start, time_end)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "true, if it succeeded" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "time_start", "type": "number" },
          { "identifier": "time_end", "type": "number" }
        ],
        "method_name": "reaper.DeleteEnvelopePointRange",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "envelopepoints", "delete", "range", "automation item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope envelope",
          "description": "the envelope-point-object, in which to delete the envelope-points"
        },
        {
          "identifier": "integer autoitem_idx",
          "description": "the automation item to be affected by deletion; -1, for the underlying envelope itself; 0, for the first automation item on the envelope; 1 for the second, etc"
        },
        {
          "identifier": "number time_start",
          "description": "the starttime of the deletionrange in seconds"
        },
        {
          "identifier": "number time_end",
          "description": "the endtime of the deletionrange in seconds"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "DeleteEnvelopePointRangeEx",
    "functioncall": {
      "lua": "boolean = reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)",
      "cpp": "bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)",
      "python": "Boolean RPR_DeleteEnvelopePointRangeEx(TrackEnvelope envelope, Int autoitem_idx, Float time_start, Float time_end)",
      "eel": "bool DeleteEnvelopePointRangeEx(TrackEnvelope envelope, int autoitem_idx, time_start, time_end)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if deleting was successful; false, if not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "time_start", "type": "number" },
          { "identifier": "time_end", "type": "number" }
        ],
        "method_name": "reaper.DeleteEnvelopePointRangeEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Extended States"],
    "tags": ["extendedstates", "state", "value", "delete", "section", "key"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. If persistent, the value will be deleted from the file reaper-extstate.ini in the ressources-folder.\nSee [SetExtState](#SetExtState), [GetExtState](#GetExtState), [HasExtState](#HasExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string section",
          "description": "the section, in which the value is stored"
        },
        { "identifier": "string key", "description": "the key, with which the value is stored" },
        {
          "identifier": "boolean persist",
          "description": "true, the value shall be deleted permanently; false, delete it only temporarily."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DeleteExtState",
    "functioncall": {
      "lua": "reaper.DeleteExtState(string section, string key, boolean persist)",
      "cpp": "void DeleteExtState(const char* section, const char* key, bool persist)",
      "python": "RPR_DeleteExtState(String section, String key, Boolean persist)",
      "eel": "DeleteExtState(\"section\", \"key\", bool persist)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "key", "type": "string" },
          { "identifier": "persist", "type": "boolean" }
        ],
        "method_name": "reaper.DeleteExtState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "delete", "marker", "regions", "shown number"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deletes a marker or a region. proj==NULL for the active project.\n\nDoes not delete tempo/timesignature markers!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer markrgnindexnumber",
          "description": "the shown number of the marker to be deleted"
        },
        {
          "identifier": "boolean isrgn",
          "description": "true, marker is a region; false, marker is a normal marker"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "DeleteProjectMarker",
    "functioncall": {
      "lua": "boolean = reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)",
      "cpp": "bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)",
      "python": "Boolean RPR_DeleteProjectMarker(ReaProject proj, Int markrgnindexnumber, Boolean isrgn)",
      "eel": "bool DeleteProjectMarker(ReaProject proj, int markrgnindexnumber, bool isrgn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, deleting was successful; false, deleting was unsuccessful."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" }
        ],
        "method_name": "reaper.DeleteProjectMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "delete", "marker", "regions", "shown number"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region in the project, 1 for the next, etc, rather than representing the displayed marker/region ID number.\nSee [EnumProjectMarkers3](#EnumProjectMarkers3)) and [SetProjectMarker4](#SetProjectMarker4).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer markrgnidx",
          "description": "the id of the marker within the project, 0 for the first, 1 for the second, etc. Ignores the shown marker-index!"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "DeleteProjectMarkerByIndex",
    "functioncall": {
      "lua": "boolean = reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)",
      "cpp": "bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)",
      "python": "Boolean RPR_DeleteProjectMarkerByIndex(ReaProject proj, Int markrgnidx)",
      "eel": "bool DeleteProjectMarkerByIndex(ReaProject proj, int markrgnidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, deleting was successful; false, deleting was unsuccessful."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnidx", "type": "integer" }
        ],
        "method_name": "reaper.DeleteProjectMarkerByIndex",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.09" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "delete", "takemarker"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a take marker. Note that idx will change for all following take markers. \nSee [GetNumTakeMarkers](#GetNumTakeMarkers)), [GetTakeMarker](#GetTakeMarker) and [SetTakeMarker](#SetTakeMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the take, whose take-marker you want to delete"
        },
        {
          "identifier": "integer idx",
          "description": "the id of the marker within the take, 0 for the first, 1 for the second, etc."
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "DeleteTakeMarker",
    "functioncall": {
      "lua": "boolean retval = reaper.DeleteTakeMarker(MediaItem_Take take, integer idx)",
      "cpp": "bool retval = DeleteTakeMarker(MediaItem_Take* take, int idx)",
      "python": "Boolean retval = RPR_DeleteTakeMarker(MediaItem_Take take, Int idx)",
      "eel": "bool retval = DeleteTakeMarker(MediaItem_Take take, int idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, deleting was successful; false, deleting was unsuccessful."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.DeleteTakeMarker",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer idx", "description": "" },
        { "identifier": "optional number countIn", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DeleteTakeStretchMarkers",
    "functioncall": {
      "lua": "integer = reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional number countIn)",
      "cpp": "int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)",
      "python": "Int RPR_DeleteTakeStretchMarkers(MediaItem_Take take, Int idx, const int countInOptional)",
      "eel": "int DeleteTakeStretchMarkers(MediaItem_Take take, int idx, optional int countIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.DeleteTakeStretchMarkers",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Delete a tempo/time signature marker. \n\nSee [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "integer markerindex", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "DeleteTempoTimeSigMarker",
    "functioncall": {
      "lua": "boolean = reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)",
      "cpp": "bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)",
      "python": "Boolean RPR_DeleteTempoTimeSigMarker(ReaProject project, Int markerindex)",
      "eel": "bool DeleteTempoTimeSigMarker(ReaProject project, int markerindex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "markerindex", "type": "integer" }
        ],
        "method_name": "reaper.DeleteTempoTimeSigMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "delete", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deletes a track",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack tr", "description": "the MediaTrack to be deleted" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DeleteTrack",
    "functioncall": {
      "lua": "reaper.DeleteTrack(MediaTrack tr)",
      "cpp": "void DeleteTrack(MediaTrack* tr)",
      "python": "RPR_DeleteTrack(MediaTrack tr)",
      "eel": "DeleteTrack(MediaTrack tr)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tr", "type": "MediaTrack" }],
        "method_name": "reaper.DeleteTrack",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "delete"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deletes a MediaItem.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack tr",
          "description": "the MediaTrack, in which the MediaItem lies, that you want to delete"
        },
        { "identifier": "MediaItem it", "description": "the MediaItem-object you want to delete" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "DeleteTrackMediaItem",
    "functioncall": {
      "lua": "boolean = reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)",
      "cpp": "bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)",
      "python": "Boolean RPR_DeleteTrackMediaItem(MediaTrack tr, MediaItem it)",
      "eel": "bool DeleteTrackMediaItem(MediaTrack tr, MediaItem it)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, deleting was successful; false, deleting was unsuccessful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "it", "type": "MediaItem" }
        ],
        "method_name": "reaper.DeleteTrackMediaItem",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": ["audiomanagement", "audio", "accessor", "destroy"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Destroy an audio accessor. Must only call from the main thread. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples). ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "AudioAccessor accessor",
          "description": "the AudioAccessor to be destroyed"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DestroyAudioAccessor",
    "functioncall": {
      "lua": "reaper.DestroyAudioAccessor(AudioAccessor accessor)",
      "cpp": "void DestroyAudioAccessor(AudioAccessor* accessor)",
      "python": "RPR_DestroyAudioAccessor(AudioAccessor accessor)",
      "eel": "DestroyAudioAccessor(AudioAccessor accessor)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "accessor", "type": "AudioAccessor" }],
        "method_name": "reaper.DestroyAudioAccessor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "updates preference for docker window ident_str to be in dock whichDock on next open",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string ident_str", "description": "" },
        { "identifier": "integer whichDock", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Dock_UpdateDockID",
    "functioncall": {
      "lua": "reaper.Dock_UpdateDockID(string ident_str, integer whichDock)",
      "cpp": "void Dock_UpdateDockID(const char* ident_str, int whichDock)",
      "python": "RPR_Dock_UpdateDockID(String ident_str, Int whichDock)",
      "eel": "Dock_UpdateDockID(\"ident_str\", int whichDock)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "ident_str", "type": "string" },
          { "identifier": "whichDock", "type": "integer" }
        ],
        "method_name": "reaper.Dock_UpdateDockID",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.02" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns the position of docker whichDock",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer whichDock",
          "description": "the docker, whose position you want to get\n-1, not found\n0, bottom\n1, left\n2, top\n3, right\n4, floating"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DockGetPosition",
    "functioncall": {
      "lua": "integer reaper.DockGetPosition(integer whichDock)",
      "cpp": "int DockGetPosition(int whichDock)",
      "python": "Int RPR_DockGetPosition(Int whichDock)",
      "eel": "int DockGetPosition(int whichDock)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "whichDock", "type": "integer" }
        ],
        "method_name": "reaper.DockGetPosition",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns dock index that contains hwnd, or -1",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DockIsChildOfDock",
    "functioncall": {
      "lua": "integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)",
      "cpp": "int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)",
      "python": "(Int retval, HWND hwnd, Boolean isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)",
      "eel": "int DockIsChildOfDock(HWND hwnd, bool &amp;isFloatingDocker)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "boolean isFloatingDocker", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "HWND" }],
        "method_name": "reaper.DockIsChildOfDock",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "isFloatingDocker", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DockWindowActivate",
    "functioncall": {
      "lua": "reaper.DockWindowActivate(HWND hwnd)",
      "cpp": "void DockWindowActivate(HWND hwnd)",
      "python": "RPR_DockWindowActivate(HWND hwnd)",
      "eel": "DockWindowActivate(HWND hwnd)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "HWND" }],
        "method_name": "reaper.DockWindowActivate",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "HWND hwnd", "description": "" },
        { "identifier": "string name", "description": "" },
        { "identifier": "integer pos", "description": "" },
        { "identifier": "boolean allowShow", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "DockWindowAdd",
    "functioncall": {
      "lua": "reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)",
      "cpp": "void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)",
      "python": "RPR_DockWindowAdd(HWND hwnd, String name, Int pos, Boolean allowShow)",
      "eel": "DockWindowAdd(HWND hwnd, \"name\", int pos, bool allowShow)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "hwnd", "type": "HWND" },
          { "identifier": "name", "type": "string" },
          { "identifier": "pos", "type": "integer" },
          { "identifier": "allowShow", "type": "boolean" }
        ],
        "method_name": "reaper.DockWindowAdd",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "HWND hwnd", "description": "" },
        { "identifier": "string name", "description": "" },
        { "identifier": "string identstr", "description": "" },
        { "identifier": "boolean allowShow", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "DockWindowAddEx",
    "functioncall": {
      "lua": "reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)",
      "cpp": "void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)",
      "python": "RPR_DockWindowAddEx(HWND hwnd, String name, String identstr, Boolean allowShow)",
      "eel": "DockWindowAddEx(HWND hwnd, \"name\", \"identstr\", bool allowShow)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "hwnd", "type": "HWND" },
          { "identifier": "name", "type": "string" },
          { "identifier": "identstr", "type": "string" },
          { "identifier": "allowShow", "type": "boolean" }
        ],
        "method_name": "reaper.DockWindowAddEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "window", "refresh", "docking"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Refreshes docked windows.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "DockWindowRefresh",
    "functioncall": {
      "lua": "reaper.DockWindowRefresh()",
      "cpp": "void DockWindowRefresh()",
      "python": "RPR_DockWindowRefresh()",
      "eel": "DockWindowRefresh()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.DockWindowRefresh", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DockWindowRefreshForHWND",
    "functioncall": {
      "lua": "reaper.DockWindowRefreshForHWND(HWND hwnd)",
      "cpp": "void DockWindowRefreshForHWND(HWND hwnd)",
      "python": "RPR_DockWindowRefreshForHWND(HWND hwnd)",
      "eel": "DockWindowRefreshForHWND(HWND hwnd)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "HWND" }],
        "method_name": "reaper.DockWindowRefreshForHWND",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DockWindowRemove",
    "functioncall": {
      "lua": "reaper.DockWindowRemove(HWND hwnd)",
      "cpp": "void DockWindowRemove(HWND hwnd)",
      "python": "RPR_DockWindowRemove(HWND hwnd)",
      "eel": "DockWindowRemove(HWND hwnd)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "HWND" }],
        "method_name": "reaper.DockWindowRemove",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Open the tempo/time signature marker editor dialog.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "integer markerindex", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "EditTempoTimeSigMarker",
    "functioncall": {
      "lua": "boolean = reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)",
      "cpp": "bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)",
      "python": "Boolean RPR_EditTempoTimeSigMarker(ReaProject project, Int markerindex)",
      "eel": "bool EditTempoTimeSigMarker(ReaProject project, int markerindex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if user clicked OK button; false if user clicked cancel"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "markerindex", "type": "integer" }
        ],
        "method_name": "reaper.EditTempoTimeSigMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.978" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call with a saved window rect for your window and it'll correct any positioning info.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer r.left", "description": "" },
        { "identifier": "integer r.top", "description": "" },
        { "identifier": "integer r.right", "description": "" },
        { "identifier": "integer r.bot", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "EnsureNotCompletelyOffscreen",
    "functioncall": {
      "lua": "integer r.left, integer r.top, integer r.right, integer r.bot = reaper.EnsureNotCompletelyOffscreen(integer r.left, integer r.top, integer r.right, integer r.bot)",
      "cpp": "void EnsureNotCompletelyOffscreen(RECT* rInOut)",
      "python": "RPR_EnsureNotCompletelyOffscreen(RECT rInOut)",
      "eel": "EnsureNotCompletelyOffscreen(int &amp;r.left, int &amp;r.top, int &amp;r.right, int &amp;r.bot)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer r.left", "description": "" },
        { "identifier": "integer r.top", "description": "" },
        { "identifier": "integer r.right", "description": "" },
        { "identifier": "integer r.bot", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" }
        ],
        "method_name": "r.left",
        "return_values": [
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "r", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "enumerate", "files", "path", "fileindex", "folder"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "List the files in the \"path\" directory. Returns NULL (or empty string, in Lua) when all files have been listed. See [EnumerateSubdirectories](#EnumerateSubdirectories)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string path",
          "description": "the path, where the filenames will be read from"
        },
        {
          "identifier": "integer fileindex",
          "description": "the number of the file, with 0 the first file. Ordered by first letter in ascending order."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "EnumerateFiles",
    "functioncall": {
      "lua": "string = reaper.EnumerateFiles(string path, integer fileindex)",
      "cpp": "const char* EnumerateFiles(const char* path, int fileindex)",
      "python": "String RPR_EnumerateFiles(String path, Int fileindex)",
      "eel": "bool EnumerateFiles(#retval, \"path\", int fileindex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the filename in path, with index fileindex" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "path", "type": "string" },
          { "identifier": "fileindex", "type": "integer" }
        ],
        "method_name": "reaper.EnumerateFiles",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "enumerate", "directory", "folder", "path", "directoryindex"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "List the subdirectories in the \"path\" directory. Returns NULL (or empty string, in Lua) when all subdirectories have been listed. See [EnumerateFiles](#EnumerateFiles)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string path",
          "description": "the path, where the directorynames will be read from"
        },
        {
          "identifier": "integer subdirindex",
          "description": "the number of the directory, with 0 the first directory. Ordered by first letter in ascending order."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "EnumerateSubdirectories",
    "functioncall": {
      "lua": "string = reaper.EnumerateSubdirectories(string path, integer subdirindex)",
      "cpp": "const char* EnumerateSubdirectories(const char* path, int subdirindex)",
      "python": "String RPR_EnumerateSubdirectories(String path, Int subdirindex)",
      "eel": "bool EnumerateSubdirectories(#retval, \"path\", int subdirindex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the filename in path, with index fileindex" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "path", "type": "string" },
          { "identifier": "subdirindex", "type": "integer" }
        ],
        "method_name": "reaper.EnumerateSubdirectories",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Pitchshifting"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer mode", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "EnumPitchShiftModes",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)",
      "cpp": "bool EnumPitchShiftModes(int mode, const char** strOut)",
      "python": "Boolean RPR_EnumPitchShiftModes(Int mode, String strOut)",
      "eel": "bool EnumPitchShiftModes(int mode, #str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "mode", "type": "integer" }],
        "method_name": "reaper.EnumPitchShiftModes",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Pitchshifting"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns submode name, or NULL",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer mode", "description": "" },
        { "identifier": "integer submode", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "EnumPitchShiftSubModes",
    "functioncall": {
      "lua": "string = reaper.EnumPitchShiftSubModes(integer mode, integer submode)",
      "cpp": "const char* EnumPitchShiftSubModes(int mode, int submode)",
      "python": "String RPR_EnumPitchShiftSubModes(Int mode, Int submode)",
      "eel": "bool EnumPitchShiftSubModes(#retval, int mode, int submode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mode", "type": "integer" },
          { "identifier": "submode", "type": "integer" }
        ],
        "method_name": "reaper.EnumPitchShiftSubModes",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "enum", "project", "markers", "region"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the values of a given marker or region idx.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the number of the marker, beginning with 0 for the first marker"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "EnumProjectMarkers",
    "functioncall": {
      "lua": "integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)",
      "cpp": "int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)",
      "python": "(Int retval, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)",
      "eel": "int EnumProjectMarkers(int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "number of marker beginning with 1 for the first marker\nignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, \nit will be the last one, NOT the first one in the retval!"
        },
        { "identifier": "boolean isgrn", "description": "is the marker a region?" },
        {
          "identifier": "number pos",
          "description": "the time-position in seconds with 12 digits precision (1.123456789012)"
        },
        {
          "identifier": "number rgnend",
          "description": "if it's a region, the position of the end of the region in seconds with 12 digits precision(123.123456789012); \nif it's just a marker it's 0.0"
        },
        { "identifier": "string name", "description": "name of the marker" },
        {
          "identifier": "integer markrgnindexnumber",
          "description": "marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "idx", "type": "integer" }],
        "method_name": "reaper.EnumProjectMarkers",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "markrgnindexnumber", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "enum", "project", "markers", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the values of a given marker or region idx from a given project proj.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "Projectnumber. 0, current project; \n1 to x the first(1) to the last project(x) (in tabs for example); \ncan also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer idx",
          "description": "the number of the marker, beginning with 0 for the first marker"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "EnumProjectMarkers2",
    "functioncall": {
      "lua": "integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)",
      "cpp": "int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)",
      "python": "(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)",
      "eel": "int EnumProjectMarkers2(ReaProject proj, int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "number of marker beginning with 1 for the first marker\nignore the order of first,second,etc creation of markers but counts from position 00:00:00 to end of project. \nSo if you created a marker at position 00:00:00 and move the first created marker to the end of the timeline, it will be the last one, NOT the first one in the retval!"
        },
        { "identifier": "boolean isgrn", "description": "is the marker a region?" },
        {
          "identifier": "number pos",
          "description": "the time-position in seconds with 12 digits precision (1.123456789012)"
        },
        {
          "identifier": "number rgnend",
          "description": "if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0"
        },
        { "identifier": "string name", "description": "name of the marker" },
        {
          "identifier": "integer markrgnindexnumber",
          "description": "marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.EnumProjectMarkers2",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "markrgnindexnumber", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "enum", "project", "markers", "project", "color"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the values of a given marker or region idx from a given project proj.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "Projectnumber. 0, current project; 1 to x the first(1) to the last project(x) (in tabs for example); can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer idx",
          "description": "the number of the marker, beginning with 0 for the first marker"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "EnumProjectMarkers3",
    "functioncall": {
      "lua": "integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)",
      "cpp": "int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)",
      "python": "(Int retval, ReaProject proj, Int idx, Boolean isrgnOut, Float posOut, Float rgnendOut, String nameOut, Int markrgnindexnumberOut, Int colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)",
      "eel": "int EnumProjectMarkers3(ReaProject proj, int idx, bool &amp;isrgn, &amp;pos, &amp;rgnend, #name, int &amp;markrgnindexnumber, int &amp;color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "number of marker beginning with 1 for the first marker; \nignore the order of first,second,etc creation of markers but counts from \nposition 00:00:00 to end of project. \nSo if you created a marker at position 00:00:00 and move the first created marker \nto the end of the timeline, it will be the last one, NOT the first one in the retval!"
        },
        { "identifier": "boolean isgrn", "description": "is the marker a region?" },
        {
          "identifier": "number pos",
          "description": "the time-position in seconds with 12 digits precision (1.123456789012)"
        },
        {
          "identifier": "number rgnend",
          "description": "if it's a region, the end of the region in seconds with 12 digits precision(123.123456789012); if just marker it's 0.0"
        },
        { "identifier": "string name", "description": "name of the marker" },
        {
          "identifier": "integer markrgnindexnumber",
          "description": "marker/region index number. \nNote: the numbering of markers and regions is independent. If you have one region and one marker, \nboth share the number 1, even though you have 2 in your project(one marker and one region)."
        },
        { "identifier": "integer color", "description": "number of color of the marker/region" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.EnumProjectMarkers3",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "color", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.982" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "enumerate", "projects", "filename"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get ReaProject-object and filename of a project.\nidx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\nIf you need the path to the recording-folder, use [GetProjectPath](#GetProjectPath) instead.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "-1 for current project; 0 and higher for the projects; 0x40000000 for currently rendering project, if any."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "EnumProjects",
    "functioncall": {
      "lua": "ReaProject retval, optional string projfn = reaper.EnumProjects(integer idx)",
      "cpp": "ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)",
      "python": "(ReaProject retval, Int idx, String projfnOutOptional, Int projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)",
      "eel": "ReaProject EnumProjects(int idx, optional #projfn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject retval",
          "description": "a ReaProject-object of the project you requested"
        },
        {
          "identifier": "optional string projfn",
          "description": "the path+filename.rpp of the project. returns nil if no filename exists"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "idx", "type": "integer" }],
        "method_name": "reaper.EnumProjects",
        "return_values": [
          { "identifier": "retval", "type": "ReaProject" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [
      "projectmanagement",
      "extended",
      "state",
      "section",
      "extname",
      "value",
      "key",
      "enumerate",
      "enum"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See [SetProjExtState](#SetProjExtState), [GetProjExtState](#GetProjExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "string extname", "description": "the section of the extended-states" },
        {
          "identifier": "integer idx",
          "description": "the id of the entry within \"extname\"-section to be returned; 0 for the first, 1 for the second, etc."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "EnumProjExtState",
    "functioncall": {
      "lua": "boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)",
      "cpp": "bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)",
      "python": "(Boolean retval, ReaProject proj, String extname, Int idx, String keyOutOptional, Int keyOutOptional_sz, String valOutOptional, Int valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)",
      "eel": "bool EnumProjExtState(ReaProject proj, \"extname\", int idx, optional #key, optional #val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, key and value to this section exist; false, no such key and value exists"
        },
        { "identifier": "string key", "description": "the idx'th key in the section" },
        { "identifier": "string val", "description": "the accompanying value to key" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "extname", "type": "string" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.EnumProjExtState",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "integer regionindex", "description": "" },
        { "identifier": "integer rendertrack", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "EnumRegionRenderMatrix",
    "functioncall": {
      "lua": "MediaTrack = reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)",
      "cpp": "MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)",
      "python": "MediaTrack RPR_EnumRegionRenderMatrix(ReaProject proj, Int regionindex, Int rendertrack)",
      "eel": "MediaTrack EnumRegionRenderMatrix(ReaProject proj, int regionindex, int rendertrack)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "regionindex", "type": "integer" },
          { "identifier": "rendertrack", "type": "integer" }
        ],
        "method_name": "reaper.EnumRegionRenderMatrix",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer track", "description": "" },
        { "identifier": "string programNumber", "description": "" },
        { "identifier": "string programName", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "EnumTrackMIDIProgramNames",
    "functioncall": {
      "lua": "boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)",
      "cpp": "bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)",
      "python": "(Boolean retval, Int track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)",
      "eel": "bool EnumTrackMIDIProgramNames(int track, int programNumber, #programName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string programName", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "integer" },
          { "identifier": "programNumber", "type": "integer" },
          { "identifier": "programName", "type": "string" }
        ],
        "method_name": "reaper.EnumTrackMIDIProgramNames",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "programName", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer programNumber", "description": "" },
        { "identifier": "string programName", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "EnumTrackMIDIProgramNamesEx",
    "functioncall": {
      "lua": "boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)",
      "cpp": "bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)",
      "python": "(Boolean retval, ReaProject proj, MediaTrack track, Int programNumber, String programName, Int programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)",
      "eel": "bool EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, int programNumber, #programName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string programName", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "programNumber", "type": "integer" },
          { "identifier": "programName", "type": "string" }
        ],
        "method_name": "reaper.EnumTrackMIDIProgramNamesEx",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "programName", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.987" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the effective envelope value at a given time position. \n\nsamplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). \n\nThe return value is how many samples beyond that time position that the returned values are valid. \n\ndVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. \n\nSee [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "number time", "description": "" },
        { "identifier": "number samplerate", "description": "" },
        { "identifier": "integer samplesRequested", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "Envelope_Evaluate",
    "functioncall": {
      "lua": "integer retval, optional number value, optional number dVdS, optional number ddVdS, optional number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)",
      "cpp": "int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOutOptional, double* dVdSOutOptional, double* ddVdSOutOptional, double* dddVdSOutOptional)",
      "python": "(Int retval, TrackEnvelope envelope, Float time, Float samplerate, Int samplesRequested, Float valueOutOptional, Float dVdSOutOptional, Float ddVdSOutOptional, Float dddVdSOutOptional) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOutOptional, dVdSOutOptional, ddVdSOutOptional, dddVdSOutOptional)",
      "eel": "int Envelope_Evaluate(TrackEnvelope envelope, time, samplerate, int samplesRequested, optional &amp;value, optional &amp;dVdS, optional &amp;ddVdS, optional &amp;dddVdS)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "optional number value", "description": "" },
        {
          "identifier": "optional number dVdS",
          "description": "the change in value per sample (first derivative)"
        },
        { "identifier": "optional number ddVdS", "description": "the second derivative" },
        { "identifier": "optional number dddVdS", "description": "is the third derivative" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "time", "type": "number" },
          { "identifier": "samplerate", "type": "number" },
          { "identifier": "samplesRequested", "type": "integer" }
        ],
        "method_name": "reaper.Envelope_Evaluate",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Formats the value of an envelope to a user-readable form",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope env", "description": "" },
        { "identifier": "number value", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Envelope_FormatValue",
    "functioncall": {
      "lua": "string buf = reaper.Envelope_FormatValue(TrackEnvelope env, number value)",
      "cpp": "void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)",
      "python": "(TrackEnvelope env, Float value, String bufOut, Int bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)",
      "eel": "Envelope_FormatValue(TrackEnvelope env, value, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.Envelope_FormatValue",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "If take envelope, gets the take from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope env", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Envelope_GetParentTake",
    "functioncall": {
      "lua": "MediaItem_Take retval, optional number index, optional number index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)",
      "cpp": "MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)",
      "python": "(MediaItem_Take retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTake(env, indexOutOptional, index2OutOptional)",
      "eel": "MediaItem_Take Envelope_GetParentTake(TrackEnvelope env, optional int &amp;index, optional int &amp;index2)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take retval", "description": "" },
        { "identifier": "optional number index", "description": "" },
        { "identifier": "optional number index2", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "env", "type": "TrackEnvelope" }],
        "method_name": "reaper.Envelope_GetParentTake",
        "return_values": [
          { "identifier": "retval", "type": "MediaItem_Take" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "If track envelope, gets the track from the envelope. If FX, indexOutOptional set to FX index, index2OutOptional set to parameter index, otherwise -1.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope env", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Envelope_GetParentTrack",
    "functioncall": {
      "lua": "MediaTrack retval, optional number index, optional number index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)",
      "cpp": "MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)",
      "python": "(MediaTrack retval, TrackEnvelope env, Int indexOutOptional, Int index2OutOptional) = RPR_Envelope_GetParentTrack(env, indexOutOptional, index2OutOptional)",
      "eel": "MediaTrack Envelope_GetParentTrack(TrackEnvelope env, optional int &amp;index, optional int &amp;index2)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack retval", "description": "" },
        { "identifier": "optional number index", "description": "" },
        { "identifier": "optional number index2", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "env", "type": "TrackEnvelope" }],
        "method_name": "reaper.Envelope_GetParentTrack",
        "return_values": [
          { "identifier": "retval", "type": "MediaTrack" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sort envelope points by time. See [SetEnvelopePoint](#SetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope envelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Envelope_SortPoints",
    "functioncall": {
      "lua": "boolean = reaper.Envelope_SortPoints(TrackEnvelope envelope)",
      "cpp": "bool Envelope_SortPoints(TrackEnvelope* envelope)",
      "python": "Boolean RPR_Envelope_SortPoints(TrackEnvelope envelope)",
      "eel": "bool Envelope_SortPoints(TrackEnvelope envelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "TrackEnvelope" }],
        "method_name": "reaper.Envelope_SortPoints",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sort envelope points by time. autoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See [SetEnvelopePoint](#SetEnvelopePoint), [InsertEnvelopePoint](#InsertEnvelopePoint).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "integer autoitem_idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Envelope_SortPointsEx",
    "functioncall": {
      "lua": "boolean = reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)",
      "cpp": "bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)",
      "python": "Boolean RPR_Envelope_SortPointsEx(TrackEnvelope envelope, Int autoitem_idx)",
      "eel": "bool Envelope_SortPointsEx(TrackEnvelope envelope, int autoitem_idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" }
        ],
        "method_name": "reaper.Envelope_SortPointsEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "shell", "exec", "process", "command", "terminate"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command.             \n        \nCommands executed with ExecProcess() don't benefit from PATH-system-variables. That said, you must give the full path to a command, even if you can usually just type the command into a shell. You also may need to set a codepage manually to get the correct character-encoding. So in some cases, writing a batch-script and executing it with ExecProcess() might be a good idea.\n\nThe base-directory is Reaper's appdirectory.\n\nOn Windows, you can not use command-line-internal commands, like dir or cd, directly. To use them, you need to use cmd.exe. \nYou can do it like:\n\n-    \"$Path_to_Command_Exe\\\\cmd.exe /Q /C command\"\n\nwhere \"/Q\" executes cmd.exe silently(otherwise a command-line-window pops up; but output of commands will show anyway) and \"/C command\" executes command.\n\nTo get a full directory-listing of c:\\\\ in a file c:\\\\directorylisting.txt, you can use:\n-   \"c:\\\\windows\\\\system32\\\\cmd.exe /Q /C dir c:\\\\ >c:\\\\directorylisting.txt\"",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string cmdline", "description": "the command to execute " },
        {
          "identifier": "integer timeoutmsec",
          "description": "how long to wait, until termination of execution\npositive value, the time to wait for execution in milliseconds\n   0, command will be allowed to run indefinitely (recommended for large amounts of returned output).\n  -1, for no wait/terminate\n  -2, for no wait and minimize"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ExecProcess",
    "functioncall": {
      "lua": "string = reaper.ExecProcess(string cmdline, integer timeoutmsec)",
      "cpp": "const char* ExecProcess(const char* cmdline, int timeoutmsec)",
      "python": "String RPR_ExecProcess(String cmdline, Int timeoutmsec)",
      "eel": "bool ExecProcess(#retval, \"cmdline\", int timeoutmsec)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string",
          "description": "return value, newline and output of the command; otherwise nil"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "cmdline", "type": "string" },
          { "identifier": "timeoutmsec", "type": "integer" }
        ],
        "method_name": "reaper.ExecProcess",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "check", "file", "existing", "existence"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Checks, if a specified file exists and is readable.\n\nreturns true if path points to a valid, readable file",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string path", "description": "filename with path" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "file_exists",
    "functioncall": {
      "lua": "boolean = reaper.file_exists(string path)",
      "cpp": "bool file_exists(const char* path)",
      "python": "Boolean RPR_file_exists(String path)",
      "eel": "bool file_exists(\"path\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if file exists; false, if it doesn't" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "path", "type": "string" }],
        "method_name": "reaper.file_exists",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "number time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "FindTempoTimeSigMarker",
    "functioncall": {
      "lua": "integer = reaper.FindTempoTimeSigMarker(ReaProject project, number time)",
      "cpp": "int FindTempoTimeSigMarker(ReaProject* project, double time)",
      "python": "Int RPR_FindTempoTimeSigMarker(ReaProject project, Float time)",
      "eel": "int FindTempoTimeSigMarker(ReaProject project, time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.FindTempoTimeSigMarker",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "format", "timestring"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Creates a timestring and formats it as hh:mm:ss.sss. See [format\\_timestr_pos](#format_timestr_pos), [format\\_timestr_len](#format_timestr_len).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number tpos",
          "description": "the position in seconds, that you want to have formatted"
        },
        { "identifier": "string buf", "description": "needed by Reaper, just set it to \"\"" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "format_timestr",
    "functioncall": {
      "lua": "string buf = reaper.format_timestr(number tpos, string buf)",
      "cpp": "void format_timestr(double tpos, char* buf, int buf_sz)",
      "python": "(Float tpos, String buf, Int buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)",
      "eel": "format_timestr(tpos, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "the formatted timestring" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tpos", "type": "number" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.format_timestr",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number tpos", "description": "" },
        { "identifier": "string buf", "description": "" },
        { "identifier": "number offset", "description": "" },
        { "identifier": "integer modeoverride", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "format_timestr_len",
    "functioncall": {
      "lua": "string buf = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)",
      "cpp": "void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)",
      "python": "(Float tpos, String buf, Int buf_sz, Float offset, Int modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)",
      "eel": "format_timestr_len(tpos, #buf, offset, int modeoverride)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tpos", "type": "number" },
          { "identifier": "buf", "type": "string" },
          { "identifier": "offset", "type": "number" },
          { "identifier": "modeoverride", "type": "integer" }
        ],
        "method_name": "reaper.format_timestr_len",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "time formatting mode overrides: -1=proj default.\n    0=time\n    1=measures.beats + time\n    2=measures.beats\n    3=seconds\n    4=samples\n    5=h:m:s:f",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number tpos", "description": "" },
        { "identifier": "string buf", "description": "" },
        { "identifier": "integer modeoverride", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "format_timestr_pos",
    "functioncall": {
      "lua": "string buf = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)",
      "cpp": "void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)",
      "python": "(Float tpos, String buf, Int buf_sz, Int modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)",
      "eel": "format_timestr_pos(tpos, #buf, int modeoverride)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tpos", "type": "number" },
          { "identifier": "buf", "type": "string" },
          { "identifier": "modeoverride", "type": "integer" }
        ],
        "method_name": "reaper.format_timestr_pos",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "guid", "generate", "create"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Generates a GUID.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string gGUID", "description": "unknown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "genGuid",
    "functioncall": {
      "lua": "string gGUID = reaper.genGuid(string gGUID)",
      "cpp": "void genGuid(GUID* g)",
      "python": "RPR_genGuid(GUID g)",
      "eel": "genGuid(#gGUID)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string gGUID", "description": "the generated GUID" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "gGUID", "type": "string" }],
        "method_name": "reaper.genGuid",
        "return_values": [{ "identifier": "gGUID", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.972" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "configuration variable", "configvar", "string", "get"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "gets ini configuration variable value as string\n\nsee the [configuration-variable documentation](Reaper_Config_Variables.html) for more details",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string name", "description": "the config-var, whose value you want" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "get_config_var_string",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.get_config_var_string(string name)",
      "cpp": "bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)",
      "python": "(Boolean retval, String name, String bufOut, Int bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)",
      "eel": "bool get_config_var_string(\"name\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, the configuration-variable is a valid string variable"
        },
        {
          "identifier": "string buf",
          "description": "the current value of the configuration-variable"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "name", "type": "string" }],
        "method_name": "reaper.get_config_var_string",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "reaper.ini", "get", "path"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get reaper.ini full filename+path.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "get_ini_file",
    "functioncall": {
      "lua": "string = reaper.get_ini_file()",
      "cpp": "const char* get_ini_file()",
      "python": "String RPR_get_ini_file()",
      "eel": "bool get_ini_file(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the reaper.ini with path" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.get_ini_file",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "active", "take", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the active take in this item",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose active take you want to have returned"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetActiveTake",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.GetActiveTake(MediaItem item)",
      "cpp": "MediaItem_Take* GetActiveTake(MediaItem* item)",
      "python": "MediaItem_Take RPR_GetActiveTake(MediaItem item)",
      "eel": "MediaItem_Take GetActiveTake(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take", "description": "the active take of the MediaItem" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetActiveTake",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "play", "pause", "recording", "state"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns the bitwise OR of all project play states, eg. and project is playing/pausing/recording (1=playing, 2=pause, 4=recording)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject ignoreProject",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetAllProjectPlayStates",
    "functioncall": {
      "lua": "integer = reaper.GetAllProjectPlayStates(ReaProject ignoreProject)",
      "cpp": "int GetAllProjectPlayStates(ReaProject* ignoreProject)",
      "python": "Int RPR_GetAllProjectPlayStates(ReaProject ignoreProject)",
      "eel": "int GetAllProjectPlayStates(ReaProject ignoreProject)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the bitwise play-state of alle projects\n&1, at least one project is playing\n&2, at least one project is paused\n&4, at least one project is recording"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "ignoreProject", "type": "ReaProject" }],
        "method_name": "reaper.GetAllProjectPlayStates",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.17" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "reaper", "app", "version"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the current version of Reaper, e.g \"5.62/x64\"(windows x64) or \"6.16/macOS-arm64\"(for arm macs)",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetAppVersion",
    "functioncall": {
      "lua": "string = reaper.GetAppVersion()",
      "cpp": "const char* GetAppVersion()",
      "python": "String RPR_GetAppVersion()",
      "eel": "bool GetAppVersion(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the returned version-number of Reaper" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetAppVersion",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": ["audiomanagement", "accessor", "end", "length"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the end time of the audio that can be returned from this accessor. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "AudioAccessor accessor",
          "description": "the AudioAccessor, whose end-time you want to have"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetAudioAccessorEndTime",
    "functioncall": {
      "lua": "number = reaper.GetAudioAccessorEndTime(AudioAccessor accessor)",
      "cpp": "double GetAudioAccessorEndTime(AudioAccessor* accessor)",
      "python": "Float RPR_GetAudioAccessorEndTime(AudioAccessor accessor)",
      "eel": "double GetAudioAccessorEndTime(AudioAccessor accessor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the length of the AudioAccessor" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "accessor", "type": "AudioAccessor" }],
        "method_name": "reaper.GetAudioAccessorEndTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a short hash string (128 chars or less) that will change only if the underlying samples change. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).\n\nDeprecated. See [AudioAccessorStateChanged](#AudioAccessorStateChanged) instead.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "AudioAccessor accessor", "description": "" },
        { "identifier": "string hashNeed128", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetAudioAccessorHash",
    "functioncall": {
      "lua": "string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)",
      "cpp": "void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)",
      "python": "(AudioAccessor accessor, String hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)",
      "eel": "GetAudioAccessorHash(AudioAccessor accessor, #hashNeed128)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string hashNeed128", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "accessor", "type": "AudioAccessor" },
          { "identifier": "hashNeed128", "type": "string" }
        ],
        "method_name": "reaper.GetAudioAccessorHash",
        "return_values": [{ "identifier": "hashNeed128", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorStartTime](#GetAudioAccessorStartTime), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime).\n\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\n            \n            tr = RPR\\_GetTrack(0, 0)\n            aa = RPR\\_CreateTrackAudioAccessor(tr)\n            buf = list([0]\\*2\\*1024) \\# 2 channels, 1024 samples each, initialized to zero\n            pos = 0.0\n            (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n            \\# buf now holds the first 2\\*1024 audio samples from the track.\n            \\# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "AudioAccessor accessor", "description": "" },
        { "identifier": "integer samplerate", "description": "" },
        { "identifier": "integer numchannels", "description": "" },
        { "identifier": "number starttime_sec", "description": "" },
        { "identifier": "integer numsamplesperchannel", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetAudioAccessorSamples",
    "functioncall": {
      "lua": "integer = reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)",
      "cpp": "int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)",
      "python": "(Int retval, AudioAccessor accessor, Int samplerate, Int numchannels, Float starttime_sec, Int numsamplesperchannel, Float samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)",
      "eel": "int GetAudioAccessorSamples(AudioAccessor accessor, int samplerate, int numchannels, starttime_sec, int numsamplesperchannel, buffer_ptr samplebuffer)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "accessor", "type": "AudioAccessor" },
          { "identifier": "samplerate", "type": "integer" },
          { "identifier": "numchannels", "type": "integer" },
          { "identifier": "starttime_sec", "type": "number" },
          { "identifier": "numsamplesperchannel", "type": "integer" },
          { "identifier": "samplebuffer", "type": "array" }
        ],
        "method_name": "reaper.GetAudioAccessorSamples",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the start time of the audio that can be returned from this accessor. See [CreateTakeAudioAccessor](#CreateTakeAudioAccessor), [CreateTrackAudioAccessor](#CreateTrackAudioAccessor), [DestroyAudioAccessor](#DestroyAudioAccessor), [AudioAccessorStateChanged](#AudioAccessorStateChanged), [GetAudioAccessorEndTime](#GetAudioAccessorEndTime), [GetAudioAccessorSamples](#GetAudioAccessorSamples).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "AudioAccessor accessor", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetAudioAccessorStartTime",
    "functioncall": {
      "lua": "number = reaper.GetAudioAccessorStartTime(AudioAccessor accessor)",
      "cpp": "double GetAudioAccessorStartTime(AudioAccessor* accessor)",
      "python": "Float RPR_GetAudioAccessorStartTime(AudioAccessor accessor)",
      "eel": "double GetAudioAccessorStartTime(AudioAccessor accessor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "accessor", "type": "AudioAccessor" }],
        "method_name": "reaper.GetAudioAccessorStartTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.96" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get information about the currently open audio device. \nAttribute can be MODE, IDENT\\_IN, IDENT\\_OUT, BSIZE, SRATE, BPS. \n\nreturns false if unknown attribute or device not open.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string attribute",
          "description": "the attribute to get, as set in Preferences -> Device\nMODE - the Audio system selected \nIDENT\\_IN - the selected Input device\nIDENT\\_OUT - the selected Output device \nBSIZE - the Buffer-sample-size (not the multiplier!)\nSRATE - the samplerate in Hz\nBPS - the sample-format (e.g 16, 24, 32 bit)"
        },
        {
          "identifier": "string desc",
          "description": "a string the API needs to return the value; in Lua set it to \"\""
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetAudioDeviceInfo",
    "functioncall": {
      "lua": "boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute, string desc)",
      "cpp": "bool GetAudioDeviceInfo(const char* attribute, char* desc, int desc_sz)",
      "python": "(Boolean retval, String attribute, String desc, Int desc_sz) = RPR_GetAudioDeviceInfo(attribute, desc, desc_sz)",
      "eel": "bool GetAudioDeviceInfo(\"attribute\", #desc)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if returning a value is possible; false, if not(unknown attribute or device not open)"
        },
        {
          "identifier": "string desc",
          "description": "the returned value; will not return a value, if Preferences are opened"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "attribute", "type": "string" },
          { "identifier": "desc", "type": "string" }
        ],
        "method_name": "reaper.GetAudioDeviceInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "desc", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets the dock ID desired by ident_str, if any",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string ident_str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetConfigWantsDock",
    "functioncall": {
      "lua": "integer = reaper.GetConfigWantsDock(string ident_str)",
      "cpp": "int GetConfigWantsDock(const char* ident_str)",
      "python": "Int RPR_GetConfigWantsDock(String ident_str)",
      "eel": "int GetConfigWantsDock(\"ident_str\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "ident_str", "type": "string" }],
        "method_name": "reaper.GetConfigWantsDock",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns current project if in load/save (usually only used from project_config_extension_t)",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetCurrentProjectInLoadSave",
    "functioncall": {
      "lua": "ReaProject = reaper.GetCurrentProjectInLoadSave()",
      "cpp": "ReaProject* GetCurrentProjectInLoadSave()",
      "python": "ReaProject RPR_GetCurrentProjectInLoadSave()",
      "eel": "ReaProject GetCurrentProjectInLoadSave()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "ReaProject", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetCurrentProjectInLoadSave",
        "return_values": [{ "type": "ReaProject" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "cursor", "context", "track", "item", "envelope", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "return the current cursor context.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetCursorContext",
    "functioncall": {
      "lua": "integer = reaper.GetCursorContext()",
      "cpp": "int GetCursorContext()",
      "python": "Int RPR_GetCursorContext()",
      "eel": "int GetCursorContext()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the cursor context\n  -1, unknown\n   0, track panels\n   1, items\n   2, envelopes                "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetCursorContext",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": [
      "arrangeviewmanagement",
      "cursor",
      "context",
      "track",
      "item",
      "envelope",
      "get",
      "valid"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean want_last_valid",
          "description": "true, get the last valid context; false, get the current context"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetCursorContext2",
    "functioncall": {
      "lua": "integer = reaper.GetCursorContext2(boolean want_last_valid)",
      "cpp": "int GetCursorContext2(bool want_last_valid)",
      "python": "Int RPR_GetCursorContext2(Boolean want_last_valid)",
      "eel": "int GetCursorContext2(bool want_last_valid)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the cursor context\n  -1, unknown\n   0, track panels\n   1, items\n   2, envelopes                "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "want_last_valid", "type": "boolean" }],
        "method_name": "reaper.GetCursorContext2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "edit", "cursor", "get", "last", "position"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "edit cursor position",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetCursorPosition",
    "functioncall": {
      "lua": "number = reaper.GetCursorPosition()",
      "cpp": "double GetCursorPosition()",
      "python": "Float RPR_GetCursorPosition()",
      "eel": "double GetCursorPosition()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the editcursor-position in seconds" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetCursorPosition",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "edit", "cursor", "position", "get", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the edit cursor position in a given project",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetCursorPositionEx",
    "functioncall": {
      "lua": "number = reaper.GetCursorPositionEx(ReaProject proj)",
      "cpp": "double GetCursorPositionEx(ReaProject* proj)",
      "python": "Float RPR_GetCursorPositionEx(ReaProject proj)",
      "eel": "double GetCursorPositionEx(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the position in seconds" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetCursorPositionEx",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "see [GetDisplayedMediaItemColor2](#GetDisplayedMediaItemColor2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetDisplayedMediaItemColor",
    "functioncall": {
      "lua": "integer = reaper.GetDisplayedMediaItemColor(MediaItem item)",
      "cpp": "int GetDisplayedMediaItemColor(MediaItem* item)",
      "python": "Int RPR_GetDisplayedMediaItemColor(MediaItem item)",
      "eel": "int GetDisplayedMediaItemColor(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetDisplayedMediaItemColor",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "" },
        { "identifier": "MediaItem_Take take", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetDisplayedMediaItemColor2",
    "functioncall": {
      "lua": "integer = reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)",
      "cpp": "int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)",
      "python": "Int RPR_GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)",
      "eel": "int GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "take", "type": "MediaItem_Take" }
        ],
        "method_name": "reaper.GetDisplayedMediaItemColor2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.982" },
    "chapers": ["Envelope Management"],
    "tags": ["envelope management", "get", "attribute", "value", "height", "offset", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets an envelope numerical-value attribute:\n    I_TCPY : int *, Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\n    I_TCPH : int *, visible height of envelope\n    I_TCPY_USED : int *, Y offset of envelope relative to parent track, exclusive of padding\n    I_TCPH_USED : int *, visible height of envelope, exclusive of padding\n    P_TRACK : MediaTrack *, parent track pointer (if any)\n    P_ITEM : MediaItem *, parent item pointer (if any)\n    P_TAKE : MediaItem_Take *, parent take pointer (if any)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope tr",
          "description": "the TrackEnvelope, of which you want to retrieve the attribute-value"
        },
        {
          "identifier": "string parmname",
          "description": "the attribute, whose value you want; \ncan be I_TCPY, I_TCPH, I_TCPY_USED, I_TCPH_USED, P_TRACK, P_ITEM, P_TAKE\nsee description for more details"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopeInfo_Value",
    "functioncall": {
      "lua": "number retval = reaper.GetEnvelopeInfo_Value(TrackEnvelope tr, string parmname)",
      "cpp": "double GetEnvelopeInfo_Value(TrackEnvelope* tr, const char* parmname)",
      "python": "Float RPR_GetEnvelopeInfo_Value(TrackEnvelope tr, String parmname)",
      "eel": "double GetEnvelopeInfo_Value(TrackEnvelope tr, \"parmname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number retval", "description": "the returned value of the attribute" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "TrackEnvelope" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.GetEnvelopeInfo_Value",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.974" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope env", "description": "" },
        { "identifier": "string buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopeName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env, string buf)",
      "cpp": "bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)",
      "python": "(Boolean retval, TrackEnvelope env, String bufOut, Int bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)",
      "eel": "bool GetEnvelopeName(TrackEnvelope env, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetEnvelopeName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the attributes of an envelope point. See [GetEnvelopePointEx](#GetEnvelopePointEx)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "integer ptidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopePoint",
    "functioncall": {
      "lua": "boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)",
      "cpp": "bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePoint(envelope, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)",
      "eel": "bool GetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional &amp;time, optional &amp;value, optional int &amp;shape, optional &amp;tension, optional bool &amp;selected)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "optional number time", "description": "" },
        { "identifier": "optional number value", "description": "" },
        { "identifier": "optional number shape", "description": "" },
        { "identifier": "optional number tension", "description": "" },
        { "identifier": "optional boolean selected", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "ptidx", "type": "integer" }
        ],
        "method_name": "reaper.GetEnvelopePoint",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the envelope point at or immediately prior to the given time position. \n\nSee [GetEnvelopePointByTimeEx](#GetEnvelopePointByTimeEx)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "number time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopePointByTime",
    "functioncall": {
      "lua": "integer = reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)",
      "cpp": "int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)",
      "python": "Int RPR_GetEnvelopePointByTime(TrackEnvelope envelope, Float time)",
      "eel": "int GetEnvelopePointByTime(TrackEnvelope envelope, time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.GetEnvelopePointByTime",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee [GetEnvelopePointEx](#GetEnvelopePointEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "integer autoitem_idx", "description": "" },
        { "identifier": "number time", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopePointByTimeEx",
    "functioncall": {
      "lua": "integer = reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)",
      "cpp": "int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)",
      "python": "Int RPR_GetEnvelopePointByTimeEx(TrackEnvelope envelope, Int autoitem_idx, Float time)",
      "eel": "int GetEnvelopePointByTimeEx(TrackEnvelope envelope, int autoitem_idx, time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.GetEnvelopePointByTimeEx",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the attributes of an envelope point.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee [CountEnvelopePointsEx](#CountEnvelopePointsEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope envelope", "description": "" },
        { "identifier": "integer autoitem_idx", "description": "" },
        { "identifier": "integer ptidx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopePointEx",
    "functioncall": {
      "lua": "boolean retval, optional number time, optional number value, optional number shape, optional number tension, optional boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)",
      "cpp": "bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeOutOptional, Float valueOutOptional, Int shapeOutOptional, Float tensionOutOptional, Boolean selectedOutOptional) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)",
      "eel": "bool GetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional &amp;time, optional &amp;value, optional int &amp;shape, optional &amp;tension, optional bool &amp;selected)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "optional number time", "description": "" },
        { "identifier": "optional number value", "description": "" },
        { "identifier": "optional number shape", "description": "" },
        { "identifier": "optional number tension", "description": "" },
        { "identifier": "optional boolean selected", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "ptidx", "type": "integer" }
        ],
        "method_name": "reaper.GetEnvelopePointEx",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see [ScaleFromEnvelopeMode](#ScaleFromEnvelopeMode), [ScaleToEnvelopeMode](#ScaleToEnvelopeMode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope env", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopeScalingMode",
    "functioncall": {
      "lua": "integer = reaper.GetEnvelopeScalingMode(TrackEnvelope env)",
      "cpp": "int GetEnvelopeScalingMode(TrackEnvelope* env)",
      "python": "Int RPR_GetEnvelopeScalingMode(TrackEnvelope env)",
      "eel": "int GetEnvelopeScalingMode(TrackEnvelope env)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "env", "type": "TrackEnvelope" }],
        "method_name": "reaper.GetEnvelopeScalingMode",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.982" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "get", "statechunk"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets the RPPXML state of an envelope.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope env",
          "description": "the Track-Envelope-object, whose trackstate you want to have"
        },
        { "identifier": "string str", "description": "unknown" },
        {
          "identifier": "boolean isundo",
          "description": "Undo flag is a performance/caching hint."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetEnvelopeStateChunk",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)",
      "cpp": "bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)",
      "python": "(Boolean retval, TrackEnvelope env, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)",
      "eel": "bool GetEnvelopeStateChunk(TrackEnvelope env, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if it's successful; false, if unsuccessful"
        },
        { "identifier": "string str", "description": "the state-chunk" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetEnvelopeStateChunk",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "reaper", "get", "exe", "path"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetExePath",
    "functioncall": {
      "lua": "string = reaper.GetExePath()",
      "cpp": "const char* GetExePath()",
      "python": "String RPR_GetExePath()",
      "eel": "bool GetExePath(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the path to the reaper.exe or reaper.app" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetExePath",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Extended States"],
    "tags": ["extendedstates", "state", "value", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the extended state value for a specific section and key. See [SetExtState](#SetExtState), [DeleteExtState](#DeleteExtState), [HasExtState](#HasExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string section",
          "description": "the section, in which the key and value is stored "
        },
        { "identifier": "string key", "description": "the key, that contains the value" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetExtState",
    "functioncall": {
      "lua": "string = reaper.GetExtState(string section, string key)",
      "cpp": "const char* GetExtState(const char* section, const char* key)",
      "python": "String RPR_GetExtState(String section, String key)",
      "eel": "bool GetExtState(#retval, \"section\", \"key\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "key", "type": "string" }
        ],
        "method_name": "reaper.GetExtState",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["FX Management"],
    "tags": ["fxmanagement", "get", "focused", "fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get focused FX. \n\n!!Deprecated, use [GetFocusedFX2](#GetFocusedFX) instead\n\nSee [GetLastTouchedFX](#GetLastTouchedFX).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "GetFocusedFX",
    "functioncall": {
      "lua": "integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()",
      "cpp": "int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)",
      "python": "(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)",
      "eel": "int GetFocusedFX(int &amp;tracknumber, int &amp;itemnumber, int &amp;fxnumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, if no FX window has focus\n1, if a track FX window has focus or was the last focused and still open\n2, if an item FX window has focus or was the last focused and still open"
        },
        {
          "identifier": "integer tracknumber",
          "description": "tracknumber; 0, master track; 1, track 1; etc. "
        },
        {
          "identifier": "integer itemnumber",
          "description": "-1, if it's a track-fx; 0 and higher, the mediaitem-number"
        },
        {
          "identifier": "integer fxnumber",
          "description": "If item FX, fxnumber will have the high word be the take index, the low word the FX index"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetFocusedFX",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "tracknumber", "type": "integer" },
          { "identifier": "itemnumber", "type": "integer" },
          { "identifier": "fxnumber", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.16" },
    "chapers": ["FX Management"],
    "tags": ["fxmanagement", "get", "focused", "fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. \n\ntracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). \n\nFor interpretation of fxnumber, see [GetLastTouchedFX](#GetLastTouchedFX).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "GetFocusedFX2",
    "functioncall": {
      "lua": "integer retval, number tracknumber, number itemnumber, number fxnumber = reaper.GetFocusedFX2()",
      "cpp": "int GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)",
      "python": "(Int retval, Int tracknumberOut, Int itemnumberOut, Int fxnumberOut) = RPR_GetFocusedFX2(tracknumberOut, itemnumberOut, fxnumberOut)",
      "eel": "int GetFocusedFX2(int &tracknumber, int &itemnumber, int &fxnumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, if no FX window has focus\n1, if a track FX window has focus or was the last focused and still open\n2, if an item FX window has focus or was the last focused and still open\n4, if FX is no longer focused but still open"
        },
        {
          "identifier": "integer tracknumber",
          "description": "tracknumber; 0, master track; 1, track 1; etc. "
        },
        {
          "identifier": "integer itemnumber",
          "description": "-1, if it's a track-fx; 0 and higher, the mediaitem-number"
        },
        {
          "identifier": "integer fxnumber",
          "description": "If item FX, fxnumber will have the high word be the take index, the low word the FX index"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetFocusedFX2",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "tracknumber", "type": "number" },
          { "identifier": "itemnumber", "type": "number" },
          { "identifier": "fxnumber", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [
      "projectmanagement",
      "free disk space",
      "get",
      "primary recording path",
      "secondary recording path"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer pathidx",
          "description": "recording path; 0, primary recording path; 1, secondary recording path"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetFreeDiskSpaceForRecordPath",
    "functioncall": {
      "lua": "integer = reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)",
      "cpp": "int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)",
      "python": "Int RPR_GetFreeDiskSpaceForRecordPath(ReaProject proj, Int pathidx)",
      "eel": "int GetFreeDiskSpaceForRecordPath(ReaProject proj, int pathidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the freedisk-size in megabytes" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "pathidx", "type": "integer" }
        ],
        "method_name": "reaper.GetFreeDiskSpaceForRecordPath",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer fxindex", "description": "" },
        { "identifier": "integer parameterindex", "description": "" },
        { "identifier": "boolean create", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetFXEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)",
      "cpp": "TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)",
      "python": "TrackEnvelope RPR_GetFXEnvelope(MediaTrack track, Int fxindex, Int parameterindex, Boolean create)",
      "eel": "TrackEnvelope GetFXEnvelope(MediaTrack track, int fxindex, int parameterindex, bool create)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxindex", "type": "integer" },
          { "identifier": "parameterindex", "type": "integer" },
          { "identifier": "create", "type": "boolean" }
        ],
        "method_name": "reaper.GetFXEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetGlobalAutomationOverride",
    "functioncall": {
      "lua": "integer = reaper.GetGlobalAutomationOverride()",
      "cpp": "int GetGlobalAutomationOverride()",
      "python": "Int RPR_GetGlobalAutomationOverride()",
      "eel": "int GetGlobalAutomationOverride()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetGlobalAutomationOverride",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "zoom", "horizontal", "get", "factor"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns pixels/second",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetHZoomLevel",
    "functioncall": {
      "lua": "number = reaper.GetHZoomLevel()",
      "cpp": "double GetHZoomLevel()",
      "python": "Float RPR_GetHZoomLevel()",
      "eel": "double GetHZoomLevel()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "pixels/shown arrange-view-second" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetHZoomLevel",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "audiomanagement", "input", "channels", "name", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the name of a input-channel.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer channelIndex",
          "description": "the index of the input-channels, with 0 for the first, 1 for the second, etc."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetInputChannelName",
    "functioncall": {
      "lua": "string = reaper.GetInputChannelName(integer channelIndex)",
      "cpp": "const char* GetInputChannelName(int channelIndex)",
      "python": "String RPR_GetInputChannelName(Int channelIndex)",
      "eel": "bool GetInputChannelName(#retval, int channelIndex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the name of the input-channel." }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "channelIndex", "type": "integer" }],
        "method_name": "reaper.GetInputChannelName",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "device", "management", "input", "output", "latency"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets the audio device input/output latency in samples",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetInputOutputLatency",
    "functioncall": {
      "lua": "number inputlatency retval, number outputLatency = reaper.GetInputOutputLatency()",
      "cpp": "void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)",
      "python": "(Int inputlatencyOut, Int outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)",
      "eel": "GetInputOutputLatency(int &amp;inputlatency, int &amp;outputLatency)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer inputlatency retval", "description": "the input-latency" },
        { "identifier": "integer outputLatency", "description": "the output-latency" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetInputOutputLatency",
        "return_values": [
          { "identifier": "inputlatency", "type": "number" },
          { "identifier": "outputLatency", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetItemEditingTime2",
    "functioncall": {
      "lua": "number position, PCM_source which_item, number flags = reaper.GetItemEditingTime2()",
      "cpp": "double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)",
      "python": "(Float retval, PCM_source* which_itemOut, Int flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)",
      "eel": "double GetItemEditingTime2(PCM_source &amp;which_item, int &amp;flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number position", "description": "" },
        { "identifier": "PCM_source which_item", "description": "" },
        { "identifier": "number flags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetItemEditingTime2",
        "return_values": [
          { "identifier": "position", "type": "number" },
          { "identifier": "which_item", "type": "PCM_source" },
          { "identifier": "flags", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Mediaitem Management"],
    "tags": [
      "mediaitem management",
      "get",
      "item",
      "mediaitem",
      "mediaitem take",
      "take",
      "at position"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit(in Lua, this function simply returns the take as additional return-value).\n\nNote: You can not get the item at screen-coordinates, where it is hidden by other windows.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetItemFromPoint",
    "functioncall": {
      "lua": "MediaItem, MediaItem_Take take = reaper.GetItemFromPoint(integer screen_x, integer screen_y, boolean allow_locked, optional MediaItem_Take)",
      "cpp": "MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)",
      "python": "MediaItem RPR_GetItemFromPoint(Int screen_x, Int screen_y, Boolean allow_locked, MediaItem_Take* takeOutOptional)",
      "eel": "MediaItem GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take &take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem", "description": "the MediaItem at the position" },
        { "identifier": "MediaItem_Take take", "description": "the MediaItem_Take at the position" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "screen_x", "type": "integer" },
          { "identifier": "screen_y", "type": "integer" },
          { "identifier": "allow_locked", "type": "boolean" },
          { "identifier": "MediaItem_Take", "type": "optional" }
        ],
        "method_name": "reaper.GetItemFromPoint",
        "return_values": [{ "identifier": "take", "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "project", "context", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the project, in which a MediaItem is located.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose project-location you want to know"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetItemProjectContext",
    "functioncall": {
      "lua": "ReaProject = reaper.GetItemProjectContext(MediaItem item)",
      "cpp": "ReaProject* GetItemProjectContext(MediaItem* item)",
      "python": "ReaProject RPR_GetItemProjectContext(MediaItem item)",
      "eel": "ReaProject GetItemProjectContext(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject",
          "description": "the project, in which the MediaItem is located; returned as a reaper-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetItemProjectContext",
        "return_values": [{ "type": "ReaProject" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.982" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "statechunk", "item", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose statechunk you want"
        },
        { "identifier": "string str", "description": "unknown" },
        {
          "identifier": "boolean isundo",
          "description": "Undo flag is a performance/caching hint."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetItemStateChunk",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)",
      "cpp": "bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)",
      "python": "(Boolean retval, MediaItem item, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)",
      "eel": "bool GetItemStateChunk(MediaItem item, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, getting statechunk was successful"
        },
        { "identifier": "string str", "description": "the statechunk of the MediaItem" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetItemStateChunk",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "get", "color", "theme", "file", "path"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the last used color-theme-file.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetLastColorThemeFile",
    "functioncall": {
      "lua": "string = reaper.GetLastColorThemeFile()",
      "cpp": "const char* GetLastColorThemeFile()",
      "python": "String RPR_GetLastColorThemeFile()",
      "eel": "bool GetLastColorThemeFile(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the path and filename of the last used theme" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetLastColorThemeFile",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "get", "last", "current", "region", "marker"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the last project marker before time, and/or the project region that includes time. \nmarkeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See [EnumProjectMarkers](#EnumProjectMarkers).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "number time", "description": "the position to check in seconds" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetLastMarkerAndCurRegion",
    "functioncall": {
      "lua": "integer markeridx retval, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)",
      "cpp": "void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)",
      "python": "(ReaProject proj, Float time, Int markeridxOut, Int regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)",
      "eel": "GetLastMarkerAndCurRegion(ReaProject proj, time, int &amp;markeridx, int &amp;regionidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer markeridx retval",
          "description": "the last marker-number(not shown number!) before parameter time"
        },
        {
          "identifier": "integer regionidx",
          "description": "the region, in which parameter time lies"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.GetLastMarkerAndCurRegion",
        "return_values": [
          { "identifier": "markeridx", "type": "integer" },
          { "identifier": "regionidx", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["FX Management"],
    "tags": ["fxmanagement", "last", "touched", "get", "parameter", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the last touched track, it's last touched parameter and tracknumber.\n\nThe low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. \n\nSee [GetFocusedFX2](#GetFocusedFX2).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "GetLastTouchedFX",
    "functioncall": {
      "lua": "boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()",
      "cpp": "bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)",
      "python": "(Boolean retval, Int tracknumberOut, Int fxnumberOut, Int paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)",
      "eel": "bool GetLastTouchedFX(int &amp;tracknumber, int &amp;fxnumber, int &amp;paramnumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if last touched FX parameter is valid; false, if otherwise"
        },
        {
          "identifier": "integer tracknumber",
          "description": "the tracknumber; 0 means the master track, 1 means track 1, etc.\nIf the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc).                                 "
        },
        {
          "identifier": "integer fxnumber",
          "description": "the id of the FX in the track tracknumber, zero-based\nFor track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. \nFor item FX, the low word defines the FX index in the chain, and the high word defines the take number. "
        },
        {
          "identifier": "integer paramnumber",
          "description": "the id of the last parameter touched, zero-based"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetLastTouchedFX",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "tracknumber", "type": "integer" },
          { "identifier": "fxnumber", "type": "integer" },
          { "identifier": "paramnumber", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "last", "touched", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets the MediaTrack, that has been last touched.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetLastTouchedTrack",
    "functioncall": {
      "lua": "MediaTrack = reaper.GetLastTouchedTrack()",
      "cpp": "MediaTrack* GetLastTouchedTrack()",
      "python": "MediaTrack RPR_GetLastTouchedTrack()",
      "eel": "MediaTrack GetLastTouchedTrack()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack", "description": "the last touched MediaTrack as an object" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetLastTouchedTrack",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "get", "reaper", "window"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the Reaper-window as an HWND-object",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMainHwnd",
    "functioncall": {
      "lua": "HWND hwnd = reaper.GetMainHwnd()",
      "cpp": "HWND GetMainHwnd()",
      "python": "HWND RPR_GetMainHwnd()",
      "eel": "HWND GetMainHwnd()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND hwnd", "description": "the Reaper-Window" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMainHwnd",
        "return_values": [{ "identifier": "hwnd", "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "master", "track", "mute", "solo", "flag"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deprecated: Get the mute/solo-state of the master-track. This is deprecated as you can just query the master track as well.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMasterMuteSoloFlags",
    "functioncall": {
      "lua": "integer mastermutesolo = reaper.GetMasterMuteSoloFlags()",
      "cpp": "int GetMasterMuteSoloFlags()",
      "python": "Int RPR_GetMasterMuteSoloFlags()",
      "eel": "int GetMasterMuteSoloFlags()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer mastermutesolo",
          "description": "state of mute/solo of the master-track; &amp;1=master mute,&amp;2=master solo."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMasterMuteSoloFlags",
        "return_values": [{ "identifier": "mastermutesolo", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "master", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a MediaTrack-object of the MasterTrack.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetMasterTrack",
    "functioncall": {
      "lua": "MediaTrack track = reaper.GetMasterTrack(ReaProject proj)",
      "cpp": "MediaTrack* GetMasterTrack(ReaProject* proj)",
      "python": "MediaTrack RPR_GetMasterTrack(ReaProject proj)",
      "eel": "MediaTrack GetMasterTrack(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the MediaTrack-object of the MasterTrack"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetMasterTrack",
        "return_values": [{ "identifier": "track", "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "master", "visibility", "tcp", "mcp"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the visibility of the master-track in mixer and track-control-panel. See [SetMasterTrackVisibility](#SetMasterTrackVisibility).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "GetMasterTrackVisibility",
    "functioncall": {
      "lua": "integer master_visibility = reaper.GetMasterTrackVisibility()",
      "cpp": "int GetMasterTrackVisibility()",
      "python": "Int RPR_GetMasterTrackVisibility()",
      "eel": "int GetMasterTrackVisibility()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer master_visibility",
          "description": "state of visibility of the master-track\n&1 - 1, master track visible in tcp; 0, master track invisible in mixer\n&2 - 2, master track invisible in mixer; 0, master track visible in mixer"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMasterTrackVisibility",
        "return_values": [{ "identifier": "master_visibility", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["midimanagement", "device", "input", "get", "maximum"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns max dev for midi inputs",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMaxMidiInputs",
    "functioncall": {
      "lua": "integer = reaper.GetMaxMidiInputs()",
      "cpp": "int GetMaxMidiInputs()",
      "python": "Int RPR_GetMaxMidiInputs()",
      "eel": "int GetMaxMidiInputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the number of max midi inputs" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMaxMidiInputs",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["midimanagement", "device", "output", "get", "maximum"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns max dev for midi outputs",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMaxMidiOutputs",
    "functioncall": {
      "lua": "integer = reaper.GetMaxMidiOutputs()",
      "cpp": "int GetMaxMidiOutputs()",
      "python": "Int RPR_GetMaxMidiOutputs()",
      "eel": "int GetMaxMidiOutputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the number of max midi outputs" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMaxMidiOutputs",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "item", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get an item from a project by item count (zero-based)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "integer itemidx",
          "description": "the number of the item within the whole project; 0 for the first, 1 for the second, etc; numberingorder depending on, when was a MediaItem added to the project(recording, import, etc)"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetMediaItem",
    "functioncall": {
      "lua": "MediaItem = reaper.GetMediaItem(ReaProject proj, integer itemidx)",
      "cpp": "MediaItem* GetMediaItem(ReaProject* proj, int itemidx)",
      "python": "MediaItem RPR_GetMediaItem(ReaProject proj, Int itemidx)",
      "eel": "MediaItem GetMediaItem(ReaProject proj, int itemidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem",
          "description": "the requested MediaItem as a MediaItem-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "itemidx", "type": "integer" }
        ],
        "method_name": "reaper.GetMediaItem",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "mediaitemmanagement", "get", "track", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get parent track of media item",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose track you want to know"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItem_Track",
    "functioncall": {
      "lua": "MediaTrack track = reaper.GetMediaItem_Track(MediaItem item)",
      "cpp": "MediaTrack* GetMediaItem_Track(MediaItem* item)",
      "python": "MediaTrack RPR_GetMediaItem_Track(MediaItem item)",
      "eel": "MediaTrack GetMediaItem_Track(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the returned MediaTrack, in which the MediaItem lies"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetMediaItem_Track",
        "return_values": [{ "identifier": "track", "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["Miscellaneous"],
    "tags": ["miscellaneous", "get", "armed", "command"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetArmedCommand",
    "functioncall": {
      "lua": "integer retval, string sec = reaper.GetArmedCommand()",
      "cpp": "int GetArmedCommand(char* secOut, int secOut_sz)",
      "python": "(Int retval, String secOut, Int secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)",
      "eel": "int GetArmedCommand(#sec)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string sec", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetArmedCommand",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "sec", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["Miscellaneous"],
    "tags": ["miscellaneous", "get", "armed", "command"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer cmd", "description": "" },
        { "identifier": "string sectionname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ArmCommand",
    "functioncall": {
      "lua": "reaper.ArmCommand(integer cmd, string sectionname)",
      "cpp": "void ArmCommand(int cmd, const char* sectionname)",
      "python": "RPR_ArmCommand(Int cmd, String sectionname)",
      "eel": "ArmCommand(int cmd, \"sectionname\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "cmd", "type": "integer" },
          { "identifier": "sectionname", "type": "string" }
        ],
        "method_name": "reaper.ArmCommand",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.01" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "parameter", "numerical values"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get media item numerical-value attributes.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose value you want to have"
        },
        {
          "identifier": "string parmname",
          "description": "the parametername, whose value you want to have:\nB_MUTE : bool * : muted\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position of track in pixels (read-only)\nI_LASTH : int * : height in track in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color.\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\nP_TRACK : MediaTrack * (read-only)"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemInfo_Value",
    "functioncall": {
      "lua": "number retval = reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)",
      "cpp": "double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)",
      "python": "Float RPR_GetMediaItemInfo_Value(MediaItem item, String parmname)",
      "eel": "double GetMediaItemInfo_Value(MediaItem item, \"parmname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "the value you requested" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.GetMediaItemInfo_Value",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "take", "count", "number"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the number of takes in a MediaItem-object.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem-object, whose number of takes you want to know."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemNumTakes",
    "functioncall": {
      "lua": "integer itemnumtakes = reaper.GetMediaItemNumTakes(MediaItem item)",
      "cpp": "int GetMediaItemNumTakes(MediaItem* item)",
      "python": "Int RPR_GetMediaItemNumTakes(MediaItem item)",
      "eel": "int GetMediaItemNumTakes(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer itemnumtakes",
          "description": "the number of takes within the MediaItem-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetMediaItemNumTakes",
        "return_values": [{ "identifier": "itemnumtakes", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "item", "take", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a take from a MediaItem as a MediaItem_Take-object.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose take you want to request"
        },
        {
          "identifier": "integer tk",
          "description": "the id of the take, that you want to request"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTake",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.GetMediaItemTake(MediaItem item, integer tk)",
      "cpp": "MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)",
      "python": "MediaItem_Take RPR_GetMediaItemTake(MediaItem item, Int tk)",
      "eel": "MediaItem_Take GetMediaItemTake(MediaItem item, int tk)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take",
          "description": "the returned take as a MediaItem_Take-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "tk", "type": "integer" }
        ],
        "method_name": "reaper.GetMediaItemTake",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "take", "get", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get parent item of media item take.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the MediaItem_Take-object, whose accompanying MediaItem you want to request."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTake_Item",
    "functioncall": {
      "lua": "MediaItem item = reaper.GetMediaItemTake_Item(MediaItem_Take take)",
      "cpp": "MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)",
      "python": "MediaItem RPR_GetMediaItemTake_Item(MediaItem_Take take)",
      "eel": "MediaItem GetMediaItemTake_Item(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, in which the MediaItem_Take takes place."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetMediaItemTake_Item",
        "return_values": [{ "identifier": "item", "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "number peakrate", "description": "" },
        { "identifier": "number starttime", "description": "" },
        { "identifier": "integer numchannels", "description": "" },
        { "identifier": "integer numsamplesperchannel", "description": "" },
        { "identifier": "integer want_extra_type", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTake_Peaks",
    "functioncall": {
      "lua": "integer peaks = reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)",
      "cpp": "int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)",
      "python": "(Int retval, MediaItem_Take take, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)",
      "eel": "int GetMediaItemTake_Peaks(MediaItem_Take take, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer peaks", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "peakrate", "type": "number" },
          { "identifier": "starttime", "type": "number" },
          { "identifier": "numchannels", "type": "integer" },
          { "identifier": "numsamplesperchannel", "type": "integer" },
          { "identifier": "want_extra_type", "type": "integer" },
          { "identifier": "buf", "type": "array" }
        ],
        "method_name": "reaper.GetMediaItemTake_Peaks",
        "return_values": [{ "identifier": "peaks", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get media source of media item take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTake_Source",
    "functioncall": {
      "lua": "PCM_source source = reaper.GetMediaItemTake_Source(MediaItem_Take take)",
      "cpp": "PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)",
      "python": "PCM_source RPR_GetMediaItemTake_Source(MediaItem_Take take)",
      "eel": "PCM_source GetMediaItemTake_Source(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetMediaItemTake_Source",
        "return_values": [{ "identifier": "source", "type": "PCM_source" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get parent track of media item take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTake_Track",
    "functioncall": {
      "lua": "MediaTrack track = reaper.GetMediaItemTake_Track(MediaItem_Take take)",
      "cpp": "MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)",
      "python": "MediaTrack RPR_GetMediaItemTake_Track(MediaItem_Take take)",
      "eel": "MediaTrack GetMediaItemTake_Track(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetMediaItemTake_Track",
        "return_values": [{ "identifier": "track", "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "string guidGUID", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetMediaItemTakeByGUID",
    "functioncall": {
      "lua": "MediaItem_Take take = reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)",
      "cpp": "MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)",
      "python": "MediaItem_Take RPR_GetMediaItemTakeByGUID(ReaProject project, const GUID guid)",
      "eel": "MediaItem_Take GetMediaItemTakeByGUID(ReaProject project, \"guidGUID\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take", "description": "take" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "guidGUID", "type": "string" }
        ],
        "method_name": "reaper.GetMediaItemTakeByGUID",
        "return_values": [{ "identifier": "take", "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.01" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color.\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "string parmname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTakeInfo_Value",
    "functioncall": {
      "lua": "number retval = reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)",
      "cpp": "double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)",
      "python": "Float RPR_GetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname)",
      "eel": "double GetMediaItemTakeInfo_Value(MediaItem_Take take, \"parmname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.GetMediaItemTakeInfo_Value",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "item", "track", "associated"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the associated MediaTrack of a MediaItem.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem",
          "description": "the MediaItem, whose associated MediaTrack you want to have"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaItemTrack",
    "functioncall": {
      "lua": "MediaTrack = reaper.GetMediaItemTrack(MediaItem item)",
      "cpp": "MediaTrack* GetMediaItemTrack(MediaItem* item)",
      "python": "MediaTrack RPR_GetMediaItemTrack(MediaItem item)",
      "eel": "MediaTrack GetMediaItemTrack(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack",
          "description": "the MediaTrack, where the MediaItem is located in "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.GetMediaItemTrack",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies the media source filename to typebuf. Note that in-project MIDI media sources have no associated filename. See [GetMediaSourceParent](#GetMediaSourceParent).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source source", "description": "" },
        { "identifier": "string filenamebuf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceFileName",
    "functioncall": {
      "lua": "string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source, string filenamebuf)",
      "cpp": "void GetMediaSourceFileName(PCM_source* source, char* filenamebuf, int filenamebuf_sz)",
      "python": "(PCM_source source, String filenamebuf, Int filenamebuf_sz) = RPR_GetMediaSourceFileName(source, filenamebuf, filenamebuf_sz)",
      "eel": "GetMediaSourceFileName(PCM_source source, #filenamebuf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string filenamebuf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source", "type": "PCM_source" },
          { "identifier": "filenamebuf", "type": "string" }
        ],
        "method_name": "reaper.GetMediaSourceFileName",
        "return_values": [{ "identifier": "filenamebuf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceLength",
    "functioncall": {
      "lua": "number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)",
      "cpp": "double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)",
      "python": "(Float retval, PCM_source source, Boolean lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)",
      "eel": "double GetMediaSourceLength(PCM_source source, bool &amp;lengthIsQN)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number retval", "description": "" },
        { "identifier": "boolean lengthIsQN", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "source", "type": "PCM_source" }],
        "method_name": "reaper.GetMediaSourceLength",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "lengthIsQN", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the number of channels in the source media.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceNumChannels",
    "functioncall": {
      "lua": "integer mediasourcenumchans = reaper.GetMediaSourceNumChannels(PCM_source source)",
      "cpp": "int GetMediaSourceNumChannels(PCM_source* source)",
      "python": "Int RPR_GetMediaSourceNumChannels(PCM_source source)",
      "eel": "int GetMediaSourceNumChannels(PCM_source source)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer mediasourcenumchans", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "source", "type": "PCM_source" }],
        "method_name": "reaper.GetMediaSourceNumChannels",
        "return_values": [{ "identifier": "mediasourcenumchans", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceParent",
    "functioncall": {
      "lua": "PCM_source = reaper.GetMediaSourceParent(PCM_source src)",
      "cpp": "PCM_source* GetMediaSourceParent(PCM_source* src)",
      "python": "PCM_source RPR_GetMediaSourceParent(PCM_source src)",
      "eel": "PCM_source GetMediaSourceParent(PCM_source src)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "src", "type": "PCM_source" }],
        "method_name": "reaper.GetMediaSourceParent",
        "return_values": [{ "type": "PCM_source" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the sample rate. MIDI source media will return zero.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceSampleRate",
    "functioncall": {
      "lua": "integer mediasourcesamplerate = reaper.GetMediaSourceSampleRate(PCM_source source)",
      "cpp": "int GetMediaSourceSampleRate(PCM_source* source)",
      "python": "Int RPR_GetMediaSourceSampleRate(PCM_source source)",
      "eel": "int GetMediaSourceSampleRate(PCM_source source)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer mediasourcesamplerate", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "source", "type": "PCM_source" }],
        "method_name": "reaper.GetMediaSourceSampleRate",
        "return_values": [{ "identifier": "mediasourcesamplerate", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetMediaSourceType",
    "functioncall": {
      "lua": "string typebuf = reaper.GetMediaSourceType(PCM_source source, string typebuf)",
      "cpp": "void GetMediaSourceType(PCM_source* source, char* typebuf, int typebuf_sz)",
      "python": "(PCM_source source, String typebuf, Int typebuf_sz) = RPR_GetMediaSourceType(source, typebuf, typebuf_sz)",
      "eel": "GetMediaSourceType(PCM_source source, #typebuf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string typebuf",
          "description": "a string-buffer needed by the function, use \"\" in Lua"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source", "type": "PCM_source" },
          { "identifier": "typebuf", "type": "string" }
        ],
        "method_name": "reaper.GetMediaSourceType",
        "return_values": [{ "identifier": "typebuf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, &lt;0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container\nI_MCPW : int * : current MCP width in pixels\nI_MCPH : int * : current MCP height in pixels\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, &lt;0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color.\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, &lt;0=project default, 1=+0dB, etc\nP_ENV:&lt;envchunkname : TrackEnvelope*, read only. Call with :&lt;VOLENV, :&lt;PANENV, etc appended.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nB_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack tr",
          "description": "the MediaTrack-object, whose attribute you want to request"
        },
        {
          "identifier": "string parmname",
          "description": "the attribute, that you want to request, like D_VOL or B_SHOWINMIXER etc"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMediaTrackInfo_Value",
    "functioncall": {
      "lua": "number retval = reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)",
      "cpp": "double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)",
      "python": "Float RPR_GetMediaTrackInfo_Value(MediaTrack tr, String parmname)",
      "eel": "double GetMediaTrackInfo_Value(MediaTrack tr, \"parmname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number retval", "description": "the value of the requested attribute" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.GetMediaTrackInfo_Value",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns true if device present",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer dev", "description": "" },
        { "identifier": "string nameout", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMIDIInputName",
    "functioncall": {
      "lua": "boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)",
      "cpp": "bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)",
      "python": "(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)",
      "eel": "bool GetMIDIInputName(int dev, #nameout)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string nameout", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "dev", "type": "integer" },
          { "identifier": "nameout", "type": "string" }
        ],
        "method_name": "reaper.GetMIDIInputName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "nameout", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns true if device present",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer dev", "description": "" },
        { "identifier": "string nameout", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetMIDIOutputName",
    "functioncall": {
      "lua": "boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)",
      "cpp": "bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)",
      "python": "(Boolean retval, Int dev, String nameout, Int nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)",
      "eel": "bool GetMIDIOutputName(int dev, #nameout)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string nameout", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "dev", "type": "integer" },
          { "identifier": "nameout", "type": "string" }
        ],
        "method_name": "reaper.GetMIDIOutputName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "nameout", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "get", "visible", "leftmost", "mcp", "mixer", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the leftmost track visible in the mixer",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMixerScroll",
    "functioncall": {
      "lua": "MediaTrack leftmosttrack = reaper.GetMixerScroll()",
      "cpp": "MediaTrack* GetMixerScroll()",
      "python": "MediaTrack RPR_GetMixerScroll()",
      "eel": "MediaTrack GetMixerScroll()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack leftmosttrack", "description": "the leftmost track in the MCP" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMixerScroll",
        "return_values": [{ "identifier": "leftmosttrack", "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nSee [SetMouseModifier](#SetMouseModifier) for more information.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string context", "description": "" },
        { "identifier": "integer modifier_flag", "description": "" },
        { "identifier": "string action", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetMouseModifier",
    "functioncall": {
      "lua": "string action = reaper.GetMouseModifier(string context, integer modifier_flag, string action)",
      "cpp": "void GetMouseModifier(const char* context, int modifier_flag, char* action, int action_sz)",
      "python": "(String context, Int modifier_flag, String action, Int action_sz) = RPR_GetMouseModifier(context, modifier_flag, action, action_sz)",
      "eel": "GetMouseModifier(\"context\", int modifier_flag, #action)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string action", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "context", "type": "string" },
          { "identifier": "modifier_flag", "type": "integer" },
          { "identifier": "action", "type": "string" }
        ],
        "method_name": "reaper.GetMouseModifier",
        "return_values": [{ "identifier": "action", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "mouse", "position", "vertical", "horizontal", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get mouse position in screen coordinates",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetMousePosition",
    "functioncall": {
      "lua": "integer x, integer y = reaper.GetMousePosition()",
      "cpp": "void GetMousePosition(int* xOut, int* yOut)",
      "python": "(Int xOut, Int yOut) = RPR_GetMousePosition(xOut, yOut)",
      "eel": "GetMousePosition(int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "horizontal position of the mouse in pixels" },
        { "identifier": "integer y", "description": "vertical position of the mouse in pixels" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetMousePosition",
        "return_values": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "count", "input", "hardware"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return number of normal audio hardware inputs available",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetNumAudioInputs",
    "functioncall": {
      "lua": "integer numAudioIns = reaper.GetNumAudioInputs()",
      "cpp": "int GetNumAudioInputs()",
      "python": "Int RPR_GetNumAudioInputs()",
      "eel": "int GetNumAudioInputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer numAudioIns",
          "description": "the number of audio hardware outputs available"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetNumAudioInputs",
        "return_values": [{ "identifier": "numAudioIns", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "count", "output", "hardware"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return number of normal audio hardware outputs available",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetNumAudioOutputs",
    "functioncall": {
      "lua": "integer numAudioOuts = reaper.GetNumAudioOutputs()",
      "cpp": "int GetNumAudioOutputs()",
      "python": "Int RPR_GetNumAudioOutputs()",
      "eel": "int GetNumAudioOutputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer numAudioOuts",
          "description": "the number of audio hardware outputs available"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetNumAudioOutputs",
        "return_values": [{ "identifier": "numAudioOuts", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "midi", "count", "input", "hardware"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns max number of real midi hardware inputs",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetNumMIDIInputs",
    "functioncall": {
      "lua": "integer numMidiIns = reaper.GetNumMIDIInputs()",
      "cpp": "int GetNumMIDIInputs()",
      "python": "Int RPR_GetNumMIDIInputs()",
      "eel": "int GetNumMIDIInputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer numMidiIns", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetNumMIDIInputs",
        "return_values": [{ "identifier": "numMidiIns", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "midi", "count", "output", "hardware"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns max number of real midi hardware outputs",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetNumMIDIOutputs",
    "functioncall": {
      "lua": "integer numMidiOuts = reaper.GetNumMIDIOutputs()",
      "cpp": "int GetNumMIDIOutputs()",
      "python": "Int RPR_GetNumMIDIOutputs()",
      "eel": "int GetNumMIDIOutputs()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer numMidiOuts",
          "description": "the number of real midi hardware outputs"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetNumMIDIOutputs",
        "return_values": [{ "identifier": "numMidiOuts", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.09" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "count", "takemarker"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns number of take markers.\nSee [DeleteTakeMarker](#DeleteTakeMarker)), [GetTakeMarker](#GetTakeMarker) and [SetTakeMarker](#SetTakeMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the take, whose take-markers you want to count"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetNumTakeMarkers",
    "functioncall": {
      "lua": "integer retval = reaper.GetNumTakeMarkers(MediaItem_Take take)",
      "cpp": "int GetNumTakeMarkers(MediaItem_Take* take)",
      "python": "Int RPR_GetNumTakeMarkers(MediaItem_Take take)",
      "eel": "int GetNumTakeMarkers(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "the number of found take-markers" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetNumTakeMarkers",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "count", "tracks"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the number of tracks. Excluding the master-track.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetNumTracks",
    "functioncall": {
      "lua": "integer numtracks = reaper.GetNumTracks()",
      "cpp": "int GetNumTracks()",
      "python": "Int RPR_GetNumTracks()",
      "eel": "int GetNumTracks()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer numtracks",
          "description": "the number of tracks in the current project."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetNumTracks",
        "return_values": [{ "identifier": "numtracks", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.17" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "get", "operating system", "os", "osx", "windows"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the current operating-system. Good for determining, e.g. the correct filesystem-separators.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetOS",
    "functioncall": {
      "lua": "string os = reaper.GetOS()",
      "cpp": "const char* GetOS()",
      "python": "String RPR_GetOS()",
      "eel": "bool GetOS(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string os",
          "description": "\"Win32\", \"Win64\", \"OSX32\", \"OSX64\", \"macOS-arm64\" or \"Other\""
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetOS",
        "return_values": [{ "identifier": "os", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audio", "audiomanagement", "output", "channels", "name", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the name of a specific output-channel.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer channelIndex", "description": "the index of the output-channel" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetOutputChannelName",
    "functioncall": {
      "lua": "string outputchanname= reaper.GetOutputChannelName(integer channelIndex)",
      "cpp": "const char* GetOutputChannelName(int channelIndex)",
      "python": "String RPR_GetOutputChannelName(Int channelIndex)",
      "eel": "bool GetOutputChannelName(#retval, int channelIndex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string outputchanname", "description": "the name of the output-channel." }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "channelIndex", "type": "integer" }],
        "method_name": "reaper.GetOutputChannelName",
        "return_values": [{ "identifier": "outputchanname", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": ["audiomanagement", "get", "output", "latency", "seconds"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns output latency in seconds",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetOutputLatency",
    "functioncall": {
      "lua": "number outputlatency = reaper.GetOutputLatency()",
      "cpp": "double GetOutputLatency()",
      "python": "Float RPR_GetOutputLatency()",
      "eel": "double GetOutputLatency()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number outputlatency", "description": "output-latency in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetOutputLatency",
        "return_values": [{ "identifier": "outputlatency", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "parent", "track", "folder"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the parent MediaTrack, if a MediaTrack is a track of a foldered track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the MediaTrack in a folder, whose parent MediaTrack you want"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetParentTrack",
    "functioncall": {
      "lua": "MediaTrack parenttrack = reaper.GetParentTrack(MediaTrack track)",
      "cpp": "MediaTrack* GetParentTrack(MediaTrack* track)",
      "python": "MediaTrack RPR_GetParentTrack(MediaTrack track)",
      "eel": "MediaTrack GetParentTrack(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack parenttrack",
          "description": "the returned parent MediaTrack of a foldered MediaTrack"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetParentTrack",
        "return_values": [{ "identifier": "parenttrack", "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string fn", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetPeakFileName",
    "functioncall": {
      "lua": "string buf = reaper.GetPeakFileName(string fn, string buf)",
      "cpp": "void GetPeakFileName(const char* fn, char* buf, int buf_sz)",
      "python": "(String fn, String buf, Int buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)",
      "eel": "GetPeakFileName(\"fn\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetPeakFileName",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string fn", "description": "" },
        {
          "identifier": "string buf",
          "description": "a string-buffer needed by the function, just give \"\" in Lua"
        },
        { "identifier": "boolean forWrite", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetPeakFileNameEx",
    "functioncall": {
      "lua": "string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)",
      "cpp": "void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)",
      "python": "(String fn, String buf, Int buf_sz, Boolean forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)",
      "eel": "GetPeakFileNameEx(\"fn\", #buf, bool forWrite)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "the peak-filename" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "buf", "type": "string" },
          { "identifier": "forWrite", "type": "boolean" }
        ],
        "method_name": "reaper.GetPeakFileNameEx",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string fn", "description": "" },
        {
          "identifier": "string buf",
          "description": "a string-buffer needed by the function, just give \"\" in Lua"
        },
        { "identifier": "boolean forWrite", "description": "" },
        { "identifier": "string peaksfileextension", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetPeakFileNameEx2",
    "functioncall": {
      "lua": "string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)",
      "cpp": "void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)",
      "python": "(String fn, String buf, Int buf_sz, Boolean forWrite, String peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)",
      "eel": "GetPeakFileNameEx2(\"fn\", #buf, bool forWrite, \"peaksfileextension\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "the peak-filename" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "buf", "type": "string" },
          { "identifier": "forWrite", "type": "boolean" },
          { "identifier": "peaksfileextension", "type": "string" }
        ],
        "method_name": "reaper.GetPeakFileNameEx2",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "play", "position", "latency compensated"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns latency-compensated actual-what-you-hear position",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetPlayPosition",
    "functioncall": {
      "lua": "number playposition = reaper.GetPlayPosition()",
      "cpp": "double GetPlayPosition()",
      "python": "Float RPR_GetPlayPosition()",
      "eel": "double GetPlayPosition()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number playposition", "description": "the playposition in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetPlayPosition",
        "return_values": [{ "identifier": "playposition", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "play", "position", "next audio block"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns position of next audio block being processed",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetPlayPosition2",
    "functioncall": {
      "lua": "number playposition = reaper.GetPlayPosition2()",
      "cpp": "double GetPlayPosition2()",
      "python": "Float RPR_GetPlayPosition2()",
      "eel": "double GetPlayPosition2()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number playposition", "description": "the playposition in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetPlayPosition2",
        "return_values": [{ "identifier": "playposition", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "play", "position", "next audio block"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns position of next audio block being processed from a specific project",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetPlayPosition2Ex",
    "functioncall": {
      "lua": "number playposition = reaper.GetPlayPosition2Ex(ReaProject proj)",
      "cpp": "double GetPlayPosition2Ex(ReaProject* proj)",
      "python": "Float RPR_GetPlayPosition2Ex(ReaProject proj)",
      "eel": "double GetPlayPosition2Ex(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number playposition", "description": "the playposition in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetPlayPosition2Ex",
        "return_values": [{ "identifier": "playposition", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "play", "position", "latency compensated"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns latency-compensated actual-what-you-hear position from a specific project",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetPlayPositionEx",
    "functioncall": {
      "lua": "number playposition = reaper.GetPlayPositionEx(ReaProject proj)",
      "cpp": "double GetPlayPositionEx(ReaProject* proj)",
      "python": "Float RPR_GetPlayPositionEx(ReaProject proj)",
      "eel": "double GetPlayPositionEx(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number playposition", "description": "the playposition in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetPlayPositionEx",
        "return_values": [{ "identifier": "playposition", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "play", "state", "rec", "pause", "stop"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns, in which play-state the current project is",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetPlayState",
    "functioncall": {
      "lua": "integer playstate = reaper.GetPlayState()",
      "cpp": "int GetPlayState()",
      "python": "Int RPR_GetPlayState()",
      "eel": "int GetPlayState()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer playstate",
          "description": "Either bitwise: &amp;1=playing,&amp;2=pause,&amp;=4 is recording, or\n0, stop\n1, play\n2, paused play\n5, recording\n6, paused recording"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetPlayState",
        "return_values": [{ "identifier": "playstate", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "stop", "play", "state", "rec", "pause", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns, in which play-state a certain project is",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetPlayStateEx",
    "functioncall": {
      "lua": "integer playstate = reaper.GetPlayStateEx(ReaProject proj)",
      "cpp": "int GetPlayStateEx(ReaProject* proj)",
      "python": "Int RPR_GetPlayStateEx(ReaProject proj)",
      "eel": "int GetPlayStateEx(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer playstate",
          "description": "Either bitwise: &amp;1=playing,&amp;2=pause,&amp;=4 is recording, or\n0, stop\n1, play\n2, paused play\n5, recording\n6, paused recording"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetPlayStateEx",
        "return_values": [{ "identifier": "playstate", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "length", "get", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetProjectLength",
    "functioncall": {
      "lua": "number length = reaper.GetProjectLength(ReaProject proj)",
      "cpp": "double GetProjectLength(ReaProject* proj)",
      "python": "Float RPR_GetProjectLength(ReaProject proj)",
      "eel": "double GetProjectLength(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number length", "description": "the length of the project in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetProjectLength",
        "return_values": [{ "identifier": "length", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "project", "name"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the name of the projectfile.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetProjectName",
    "functioncall": {
      "lua": "string buf = reaper.GetProjectName(ReaProject proj, string buf)",
      "cpp": "void GetProjectName(ReaProject* proj, char* buf, int buf_sz)",
      "python": "(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectName(proj, buf, buf_sz)",
      "eel": "GetProjectName(ReaProject proj, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "a string-buffer needed by the function; just give \"\" in Lua"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetProjectName",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "path", "projectpath"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the path of the project. Will return the defaults project-path's recording-folder, when the project hasn't been saved yet; when the project has been saved, it will return the path to the recording-folder.\n\nIf you need the filename of the path+projectfile itself, use [EnumProjects](#EnumProjects) instead.            ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "a string-buffer needed by the function, just give \"\" in Lua"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetProjectPath",
    "functioncall": {
      "lua": "string buf = reaper.GetProjectPath(string buf)",
      "cpp": "void GetProjectPath(char* buf, int buf_sz)",
      "python": "(String buf, Int buf_sz) = RPR_GetProjectPath(buf, buf_sz)",
      "eel": "GetProjectPath(#buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "the returned path" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "buf", "type": "string" }],
        "method_name": "reaper.GetProjectPath",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "path", "projectpath", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the path of a specific project, usually the recordings-folder.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetProjectPathEx",
    "functioncall": {
      "lua": "string buf = reaper.GetProjectPathEx(ReaProject proj, string buf)",
      "cpp": "void GetProjectPathEx(ReaProject* proj, char* buf, int buf_sz)",
      "python": "(ReaProject proj, String buf, Int buf_sz) = RPR_GetProjectPathEx(proj, buf, buf_sz)",
      "eel": "GetProjectPathEx(ReaProject proj, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "a string-buffer needed by the function, just use \"\" in Lua"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetProjectPathEx",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "state", "changes", "undo"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns an integer that changes when the project state changes, e.g. undoable-actions have been made.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetProjectStateChangeCount",
    "functioncall": {
      "lua": "integer = reaper.GetProjectStateChangeCount(ReaProject proj)",
      "cpp": "int GetProjectStateChangeCount(ReaProject* proj)",
      "python": "Int RPR_GetProjectStateChangeCount(ReaProject proj)",
      "eel": "int GetProjectStateChangeCount(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of changes, since (re-)opening of the project."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetProjectStateChangeCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "project", "time", "offset"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets project time offset in seconds (project settings -> project start time). ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "rndframe",
          "description": "true, the offset is rounded to a multiple of the project frame size; false, no rounding happening"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetProjectTimeOffset",
    "functioncall": {
      "lua": "number = reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)",
      "cpp": "double GetProjectTimeOffset(ReaProject* proj, bool rndframe)",
      "python": "Float RPR_GetProjectTimeOffset(ReaProject proj, Boolean rndframe)",
      "eel": "double GetProjectTimeOffset(ReaProject proj, bool rndframe)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the project-time-offset" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "rndframe", "type": "boolean" }
        ],
        "method_name": "reaper.GetProjectTimeOffset",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetProjectTimeSignature",
    "functioncall": {
      "lua": "number bpm retval, number bpi = reaper.GetProjectTimeSignature()",
      "cpp": "void GetProjectTimeSignature(double* bpmOut, double* bpiOut)",
      "python": "(Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)",
      "eel": "GetProjectTimeSignature(&amp;bpm, &amp;bpi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bpm retval", "description": "" },
        { "identifier": "bpi", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetProjectTimeSignature",
        "return_values": [
          { "identifier": "bpm", "type": "number" },
          { "identifier": "bpi", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetProjectTimeSignature2",
    "functioncall": {
      "lua": "number bpm retval, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)",
      "cpp": "void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)",
      "python": "(ReaProject proj, Float bpmOut, Float bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)",
      "eel": "GetProjectTimeSignature2(ReaProject proj, &amp;bpm, &amp;bpi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bpm retval", "description": "" },
        { "identifier": "bpi", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetProjectTimeSignature2",
        "return_values": [
          { "identifier": "bpm", "type": "number" },
          { "identifier": "bpi", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "extended", "state", "value", "section", "key", "extname", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the value previously associated with this extname and key, the last time the project was saved or the value was changed. See [SetProjExtState](#SetProjExtState), [EnumProjExtState](#EnumProjExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "extname",
          "description": "the section, in which the key requested is stored"
        },
        { "identifier": "key", "description": "the key, in which the requested value is stored" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GetProjExtState",
    "functioncall": {
      "lua": "integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)",
      "cpp": "int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)",
      "python": "(Int retval, ReaProject proj, String extname, String key, String valOutNeedBig, Int valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)",
      "eel": "int GetProjExtState(ReaProject proj, \"extname\", \"key\", #val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "retval",
          "description": "true, if such an extended-state exists; false, if not"
        },
        { "identifier": "val", "description": "the value, as stored in extname->key" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "extname", "type": "string" },
          { "identifier": "key", "type": "string" }
        ],
        "method_name": "reaper.GetProjExtState",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "val", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "get", "resource", "path"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns path where ini files are stored, other things are in subdirectories.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetResourcePath",
    "functioncall": {
      "lua": "string = reaper.GetResourcePath()",
      "cpp": "const char* GetResourcePath()",
      "python": "String RPR_GetResourcePath()",
      "eel": "bool GetResourcePath(#retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the path to the resource-folder" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetResourcePath",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "get", "selected", "envelope"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the currently selected envelope, returns NULL/nil if no envelope is selected",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetSelectedEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetSelectedEnvelope(ReaProject proj)",
      "cpp": "TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)",
      "python": "TrackEnvelope RPR_GetSelectedEnvelope(ReaProject proj)",
      "eel": "TrackEnvelope GetSelectedEnvelope(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope",
          "description": "the TrackEnvelope-object of the selected envelope-lane requested; 0, if no envelope is selected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetSelectedEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "selected", "item", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get a selected item by selected item count (zero-based)\nSee [CountSelectedMediaItems](#CountSelectedMediaItems).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "selitem",
          "description": "the id of the selected MediaItem, as multiple items can be selected. See [CountSelectedMediaItems](#CountSelectedMediaItems)"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetSelectedMediaItem",
    "functioncall": {
      "lua": "MediaItem = reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)",
      "cpp": "MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)",
      "python": "MediaItem RPR_GetSelectedMediaItem(ReaProject proj, Int selitem)",
      "eel": "MediaItem GetSelectedMediaItem(ReaProject proj, int selitem)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem",
          "description": "the requested MediaItem as a MediaItem-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "selitem", "type": "integer" }
        ],
        "method_name": "reaper.GetSelectedMediaItem",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "selected", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a selected track from a project by selected track count (zero-based). \nThis function ignores the master track, see [GetSelectedTrack2](#GetSelectedTrack2) and [CountSelectedTracks](#CountSelectedTracks).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "seltrackidx",
          "description": "the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. "
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetSelectedTrack",
    "functioncall": {
      "lua": "MediaTrack = reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)",
      "cpp": "MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)",
      "python": "MediaTrack RPR_GetSelectedTrack(ReaProject proj, Int seltrackidx)",
      "eel": "MediaTrack GetSelectedTrack(ReaProject proj, int seltrackidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack", "description": "the requested, selected MediaTrack" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "seltrackidx", "type": "integer" }
        ],
        "method_name": "reaper.GetSelectedTrack",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "master", "track", "get", "selected"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "seltrackidx",
          "description": "the idx of within the selected tracks, zero based, as multiple tracks can be selected by the user. "
        },
        {
          "identifier": "wantmaster",
          "description": "true, seltrackidx=0 is the master track, if selected; false, seltrackidx=0 is the first selected normal track"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GetSelectedTrack2",
    "functioncall": {
      "lua": "MediaTrack = reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)",
      "cpp": "MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)",
      "python": "MediaTrack RPR_GetSelectedTrack2(ReaProject proj, Int seltrackidx, Boolean wantmaster)",
      "eel": "MediaTrack GetSelectedTrack2(ReaProject proj, int seltrackidx, bool wantmaster)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack", "description": "the requested, selected MediaTrack" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "seltrackidx", "type": "integer" },
          { "identifier": "wantmaster", "type": "boolean" }
        ],
        "method_name": "reaper.GetSelectedTrack2",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "get", "selected", "envelope"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "GetSelectedTrackEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetSelectedTrackEnvelope(ReaProject proj)",
      "cpp": "TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)",
      "python": "TrackEnvelope RPR_GetSelectedTrackEnvelope(ReaProject proj)",
      "eel": "TrackEnvelope GetSelectedTrackEnvelope(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "TrackEnvelope",
          "description": "the selected TrackEnvelope as an object; nil if no TrackEnvelope is selected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.GetSelectedTrackEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\nIf you want to get the arrangeviewposition by pixels, set isSet=false and pass the pixel-position of the start and endposition to screen_x_start and screen_x_end.\n\nscreen_x_start and screen_x_end will be ignored, when isSet=true",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "boolean isSet",
          "description": "true, set a new arrangeview-time position; false, only get the current arrangeview-time position"
        },
        {
          "identifier": "integer screen_x_start",
          "description": "if isSet=false, this parameter returns the start-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime"
        },
        {
          "identifier": "integer screen_x_end",
          "description": "if isSet=false, this parameter returns the end-time-position at screen-pixel-x position. set this and screen_x_end to 0 for the whole shown arrangeview start/endtime"
        },
        {
          "identifier": "number start_time",
          "description": "if isSet=true, this is the startposition of the arrangeview(the left side) in seconds"
        },
        {
          "identifier": "number end_time",
          "description": "if isSet=true, this is the startposition of the arrangeview(the right side) in seconds"
        }
      ],
      "param_count": 6,
      "markup_type": "markdown"
    },
    "title": "GetSet_ArrangeView2",
    "functioncall": {
      "lua": "number start_time, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end, number start_time, number end_time)",
      "cpp": "void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)",
      "python": "(ReaProject proj, Boolean isSet, Int screen_x_start, Int screen_x_end, Float start_timeOut, Float end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)",
      "eel": "GetSet_ArrangeView2(ReaProject proj, bool isSet, int screen_x_start, int screen_x_end, &amp;start_time, &amp;end_time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number start_time",
          "description": "the startposition of the arrangeview(left side) in seconds"
        },
        {
          "identifier": "number end_time",
          "description": "the startposition of the arrangeview(right side) in seconds"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "isSet", "type": "boolean" },
          { "identifier": "screen_x_start", "type": "integer" },
          { "identifier": "screen_x_end", "type": "integer" },
          { "identifier": "start_time", "type": "number" },
          { "identifier": "end_time", "type": "number" }
        ],
        "method_name": "reaper.GetSet_ArrangeView2",
        "return_values": [
          { "identifier": "start_time", "type": "number" },
          { "identifier": "end_time", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "isSet", "description": "" },
        { "identifier": "isLoop", "description": "" },
        { "identifier": "start", "description": "" },
        { "identifier": "end", "description": "" },
        { "identifier": "allowautoseek", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetSet_LoopTimeRange",
    "functioncall": {
      "lua": "number start retval, number end = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)",
      "cpp": "void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)",
      "python": "(Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)",
      "eel": "GetSet_LoopTimeRange(bool isSet, bool isLoop, &amp;start, &amp;end, bool allowautoseek)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "start retval", "description": "" },
        { "identifier": "end", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "isSet", "type": "boolean" },
          { "identifier": "isLoop", "type": "boolean" },
          { "identifier": "start", "type": "number" },
          { "identifier": "end", "type": "number" },
          { "identifier": "allowautoseek", "type": "boolean" }
        ],
        "method_name": "reaper.GetSet_LoopTimeRange",
        "return_values": [
          { "identifier": "start", "type": "number" },
          { "identifier": "end", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "isSet", "description": "" },
        { "identifier": "isLoop", "description": "" },
        { "identifier": "start", "description": "" },
        { "identifier": "end", "description": "" },
        { "identifier": "allowautoseek", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "markdown"
    },
    "title": "GetSet_LoopTimeRange2",
    "functioncall": {
      "lua": "number start retval, number end = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)",
      "cpp": "void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)",
      "python": "(ReaProject proj, Boolean isSet, Boolean isLoop, Float startOut, Float endOut, Boolean allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)",
      "eel": "GetSet_LoopTimeRange2(ReaProject proj, bool isSet, bool isLoop, &amp;start, &amp;end, bool allowautoseek)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "start retval", "description": "" },
        { "identifier": "end", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "isSet", "type": "boolean" },
          { "identifier": "isLoop", "type": "boolean" },
          { "identifier": "start", "type": "number" },
          { "identifier": "end", "type": "number" },
          { "identifier": "allowautoseek", "type": "boolean" }
        ],
        "method_name": "reaper.GetSet_LoopTimeRange2",
        "return_values": [
          { "identifier": "start", "type": "number" },
          { "identifier": "end", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.01" },
    "chapers": ["Automation Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "env", "description": "" },
        { "identifier": "autoitem_idx", "description": "" },
        { "identifier": "desc", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "is_set", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetSetAutomationItemInfo",
    "functioncall": {
      "lua": "number = reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)",
      "cpp": "double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)",
      "python": "Float RPR_GetSetAutomationItemInfo(TrackEnvelope env, Int autoitem_idx, String desc, Float value, Boolean is_set)",
      "eel": "double GetSetAutomationItemInfo(TrackEnvelope env, int autoitem_idx, \"desc\", value, bool is_set)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "desc", "type": "string" },
          { "identifier": "value", "type": "number" },
          { "identifier": "is_set", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetAutomationItemInfo",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Automation Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\n\nP_POOL_NAME : char *, name of the underlying automation item pool\nP_POOL_EXT:xyz : char *, extension-specific persistent data",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope env", "description": "" },
        { "identifier": "integer autoitem_idx", "description": "" },
        { "identifier": "string desc", "description": "" },
        { "identifier": "string valuestrNeedBig", "description": "" },
        { "identifier": "boolean is_set", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetSetAutomationItemInfo_String",
    "functioncall": {
      "lua": "boolean retval, string valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(TrackEnvelope env, integer autoitem_idx, string desc, string valuestrNeedBig, boolean is_set)",
      "cpp": "bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)",
      "python": "(Boolean retval, TrackEnvelope env, Int autoitem_idx, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)",
      "eel": "bool GetSetAutomationItemInfo_String(TrackEnvelope env, int autoitem_idx, \"desc\", #valuestrNeedBig, bool is_set)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string valuestrNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "desc", "type": "string" },
          { "identifier": "valuestrNeedBig", "type": "string" },
          { "identifier": "is_set", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetAutomationItemInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "valuestrNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "TrackEnvelope env", "description": "" },
        { "identifier": "string parmname", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" },
        { "identifier": "boolean setNewValue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetEnvelopeInfo_String",
    "functioncall": {
      "lua": "boolean retval, string stringNeedBig = reaper.GetSetEnvelopeInfo_String(TrackEnvelope env, string parmname, string stringNeedBig, boolean setNewValue)",
      "cpp": "bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)",
      "python": "(Boolean retval, TrackEnvelope env, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)",
      "eel": "bool GetSetEnvelopeInfo_String(TrackEnvelope env, \"parmname\", #stringNeedBig, bool setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "stringNeedBig", "type": "string" },
          { "identifier": "setNewValue", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetEnvelopeInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "stringNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetEnvelopeStateChunk](#SetEnvelopeStateChunk), [GetEnvelopeStateChunk](#GetEnvelopeStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "env", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetSetEnvelopeState",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)",
      "cpp": "bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)",
      "python": "(Boolean retval, TrackEnvelope env, String str, Int str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)",
      "eel": "bool GetSetEnvelopeState(TrackEnvelope env, #str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "str", "type": "string" }
        ],
        "method_name": "reaper.GetSetEnvelopeState",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetEnvelopeStateChunk](#SetEnvelopeStateChunk), [GetEnvelopeStateChunk](#GetEnvelopeStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "env", "description": "" },
        { "identifier": "isundo", "description": "" },
        { "identifier": "isundo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetEnvelopeState2",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)",
      "cpp": "bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)",
      "python": "(Boolean retval, TrackEnvelope env, String str, Int str_sz, Boolean isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)",
      "eel": "bool GetSetEnvelopeState2(TrackEnvelope env, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetEnvelopeState2",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetItemStateChunk](#SetItemStateChunk), [GetItemStateChunk](#GetItemStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetSetItemState",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)",
      "cpp": "bool GetSetItemState(MediaItem* item, char* str, int str_sz)",
      "python": "(Boolean retval, MediaItem item, String str, Int str_sz) = RPR_GetSetItemState(item, str, str_sz)",
      "eel": "bool GetSetItemState(MediaItem item, #str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "str", "type": "string" }
        ],
        "method_name": "reaper.GetSetItemState",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetItemStateChunk](#SetItemStateChunk), [GetItemStateChunk](#GetItemStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "isundo", "description": "" },
        { "identifier": "isundo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetItemState2",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)",
      "cpp": "bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)",
      "python": "(Boolean retval, MediaItem item, String str, Int str_sz, Boolean isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)",
      "eel": "bool GetSetItemState2(MediaItem item, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetItemState2",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets/sets an item attribute string:\n    P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\n    P_EXT:xyz : char * : extension-specific persistent data\n    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "" },
        { "identifier": "string parmname", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" },
        { "identifier": "boolean setNewValue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaItemInfo_String",
    "functioncall": {
      "lua": "boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)",
      "cpp": "bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)",
      "python": "(Boolean retval, MediaItem item, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)",
      "eel": "bool GetSetMediaItemInfo_String(MediaItem item, \"parmname\", #stringNeedBig, bool setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "stringNeedBig", "type": "string" },
          { "identifier": "setNewValue", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetMediaItemInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "stringNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets/sets a take attribute string:\n    P_NAME : char * : take name\n    P_EXT:xyz : char * : extension-specific persistent data\n    GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take tk", "description": "" },
        { "identifier": "string parmname", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" },
        { "identifier": "boolean setnewvalue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaItemTakeInfo_String",
    "functioncall": {
      "lua": "boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setnewvalue)",
      "cpp": "bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setnewvalue)",
      "python": "(Boolean retval, MediaItem_Take tk, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setnewvalue)",
      "eel": "bool GetSetMediaItemTakeInfo_String(MediaItem_Take tk, \"parmname\", #stringNeedBig, bool setnewvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tk", "type": "MediaItem_Take" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "stringNeedBig", "type": "string" },
          { "identifier": "setnewvalue", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetMediaItemTakeInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "stringNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_MCP_LAYOUT : const char * : layout name\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack tr", "description": "" },
        { "identifier": "string parmname", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" },
        { "identifier": "boolean setnewvalue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaTrackInfo_String",
    "functioncall": {
      "lua": "boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setnewvalue)",
      "cpp": "bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setnewvalue)",
      "python": "(Boolean retval, MediaTrack tr, String parmname, String stringNeedBig, Boolean setnewvalue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setnewvalue)",
      "eel": "bool GetSetMediaTrackInfo_String(MediaTrack tr, \"parmname\", #stringNeedBig, bool setnewvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean  retval", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "stringNeedBig", "type": "string" },
          { "identifier": "setnewvalue", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetMediaTrackInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "stringNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "project", "author", "get", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets or sets project author, author_sz is ignored when setting",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "set",
          "description": "true, set new author; false, get current project's author"
        },
        {
          "identifier": "author",
          "description": "the new project author, when set is true. When set is false, author will be ignored."
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GetSetProjectAuthor",
    "functioncall": {
      "lua": "string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)",
      "cpp": "void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)",
      "python": "(ReaProject proj, Boolean set, String author, Int author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)",
      "eel": "GetSetProjectAuthor(ReaProject proj, bool set, #author)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "author", "description": "the (new) project's author" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "set", "type": "boolean" },
          { "identifier": "author", "type": "string" }
        ],
        "method_name": "reaper.GetSetProjectAuthor",
        "return_values": [{ "identifier": "author", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "set", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetSetProjectGrid",
    "functioncall": {
      "lua": "integer retval, optional number divisionIn, optional number swingmodeIn, optional number swingamtIn = reaper.GetSetProjectGrid(ReaProject project, boolean set)",
      "cpp": "int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)",
      "python": "(Int retval, ReaProject project, Boolean set, Float divisionInOutOptional, Int swingmodeInOutOptional, Float swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)",
      "eel": "int GetSetProjectGrid(ReaProject project, bool set, optional &amp;divisionIn, optional int &amp;swingmodeIn, optional &amp;swingamtIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "divisionIn", "description": "" },
        { "identifier": "swingmodeIn", "description": "" },
        { "identifier": "swingamtIn", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "set", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetProjectGrid",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.11" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get or set project information.\n \nRENDER_SETTINGS : &amp;(1|2)=0:master mix, &amp;1=stems+master mix, &amp;2=stems only, &amp;4=multichannel tracks to multichannel files, &amp;8=use render matrix, &amp;16=tracks with only mono media to mono files, &amp;32=selected media items, &amp;64=selected media items via master, &amp; 128=Selected tracks via master, &amp;256=Stretch markers/transient guide-checkbox(Only with WAV/AIFF and Source=Selected media items/Selected media items via master), &amp;512=Embed Metadata, if format supports is, &amp;1024=Take markers-checkbox(Only with WAV and Source=Selected media items/Selected media items via master)\nOGG, OPUS and FLAC support embedding of tempoinformation via metadata, settable using [GetSetProjectInfo\\_String](#GetSetProjectInfo_String).\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &amp;1=custom time bounds, &amp;2=entire project, &amp;4=time selection, &amp;8=all project regions, &amp;16=selected media items, &amp;32=selected project regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &amp;1=add rendered files to project, &amp;2=Do not render files that are likely silent\nRENDER_DITHER : &amp;1=dither, &amp;2=noise shaping, &amp;4=dither stems, &amp;8=noise shaping on stems\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project, whos project settings you want to get/set; 0, for the current project"
        },
        {
          "identifier": "string desc",
          "description": "the attribute you want to get/set, like RENDER_CHANNELS, PROJECT_SRATE, RENDER_SETTINGS, etc"
        },
        {
          "identifier": "number value",
          "description": "if is_set==true, this is the new value to set; if is_set==false, set this to 0"
        },
        {
          "identifier": "boolean is_set",
          "description": "true, set a new value; false, get the current value"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetProjectInfo",
    "functioncall": {
      "lua": "number value = reaper.GetSetProjectInfo(ReaProject project, string desc, number value, boolean is_set)",
      "cpp": "double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)",
      "python": "Float RPR_GetSetProjectInfo(ReaProject project, String desc, Float value, Boolean is_set)",
      "eel": "double GetSetProjectInfo(ReaProject project, \"desc\", value, bool is_set)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number value",
          "description": "the new/current value set with this attribute"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "desc", "type": "string" },
          { "identifier": "value", "type": "number" },
          { "identifier": "is_set", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetProjectInfo",
        "return_values": [{ "identifier": "value", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.10" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get or set project information.\n\nMARKER\\_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number\nRECORD\\_PATH: recording directory -- may be blank or a relative path, to get the effective path see [GetProjectPathEx](#GetProjectPathEx)\nRENDER\\_FILE: render directory\nRENDER\\_PATTERN: render file name (may contain wildcards)\n\t\t\tRENDER\\_TARGETS: semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER\\_FORMAT: base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), to use default settings for that sink type.\nRENDER\\_FORMAT2: base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type, or \"\" to disable secondary render.\nsee [render-code-documentation](render-codes-decoded-base64-strings.txt) for how the unencoded RENDER\\_FORMAT-string is structured.\n\nTo just use the 4-byte-string, you can use: \n\"evaw\" for wave, \"ffia\" for aiff, \" osi\" for audio-cd, \" pdd\" for ddp, \"calf\" for flac, \"l3pm\" for mp3, \"vggo\" for ogg, \"SggO\" for Opus, \"PMFF\" for FFMpeg-video, \"FVAX\" for MP4Video/Audio on Mac, \" FIG\" for Gif, \" FCL\" for LCF, \"kpvw\" for wavepack            \n\nRENDER\\_METADATA: get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: Uses common ID3-tagcodes like TALB(album), TPE1(Artist), etc. \n\t\t\tTo get album tag, use \"ID3:TALB\", to set album tag, use \"ID3:TALB|my album name\".\n\nExamples in Lua:\ngetting the album name from the metadata of the current project:\n\n     retval, albumname    = reaper.GetSetProjectInfo\\_String(0, \"RENDER\\_METADATA\", \"ID3:TALB\", false)\n    \nsetting the album name in the metadata of the current project:\n\n     retval, albumame\\_new = reaper.GetSetProjectInfo\\_String(0, \"RENDER\\_METADATA\", \"ID3:TALB|New album name\", true)\n\n\t\t\tSupported tags-codes are: TIT2(Title), TPE1(Artist), TPE2(Albumartist), TALB(Album), TRCK(Track), TCON(Genre), TYER(Year), TDRC(Recording time: YYYY-MM-DD), TKEY(Key), TBPM(Tempo), TSRC(International Standard Recording Code), COMM(Comment), COMM\\_LANG(Comment language), APIC\\_TYPE(Image type), APIC\\_DESC(Image description), APIC\\_FILE(Image file)\n\t\t\tAPIC\\_TYPE can have be of the following:\n0: Other\n1: 32x32 pixel file icon (PNG only)\n2: Other file icon\n3: Cover (front)\n4: Cover (back)\n5: Leaflet page\n6: Media\n7: Lead artist/Lead Performer/Solo\n8: Artist/Performer\n9: Conductor\n10: Band/Orchestra\n11: Composer\n12: Lyricist/Text writer\n13: Recording location\n14: During recording\n15: During performance\n16: Movie/video screen capture\n17: A bright colored fish\n18: Illustration\n19: Band/Artist logotype\n20: Publisher/Studiotype",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject project",
          "description": "the project, whose setting you want to get or set"
        },
        {
          "identifier": "string desc",
          "description": "the setting, that you want to get/set; refer description for available ones"
        },
        {
          "identifier": "string valuestrNeedBig",
          "description": "if is_set==true, this is the new value to set"
        },
        {
          "identifier": "boolean is_set",
          "description": "true, set a new value; false, just get the current one"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetProjectInfo_String",
    "functioncall": {
      "lua": "boolean retval, string valuestrNeedBig = reaper.GetSetProjectInfo_String(ReaProject project, string desc, string valuestrNeedBig, boolean is_set)",
      "cpp": "bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)",
      "python": "(Boolean retval, ReaProject project, String desc, String valuestrNeedBig, Boolean is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)",
      "eel": "bool GetSetProjectInfo_String(ReaProject project, \"desc\", #valuestrNeedBig, bool is_set)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, value can be set/get; false, value can't be set/get"
        },
        {
          "identifier": "string valuestrNeedBig",
          "description": "the current value for this project-setting"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "desc", "type": "string" },
          { "identifier": "valuestrNeedBig", "type": "string" },
          { "identifier": "is_set", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetProjectInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "valuestrNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "set", "project", "notes"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "set",
          "description": "true, set the project's notes; false, get the project's notes"
        },
        { "identifier": "notes", "description": "the new project's notes, when set is set to true" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GetSetProjectNotes",
    "functioncall": {
      "lua": "string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)",
      "cpp": "void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)",
      "python": "(ReaProject proj, Boolean set, String notesNeedBig, Int notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)",
      "eel": "GetSetProjectNotes(ReaProject proj, bool set, #notes)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "notes", "description": "the notes stored in the project's notes." }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "set", "type": "boolean" },
          { "identifier": "notes", "type": "string" }
        ],
        "method_name": "reaper.GetSetProjectNotes",
        "return_values": [{ "identifier": "notes", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "set", "repeat"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets or gets repeat-state of the current project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "val",
          "description": "-1, query repeat-state\n0, clear repeat state\n1, set repeat to repeat\n2 and higher, toggle repeat state"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetSetRepeat",
    "functioncall": {
      "lua": "integer = reaper.GetSetRepeat(integer val)",
      "cpp": "int GetSetRepeat(int val)",
      "python": "Int RPR_GetSetRepeat(Int val)",
      "eel": "int GetSetRepeat(int val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "new/current repeat state; 0, repeat is off; 1, repeat is on"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "val", "type": "integer" }],
        "method_name": "reaper.GetSetRepeat",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "set", "repeat"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets or gets repeat-state in a specific project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "val",
          "description": "-1, query repeat-state\n0, clear repeat state\n1, set repeat to repeat\n2 and higher, toggle repeat state"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetSetRepeatEx",
    "functioncall": {
      "lua": "integer = reaper.GetSetRepeatEx(ReaProject proj, integer val)",
      "cpp": "int GetSetRepeatEx(ReaProject* proj, int val)",
      "python": "Int RPR_GetSetRepeatEx(ReaProject proj, Int val)",
      "eel": "int GetSetRepeatEx(ReaProject proj, int val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "new/current repeat state; 0, repeat is off; 1, repeat is on"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "val", "type": "integer" }
        ],
        "method_name": "reaper.GetSetRepeatEx",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.12" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "groupname", "description": "" },
        { "identifier": "setmask", "description": "" },
        { "identifier": "setvalue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackGroupMembership",
    "functioncall": {
      "lua": "integer = reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)",
      "cpp": "unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)",
      "python": "Int RPR_GetSetTrackGroupMembership(MediaTrack tr, String groupname, Int setmask, Int setvalue)",
      "eel": "uint GetSetTrackGroupMembership(MediaTrack tr, \"groupname\", uint setmask, uint setvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "groupname", "type": "string" },
          { "identifier": "setmask", "type": "integer" },
          { "identifier": "setvalue", "type": "integer" }
        ],
        "method_name": "reaper.GetSetTrackGroupMembership",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetTrackStateChunk](#SetTrackStateChunk), [GetTrackStateChunk](#GetTrackStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackState",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)",
      "cpp": "bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)",
      "python": "(Boolean retval, MediaTrack track, String str, Int str_sz) = RPR_GetSetTrackState(track, str, str_sz)",
      "eel": "bool GetSetTrackState(MediaTrack track, #str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "str", "type": "string" }
        ],
        "method_name": "reaper.GetSetTrackState",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "deprecated -- see [SetTrackStateChunk](#SetTrackStateChunk), [GetTrackStateChunk](#GetTrackStateChunk)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "str", "description": "" },
        { "identifier": "isundo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackState2",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)",
      "cpp": "bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)",
      "python": "(Boolean retval, MediaTrack track, String str, Int str_sz, Boolean isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)",
      "eel": "bool GetSetTrackState2(MediaTrack track, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetTrackState2",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetSubProjectFromSource",
    "functioncall": {
      "lua": "ReaProject = reaper.GetSubProjectFromSource(PCM_source src)",
      "cpp": "ReaProject* GetSubProjectFromSource(PCM_source* src)",
      "python": "ReaProject RPR_GetSubProjectFromSource(PCM_source src)",
      "eel": "ReaProject GetSubProjectFromSource(PCM_source src)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "src", "type": "PCM_source" }],
        "method_name": "reaper.GetSubProjectFromSource",
        "return_values": [{ "type": "ReaProject" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "take", "idx", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get a take from an item by take count (zero-based)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "the MediaItem, whose take you want to request" },
        { "identifier": "takeidx", "description": "the index of the takes in a MediaItem" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTake",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.GetTake(MediaItem item, integer takeidx)",
      "cpp": "MediaItem_Take* GetTake(MediaItem* item, int takeidx)",
      "python": "MediaItem_Take RPR_GetTake(MediaItem item, Int takeidx)",
      "eel": "MediaItem_Take GetTake(MediaItem item, int takeidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take", "description": "the requested MediaItem_Take" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "takeidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTake",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "envidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTakeEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)",
      "cpp": "TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)",
      "python": "TrackEnvelope RPR_GetTakeEnvelope(MediaItem_Take take, Int envidx)",
      "eel": "TrackEnvelope GetTakeEnvelope(MediaItem_Take take, int envidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "envidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTakeEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "envname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTakeEnvelopeByName",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)",
      "cpp": "TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)",
      "python": "TrackEnvelope RPR_GetTakeEnvelopeByName(MediaItem_Take take, String envname)",
      "eel": "TrackEnvelope GetTakeEnvelopeByName(MediaItem_Take take, \"envname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "envname", "type": "string" }
        ],
        "method_name": "reaper.GetTakeEnvelopeByName",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.09" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "get", "takemarker"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist.\n\t\t\t\nSee [GetNumTakeMarkers](#GetNumTakeMarkers)), [DeleteTakeMarker](#DeleteTakeMarker) and [SetTakeMarker](#SetTakeMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the take, whose take-marker you want to get"
        },
        {
          "identifier": "integer idx",
          "description": "the id of the marker within the take, 0 for the first, 1 for the second, etc."
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetTakeMarker",
    "functioncall": {
      "lua": "number position, string name, optional number color = reaper.GetTakeMarker(MediaItem_Take take, integer idx)",
      "cpp": "double position = GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional)",
      "python": "(Float position, MediaItem_Take take, Int idx, String nameOut, Int nameOut_sz, Int colorOutOptional) = RPR_GetTakeMarker(take, idx, nameOut, nameOut_sz, colorOutOptional))",
      "eel": "double position = GetTakeMarker(MediaItem_Take take, int idx, #name, optional int &color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number position",
          "description": "the position of the takemarker within the take in seconds"
        },
        { "identifier": "string name", "description": "the name of the takemarker" },
        { "identifier": "optional number color", "description": "the color of the takemarker" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.GetTakeMarker",
        "return_values": [
          { "identifier": "position", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "filename", "media", "take", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Retruns the filename of the mediafile in a take. returns NULL if the take is not valid",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "take",
          "description": "the MediaItem_Take, whose mediafilename you want to have"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTakeName",
    "functioncall": {
      "lua": "string = reaper.GetTakeName(MediaItem_Take take)",
      "cpp": "const char* GetTakeName(MediaItem_Take* take)",
      "python": "String RPR_GetTakeName(MediaItem_Take take)",
      "eel": "bool GetTakeName(#retval, MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "the filename of the mediafile in the take" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetTakeName",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns number of stretch markers in take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTakeNumStretchMarkers",
    "functioncall": {
      "lua": "integer = reaper.GetTakeNumStretchMarkers(MediaItem_Take take)",
      "cpp": "int GetTakeNumStretchMarkers(MediaItem_Take* take)",
      "python": "Int RPR_GetTakeNumStretchMarkers(MediaItem_Take take)",
      "eel": "int GetTakeNumStretchMarkers(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.GetTakeNumStretchMarkers",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets information on a stretch marker, idx is 0..n. Returns false if stretch marker not valid. \nposOut will be set to position in item, srcposOutOptional will be set to source media position. \nReturns index. if input index is -1, next marker is found using position (or source position if position is -1). \nIf position/source position are used to find marker position, their values are not updated.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTakeStretchMarker",
    "functioncall": {
      "lua": "integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)",
      "cpp": "int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)",
      "python": "(Int retval, MediaItem_Take take, Int idx, Float posOut, Float srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)",
      "eel": "int GetTakeStretchMarker(MediaItem_Take take, int idx, &amp;pos, optional &amp;srcpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "pos", "description": "" },
        { "identifier": "srcpos", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.GetTakeStretchMarker",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [SetTakeStretchMarkerSlope](#SetTakeStretchMarkerSlope)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTakeStretchMarkerSlope",
    "functioncall": {
      "lua": "number = reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)",
      "cpp": "double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)",
      "python": "Float RPR_GetTakeStretchMarkerSlope(MediaItem_Take take, Int idx)",
      "eel": "double GetTakeStretchMarkerSlope(MediaItem_Take take, int idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.GetTakeStretchMarkerSlope",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get information about a specific FX parameter knob (see [CountTCPFXParms](#CountTCPFXParms)).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "track", "description": "" },
        { "identifier": "index", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GetTCPFXParm",
    "functioncall": {
      "lua": "boolean retval, number fxindex, number parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)",
      "cpp": "bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)",
      "python": "(Boolean retval, ReaProject project, MediaTrack track, Int index, Int fxindexOut, Int parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)",
      "eel": "bool GetTCPFXParm(ReaProject project, MediaTrack track, int index, int &amp;fxindex, int &amp;parmidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "fxindex", "description": "" },
        { "identifier": "parmidx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.GetTCPFXParm",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "fxindex", "type": "number" },
          { "identifier": "parmidx", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source", "description": "" },
        { "identifier": "srcscale", "description": "" },
        { "identifier": "position", "description": "" },
        { "identifier": "mult", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetTempoMatchPlayRate",
    "functioncall": {
      "lua": "boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)",
      "cpp": "bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)",
      "python": "(Boolean retval, PCM_source source, Float srcscale, Float position, Float mult, Float rateOut, Float targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)",
      "eel": "bool GetTempoMatchPlayRate(PCM_source source, srcscale, position, mult, &amp;rate, &amp;targetlen)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "rate", "description": "" },
        { "identifier": "targetlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source", "type": "PCM_source" },
          { "identifier": "srcscale", "type": "number" },
          { "identifier": "position", "type": "number" },
          { "identifier": "mult", "type": "number" }
        ],
        "method_name": "reaper.GetTempoMatchPlayRate",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "rate", "type": "number" },
          { "identifier": "targetlen", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get information about a tempo/time signature marker. See [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [SetTempoTimeSigMarker](#SetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "ptidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetTempoTimeSigMarker",
    "functioncall": {
      "lua": "boolean retval, number timepos, number measurepos, number beatpos, number bpm, number timesig_num, number timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)",
      "cpp": "bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)",
      "python": "(Boolean retval, ReaProject proj, Int ptidx, Float timeposOut, Int measureposOut, Float beatposOut, Float bpmOut, Int timesig_numOut, Int timesig_denomOut, Boolean lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)",
      "eel": "bool GetTempoTimeSigMarker(ReaProject proj, int ptidx, &amp;timepos, int &amp;measurepos, &amp;beatpos, &amp;bpm, int &amp;timesig_num, int &amp;timesig_denom, bool &amp;lineartempo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "timepos", "description": "" },
        { "identifier": "measurepos", "description": "" },
        { "identifier": "beatpos", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "timesig_num", "description": "" },
        { "identifier": "timesig_denom", "description": "" },
        { "identifier": "lineartempo", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "ptidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTempoTimeSigMarker",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "timepos", "type": "number" },
          { "identifier": "measurepos", "type": "number" },
          { "identifier": "beatpos", "type": "number" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "timesig_num", "type": "number" },
          { "identifier": "timesig_denom", "type": "number" },
          { "identifier": "lineartempo", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Theme management"],
    "tags": ["theme", "get", "theme", "color"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See [SetThemeColor](#SetThemeColor) for a list of valid ini_key.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string ini_key", "description": "" },
        { "identifier": "integer flags", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetThemeColor",
    "functioncall": {
      "lua": "integer retval = reaper.GetThemeColor(string ini_key, integer flags)",
      "cpp": "int GetThemeColor(const char* ini_key, int flagsOptional)",
      "python": "Int RPR_GetThemeColor(String ini_key, Int flagsOptional)",
      "eel": "int GetThemeColor(\"ini_key\", int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "ini_key", "type": "string" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.GetThemeColor",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "toggle", "get", "command", "state"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return toggle-state of an action. See [GetToggleCommandStateEx](#GetToggleCommandStateEx).\nSee [NamedCommandLookup](#NamedCommandLookup)() for the correct command_id.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "command_id",
          "description": "the command_id, whose toggle-state you want to know."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetToggleCommandState",
    "functioncall": {
      "lua": "integer = reaper.GetToggleCommandState(integer command_id)",
      "cpp": "int GetToggleCommandState(int command_id)",
      "python": "Int RPR_GetToggleCommandState(Int command_id)",
      "eel": "int GetToggleCommandState(int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "toggle-state \n0, off\n1, on\n-1, NA because the action does not have on/off states."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "command_id", "type": "integer" }],
        "method_name": "reaper.GetToggleCommandState",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "toggle", "get", "command", "state", "section"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return toggle-state of an action.\nFor the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. For the MIDI editor, the action state for the most recently focused window will be returned.\nSee [NamedCommandLookup](#NamedCommandLookup)() for the correct command_id.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section_id",
          "description": "the section, in which the action lies\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "command_id",
          "description": "the command_id, whose toggle-state you want to know."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetToggleCommandStateEx",
    "functioncall": {
      "lua": "integer = reaper.GetToggleCommandStateEx(integer section_id, integer command_id)",
      "cpp": "int GetToggleCommandStateEx(int section_id, int command_id)",
      "python": "Int RPR_GetToggleCommandStateEx(Int section_id, Int command_id)",
      "eel": "int GetToggleCommandStateEx(int section_id, int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "toggle-state \n0, off\n1, on\n-1, NA because the action does not have on/off states."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section_id", "type": "integer" },
          { "identifier": "command_id", "type": "integer" }
        ],
        "method_name": "reaper.GetToggleCommandStateEx",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "hwnd", "tooltip", "window", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetTooltipWindow",
    "functioncall": {
      "lua": "HWND = reaper.GetTooltipWindow()",
      "cpp": "HWND GetTooltipWindow()",
      "python": "HWND RPR_GetTooltipWindow()",
      "eel": "HWND GetTooltipWindow()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "the tooltip-window" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetTooltipWindow",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get a track from a project by track count (zero-based) (proj=0 for active project)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "trackidx",
          "description": "the tracknumber; 0 for the first track, 1 for the second track, etc."
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetTrack",
    "functioncall": {
      "lua": "MediaTrack = reaper.GetTrack(ReaProject proj, integer trackidx)",
      "cpp": "MediaTrack* GetTrack(ReaProject* proj, int trackidx)",
      "python": "MediaTrack RPR_GetTrack(ReaProject proj, Int trackidx)",
      "eel": "MediaTrack GetTrack(ReaProject proj, int trackidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack", "description": "the requested MediaTrack as an object" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "trackidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTrack",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "return the track mode, regardless of global override",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "tr", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackAutomationMode",
    "functioncall": {
      "lua": "integer = reaper.GetTrackAutomationMode(MediaTrack tr)",
      "cpp": "int GetTrackAutomationMode(MediaTrack* tr)",
      "python": "Int RPR_GetTrackAutomationMode(MediaTrack tr)",
      "eel": "int GetTrackAutomationMode(MediaTrack tr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tr", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackAutomationMode",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "color", "track", "dependent"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the track custom color as OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). Black is returned as 0x01000000, no color setting is returned as 0.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "the MediaTrack, whose color you want to request" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackColor",
    "functioncall": {
      "lua": "integer = reaper.GetTrackColor(MediaTrack track)",
      "cpp": "int GetTrackColor(MediaTrack* track)",
      "python": "Int RPR_GetTrackColor(MediaTrack track)",
      "eel": "int GetTrackColor(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the os-dependent color" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackColor",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "track", "depth", "folder", "depth"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the depth of a track within a folder structure",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack whose position in the track-folder-structure you want to request"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackDepth",
    "functioncall": {
      "lua": "integer = reaper.GetTrackDepth(MediaTrack track)",
      "cpp": "int GetTrackDepth(MediaTrack* track)",
      "python": "Int RPR_GetTrackDepth(MediaTrack track)",
      "eel": "int GetTrackDepth(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the position in the track-folder-structure; 0 for the highest level or unfoldered tracks"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackDepth",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "envidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetTrackEnvelope(MediaTrack track, integer envidx)",
      "cpp": "TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)",
      "python": "TrackEnvelope RPR_GetTrackEnvelope(MediaTrack track, Int envidx)",
      "eel": "TrackEnvelope GetTrackEnvelope(MediaTrack track, int envidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "envidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets a built-in track envelope by configuration chunk name, e.g. \"&lt;VOLENV\".",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "cfgchunkname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackEnvelopeByChunkName",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname)",
      "cpp": "TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname)",
      "python": "TrackEnvelope RPR_GetTrackEnvelopeByChunkName(MediaTrack tr, String cfgchunkname)",
      "eel": "TrackEnvelope GetTrackEnvelopeByChunkName(MediaTrack tr, \"cfgchunkname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "cfgchunkname", "type": "string" }
        ],
        "method_name": "reaper.GetTrackEnvelopeByChunkName",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "envname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackEnvelopeByName",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)",
      "cpp": "TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)",
      "python": "TrackEnvelope RPR_GetTrackEnvelopeByName(MediaTrack track, String envname)",
      "eel": "TrackEnvelope GetTrackEnvelopeByName(MediaTrack track, \"envname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "envname", "type": "string" }
        ],
        "method_name": "reaper.GetTrackEnvelopeByName",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX.\n\nNote: You can not get the track at screen-coordinates, where it is hidden by other windows.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer screen_x",
          "description": "the x-position in pixels, from which you want to get the underlying track"
        },
        {
          "identifier": "integer screen_y",
          "description": "the y-position in pixels, from which you want to get the underlying track"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackFromPoint",
    "functioncall": {
      "lua": "MediaTrack retval, optional number info = reaper.GetTrackFromPoint(integer screen_x, integer screen_y)",
      "cpp": "MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)",
      "python": "(MediaTrack retval, Int screen_x, Int screen_y, Int infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)",
      "eel": "MediaTrack GetTrackFromPoint(int screen_x, int screen_y, optional int &info)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack retval",
          "description": "the MediaTrack at position; if the position is above a window associated with the track, this holds the track, where retval info will hold additional information"
        },
        {
          "identifier": "optional number info",
          "description": "additional information, if the position is above a windows associated with a track\n1, if it is likely an envelope\n2, if it is likely a track FX"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "screen_x", "type": "integer" },
          { "identifier": "screen_y", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackFromPoint",
        "return_values": [
          { "identifier": "retval", "type": "MediaTrack" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "tr", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackGUID",
    "functioncall": {
      "lua": "string GUID = reaper.GetTrackGUID(MediaTrack tr)",
      "cpp": "GUID* GetTrackGUID(MediaTrack* tr)",
      "python": "GUID RPR_GetTrackGUID(MediaTrack tr)",
      "eel": "bool GetTrackGUID(#retguid, MediaTrack tr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "GUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tr", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackGUID",
        "return_values": [{ "identifier": "GUID", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "itemidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackMediaItem",
    "functioncall": {
      "lua": "MediaItem = reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)",
      "cpp": "MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)",
      "python": "MediaItem RPR_GetTrackMediaItem(MediaTrack tr, Int itemidx)",
      "eel": "MediaItem GetTrackMediaItem(MediaTrack tr, int itemidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "itemidx", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackMediaItem",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&amp;1: double tabs at the end of each measure and triple tabs when skipping measures, flag&amp;2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1   \"). See [SetTrackMIDILyrics](#SetTrackMIDILyrics)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "flag", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackMIDILyrics",
    "functioncall": {
      "lua": "boolean retval, string bufWant = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag, string bufWant)",
      "cpp": "bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufWantNeedBig, int* bufWantNeedBig_sz)",
      "python": "(Boolean retval, MediaTrack track, Int flag, String bufWantNeedBig, Int bufWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufWantNeedBig, bufWantNeedBig_sz)",
      "eel": "bool GetTrackMIDILyrics(MediaTrack track, int flag, #bufWant)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "bufWantNeedBig_sz", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "flag", "type": "integer" },
          { "identifier": "bufWant", "type": "string" }
        ],
        "method_name": "reaper.GetTrackMIDILyrics",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "bufWant", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "see [GetTrackMIDINoteNameEx](#GetTrackMIDINoteNameEx)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "chan", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetTrackMIDINoteName",
    "functioncall": {
      "lua": "string = reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)",
      "cpp": "const char* GetTrackMIDINoteName(int track, int pitch, int chan)",
      "python": "String RPR_GetTrackMIDINoteName(Int track, Int pitch, Int chan)",
      "eel": "bool GetTrackMIDINoteName(#retval, int track, int pitch, int chan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "integer" },
          { "identifier": "pitch", "type": "integer" },
          { "identifier": "chan", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackMIDINoteName",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.92" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See [SetTrackMIDINoteNameEx](#SetTrackMIDINoteNameEx)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "track", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "chan", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "GetTrackMIDINoteNameEx",
    "functioncall": {
      "lua": "string = reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)",
      "cpp": "const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)",
      "python": "String RPR_GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan)",
      "eel": "bool GetTrackMIDINoteNameEx(#retval, ReaProject proj, MediaTrack track, int pitch, int chan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "pitch", "type": "integer" },
          { "identifier": "chan", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackMIDINoteNameEx",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "track", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetTrackMIDINoteRange",
    "functioncall": {
      "lua": "number note_lo retval, number note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)",
      "cpp": "void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)",
      "python": "(ReaProject proj, MediaTrack track, Int note_loOut, Int note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)",
      "eel": "GetTrackMIDINoteRange(ReaProject proj, MediaTrack track, int &amp;note_lo, int &amp;note_hi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "note_lo retval", "description": "" },
        { "identifier": "note_hi", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.GetTrackMIDINoteRange",
        "return_values": [
          { "identifier": "note_lo", "type": "number" },
          { "identifier": "note_hi", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.974" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "name"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "the MediaTrack, whose name you want to know" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.GetTrackName(MediaTrack track)",
      "cpp": "bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)",
      "python": "(Boolean retval, MediaTrack track, String bufOut, Int bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)",
      "eel": "bool GetTrackName(MediaTrack track, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "true, if successful" },
        {
          "identifier": "buf",
          "description": "the name of the track; \"MASTER\" for master-track; \"Track N\" if the track has no given name yet(N=tracknumber)"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "count", "item", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the number of MediaItems of a MediaTrack",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "tr",
          "description": "the MediaTrack, whose number of MediaItems you want to count"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackNumMediaItems",
    "functioncall": {
      "lua": "integer = reaper.GetTrackNumMediaItems(MediaTrack tr)",
      "cpp": "int GetTrackNumMediaItems(MediaTrack* tr)",
      "python": "Int RPR_GetTrackNumMediaItems(MediaTrack tr)",
      "eel": "int GetTrackNumMediaItems(MediaTrack tr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of MediaItems in the MediaTrack" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tr", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackNumMediaItems",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "count", "send", "receive", "hardware output", "hwout"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns number of sends/receives/hardware outputs\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "tr",
          "description": "the MediaTrack, whose number of sends/receives/hardware outputs you want to know"
        },
        {
          "identifier": "category",
          "description": "&lt;0 for receives; 0=sends; &gt;0 for hardware outputs"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackNumSends",
    "functioncall": {
      "lua": "integer = reaper.GetTrackNumSends(MediaTrack tr, integer category)",
      "cpp": "int GetTrackNumSends(MediaTrack* tr, int category)",
      "python": "Int RPR_GetTrackNumSends(MediaTrack tr, Int category)",
      "eel": "int GetTrackNumSends(MediaTrack tr, int category)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of sends/receives/hardware outputs" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackNumSends",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetTrackSendName](#GetTrackSendName).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "recv_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackReceiveName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index, string buf)",
      "cpp": "bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int recv_index, String buf, Int buf_sz) = RPR_GetTrackReceiveName(track, recv_index, buf, buf_sz)",
      "eel": "bool GetTrackReceiveName(MediaTrack track, int recv_index, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "recv_index", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetTrackReceiveName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetTrackSendUIMute](#GetTrackSendUIMute).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "recv_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackReceiveUIMute",
    "functioncall": {
      "lua": "boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)",
      "cpp": "bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)",
      "python": "(Boolean retval, MediaTrack track, Int recv_index, Boolean muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)",
      "eel": "bool GetTrackReceiveUIMute(MediaTrack track, int recv_index, bool &amp;mute)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "mute", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "recv_index", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackReceiveUIMute",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "mute", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetTrackSendUIVolPan](#GetTrackSendUIVolPan).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "recv_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackReceiveUIVolPan",
    "functioncall": {
      "lua": "boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)",
      "cpp": "bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)",
      "python": "(Boolean retval, MediaTrack track, Int recv_index, Float volumeOut, Float panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)",
      "eel": "bool GetTrackReceiveUIVolPan(MediaTrack track, int recv_index, &amp;volume, &amp;pan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "volume", "description": "" },
        { "identifier": "pan", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "recv_index", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackReceiveUIVolPan",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "pan", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.974" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get send/receive/hardware output numerical-value attributes.\ncategory is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs\nparameter names:\n\n    B\\_MUTE : bool \\*\n    B\\_PHASE : bool \\*, true to flip phase\n    B\\_MONO : bool \\*\n    D\\_VOL : double \\*, 1.0 = +0dB etc\n    D\\_PAN : double \\*, -1..+1\n    D\\_PANLAW : double \\*,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n    I\\_SENDMODE : int \\*, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n    I\\_AUTOMODE : int \\* : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n    I\\_SRCCHAN : int \\*, index,&amp;1024=mono, -1 for none\n    I\\_DSTCHAN : int \\*, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute\n    I\\_MIDIFLAGS : int \\*, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\n    P\\_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\n    P\\_ENV:&lt;envchunkname : read only, returns TrackEnvelope *. To get a specific TrackEnvelope, call with :&lt;VOLENV, :&lt;PANENV, etc appended.\n        \nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).\n        \nSee [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "category", "description": "" },
        { "identifier": "sendidx", "description": "" },
        { "identifier": "parmname", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetTrackSendInfo_Value",
    "functioncall": {
      "lua": "number = reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)",
      "cpp": "double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)",
      "python": "Float RPR_GetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname)",
      "eel": "double GetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, \"parmname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.GetTrackSendInfo_Value",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send\\_idx&gt;=0 for hw outputs, &gt;=nb\\_of\\_hw\\_outputs for sends. See [GetTrackReceiveName](#GetTrackReceiveName).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackSendName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.GetTrackSendName(MediaTrack track, integer send_index, string buf)",
      "cpp": "bool GetTrackSendName(MediaTrack* track, int send_index, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int send_index, String buf, Int buf_sz) = RPR_GetTrackSendName(track, send_index, buf, buf_sz)",
      "eel": "bool GetTrackSendName(MediaTrack track, int send_index, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_index", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.GetTrackSendName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send\\_idx&gt;=0 for hw outputs, &gt;=nb\\_of\\_hw\\_outputs for sends. See [GetTrackReceiveUIMute](#GetTrackReceiveUIMute).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackSendUIMute",
    "functioncall": {
      "lua": "boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)",
      "cpp": "bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)",
      "python": "(Boolean retval, MediaTrack track, Int send_index, Boolean muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)",
      "eel": "bool GetTrackSendUIMute(MediaTrack track, int send_index, bool &amp;mute)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "mute", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_index", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackSendUIMute",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "mute", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send\\_idx&gt;=0 for hw outputs, &gt;=nb\\_of\\_hw\\_outputs for sends. See [GetTrackReceiveUIVolPan](#GetTrackReceiveUIVolPan).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackSendUIVolPan",
    "functioncall": {
      "lua": "boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)",
      "cpp": "bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)",
      "python": "(Boolean retval, MediaTrack track, Int send_index, Float volumeOut, Float panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)",
      "eel": "bool GetTrackSendUIVolPan(MediaTrack track, int send_index, &amp;volume, &amp;pan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "volume", "description": "" },
        { "identifier": "pan", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_index", "type": "integer" }
        ],
        "method_name": "reaper.GetTrackSendUIVolPan",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "pan", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets track state, returns track name.\nflags will be set to:\n&amp;1=folder\n&amp;2=selected\n&amp;4=has fx enabled\n&amp;8=muted\n&amp;16=soloed\n&amp;32=SIP'd (with &amp;16)\n&amp;64=rec armed\n&amp;128=rec monitoring on\n&amp;256=rec monitoring auto\n&amp;512=hide from TCP\n&amp;1024=hide from MCP",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackState",
    "functioncall": {
      "lua": "string retval, number flags = reaper.GetTrackState(MediaTrack track)",
      "cpp": "const char* GetTrackState(MediaTrack* track, int* flagsOut)",
      "python": "(String retval, MediaTrack track, Int flagsOut) = RPR_GetTrackState(track, flagsOut)",
      "eel": "bool GetTrackState(#retval, MediaTrack track, int &amp;flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "flags", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackState",
        "return_values": [
          { "identifier": "retval", "type": "string" },
          { "identifier": "flags", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.982" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "isundo", "description": "" },
        { "identifier": "isundo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetTrackStateChunk",
    "functioncall": {
      "lua": "boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)",
      "cpp": "bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)",
      "python": "(Boolean retval, MediaTrack track, String strNeedBig, Int strNeedBig_sz, Boolean isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)",
      "eel": "bool GetTrackStateChunk(MediaTrack track, #str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.GetTrackStateChunk",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "str", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackUIMute",
    "functioncall": {
      "lua": "boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)",
      "cpp": "bool GetTrackUIMute(MediaTrack* track, bool* muteOut)",
      "python": "(Boolean retval, MediaTrack track, Boolean muteOut) = RPR_GetTrackUIMute(track, muteOut)",
      "eel": "bool GetTrackUIMute(MediaTrack track, bool &amp;mute)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "mute", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackUIMute",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "mute", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackUIPan",
    "functioncall": {
      "lua": "boolean retval, number pan1, number pan2, number panmode = reaper.GetTrackUIPan(MediaTrack track)",
      "cpp": "bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)",
      "python": "(Boolean retval, MediaTrack track, Float pan1Out, Float pan2Out, Int panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)",
      "eel": "bool GetTrackUIPan(MediaTrack track, &amp;pan1, &amp;pan2, int &amp;panmode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "pan1", "description": "" },
        { "identifier": "pan2", "description": "" },
        { "identifier": "panmode", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackUIPan",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "pan1", "type": "number" },
          { "identifier": "pan2", "type": "number" },
          { "identifier": "panmode", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetTrackUIVolPan",
    "functioncall": {
      "lua": "boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)",
      "cpp": "bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)",
      "python": "(Boolean retval, MediaTrack track, Float volumeOut, Float panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)",
      "eel": "bool GetTrackUIVolPan(MediaTrack track, &amp;volume, &amp;pan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "volume", "description": "" },
        { "identifier": "pan", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.GetTrackUIVolPan",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "volume", "type": "number" },
          { "identifier": "pan", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "GetUnderrunTime",
    "functioncall": {
      "lua": "optional number audio_xrun retval, optional number media_xrun, optional number curtime = reaper.GetUnderrunTime()",
      "cpp": "void GetUnderrunTime(unsigned int* audio_xrunOutOptional, unsigned int* media_xrunOutOptional, unsigned int* curtimeOutOptional)",
      "python": "RPR_GetUnderrunTime(unsigned int audio_xrunOutOptional, unsigned int media_xrunOutOptional, unsigned int curtimeOutOptional)",
      "eel": "GetUnderrunTime(optional unsigned int &amp;audio_xrun, optional unsigned int &amp;media_xrun, optional unsigned int &amp;curtime)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "audio_xrun retval", "description": "" },
        { "identifier": "media_xrun", "description": "" },
        { "identifier": "curtime", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.GetUnderrunTime",
        "return_values": [
          { "identifier": "number", "type": "optional" },
          { "identifier": "retval", "type": "audio_xrun" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["user", "interface", "file", "requester", "dialog", "open"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Opens a filerequester, where a user can select a file.\nThe requester only returns the file, but doesn't open or write to it. That said, this function can be used for both use-cases, BUT: keep in mind, that it shows an \"open\"-button, even if you want to use it in code for saving a file. You also can't use it for \"create new file\"-usecases, as you can't choose nonexisting files.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "filenameNeed4096",
          "description": "default-filename the requester uses, until the user selects another file."
        },
        { "identifier": "title", "description": "title of the file-requester-window" },
        {
          "identifier": "defext",
          "description": "the filter for the fileextensions. Only files with an extension defined in defext are shown.\nexamples:\n\"\", all files\n\"*\", all files\n\"ini\", only .ini-files\n\"*.ini\", only .ini-files\n\"*.txt; *.ini; *.exe\", shows .txt; .ini; .exe-files"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetUserFileNameForRead",
    "functioncall": {
      "lua": "boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)",
      "cpp": "bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)",
      "python": "(Boolean retval, String filenameNeed4096, String title, String defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)",
      "eel": "bool GetUserFileNameForRead(#filenameNeed4096, \"title\", \"defext\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "retval",
          "description": "true, if the user selected a file; false if the user canceled the dialog"
        },
        {
          "identifier": "filenameNeed4096",
          "description": "the filename including the full absolute path of the file the user selected"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "filenameNeed4096", "type": "string" },
          { "identifier": "title", "type": "string" },
          { "identifier": "defext", "type": "string" }
        ],
        "method_name": "reaper.GetUserFileNameForRead",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "filenameNeed4096", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["User Interface"],
    "tags": ["user", "interface", "input", "values", "csv", "dialog"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Opens a window with input-fields to get values from the user.\nIf a caption begins with \\*, for example \"\\*password\", the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma/custom separator-separated string. \nReturns false if the user canceled the dialog. \n\nYou can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields(separator=\\n is recommended).\n\nExample:\n\nretval, retvals_csv = reaper.GetUserInputs(\"Title\", 2, \"Hello,World, separator=\\n\", \"defaultvalue1\\ndefaultvalue2\")\n\nwill return the values input by the user, separated by a newline.\n\n\\n is recommended, as this allows the user entering everything, a one-lined-inputbox can handle.\n\nImportant: the separator-field in the captions has no effect on how captions in parameter captions\\_csv are separated from each other. They still need to be separated by commas!\n\nNote: the parameter retvals\\_csv follows undisclosed csv rules. This is important when you want to set the default-captions for multiple input-field.\nFor instance every entry for each input-field: \n\n- must contain an even number of quotes/single quotes\n- every ( or must be closed by with )\n\notherwise the separator will be ignored and the default-retvals will show in the wrong fields.\n\nExample:\n\na retval_csv of _I'm enlightened,I am too_\n\nwith one singlequote in it (the one in I'm) will NOT be shown in two fields\n\n_I'm enlightened_\n_I am too_\n\nbut rather in one field as \n\n_I'm enlightened,I am too_\n\nThese can't be escaped due Reaper's API-limitation. Keep this in mind!",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string title", "description": "title of the window" },
        { "identifier": "integer num_inputs", "description": "number of input-fields, 1-16." },
        {
          "identifier": "string captions_csv",
          "description": "a string with the captions for each input-field, each separated by a comma. Can be fewer than num_inputs. If a caption begins with *, the inputfield will display * instead of characters(for i.e. passwords)."
        },
        {
          "identifier": "string retvals_csv",
          "description": "default-values for each input-field, separated by a comma or a separator you chose."
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetUserInputs",
    "functioncall": {
      "lua": "boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)",
      "cpp": "bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)",
      "python": "(Boolean retval, String title, Int num_inputs, String captions_csv, String retvals_csv, Int retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)",
      "eel": "bool GetUserInputs(\"title\", int num_inputs, \"captions_csv\", #retvals_csv)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "did the user click OK in the dialog(true) or close/cancel the dialog(false)"
        },
        {
          "identifier": "string retvals_csv",
          "description": "the data from each of the input-fields, separated by a comma , or a separator you chose."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "title", "type": "string" },
          { "identifier": "num_inputs", "type": "integer" },
          { "identifier": "captions_csv", "type": "string" },
          { "identifier": "retvals_csv", "type": "string" }
        ],
        "method_name": "reaper.GetUserInputs",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "retvals_csv", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "goto", "marker", "play", "cursor", "editcursor", "playcursor"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Go to marker. \nMove Editcursor to a given marker. When playing, the playcursor moves to the marker as well.\n\nFor Regions, use [GoToRegion](#GoToRegion).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "marker_index",
          "description": "the markerindex, where you want to go to."
        },
        {
          "identifier": "use_timeline_order",
          "description": "false, use the shown-markernumber as marker_index; true, use markers in timelineorder, ignoring the shown-markernumber"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GoToMarker",
    "functioncall": {
      "lua": "reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)",
      "cpp": "void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)",
      "python": "RPR_GoToMarker(ReaProject proj, Int marker_index, Boolean use_timeline_order)",
      "eel": "GoToMarker(ReaProject proj, int marker_index, bool use_timeline_order)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "marker_index", "type": "integer" },
          { "identifier": "use_timeline_order", "type": "boolean" }
        ],
        "method_name": "reaper.GoToMarker",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "goto", "region", "play", "cursor", "editcursor", "playcursor"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Go to beginning of a region.\nSeek to region after current region finishes playing (smooth seek). ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "region_index",
          "description": "the regionindex, where you want to got to."
        },
        {
          "identifier": "use_timeline_order",
          "description": "false, use the shown-regionnumber as region_index; true, use regions in timelineorder, ignoring the shown-regionnumber"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "GoToRegion",
    "functioncall": {
      "lua": "reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)",
      "cpp": "void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)",
      "python": "RPR_GoToRegion(ReaProject proj, Int region_index, Boolean use_timeline_order)",
      "eel": "GoToRegion(ReaProject proj, int region_index, bool use_timeline_order)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "region_index", "type": "integer" },
          { "identifier": "use_timeline_order", "type": "boolean" }
        ],
        "method_name": "reaper.GoToRegion",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "color", "dialog", "chooser", "native", "hwnd"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "hwnd",
          "description": "the window, in which to open the dialog. Nil is allowed in Lua."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GR_SelectColor",
    "functioncall": {
      "lua": "integer retval, number color = reaper.GR_SelectColor(HWND hwnd)",
      "cpp": "int GR_SelectColor(HWND hwnd, int* colorOut)",
      "python": "(Int retval, HWND hwnd, Int colorOut) = RPR_GR_SelectColor(hwnd, colorOut)",
      "eel": "int GR_SelectColor(HWND hwnd, int &amp;color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "1, user chose a color; 0, user canceled dialog" },
        { "identifier": "color", "description": "the returned color as a native-color-value." }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "HWND" }],
        "method_name": "reaper.GR_SelectColor",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "color", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "this is just like win32 GetSysColor() but can have overrides.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "t", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GSC_mainwnd",
    "functioncall": {
      "lua": "integer = reaper.GSC_mainwnd(integer t)",
      "cpp": "int GSC_mainwnd(int t)",
      "python": "Int RPR_GSC_mainwnd(Int t)",
      "eel": "int GSC_mainwnd(int t)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "t", "type": "integer" }],
        "method_name": "reaper.GSC_mainwnd",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "dest should be at least 64 chars long to be safe",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "gGUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "guidToString",
    "functioncall": {
      "lua": "string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)",
      "cpp": "void guidToString(const GUID* g, char* destNeed64)",
      "python": "(const GUID g, String destNeed64) = RPR_guidToString(g, destNeed64)",
      "eel": "guidToString(\"gGUID\", #destNeed64)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "destNeed64", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "gGUID", "type": "string" },
          { "identifier": "destNeed64", "type": "string" }
        ],
        "method_name": "reaper.guidToString",
        "return_values": [{ "identifier": "destNeed64", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Extended States"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if there exists an extended state value for a specific section and key. See [SetExtState](#SetExtState), [GetExtState](#GetExtState), [DeleteExtState](#DeleteExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "section", "description": "" },
        { "identifier": "key", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "HasExtState",
    "functioncall": {
      "lua": "boolean = reaper.HasExtState(string section, string key)",
      "cpp": "bool HasExtState(const char* section, const char* key)",
      "python": "Boolean RPR_HasExtState(String section, String key)",
      "eel": "bool HasExtState(\"section\", \"key\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "key", "type": "string" }
        ],
        "method_name": "reaper.HasExtState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "HasTrackMIDIPrograms",
    "functioncall": {
      "lua": "string = reaper.HasTrackMIDIPrograms(integer track)",
      "cpp": "const char* HasTrackMIDIPrograms(int track)",
      "python": "String RPR_HasTrackMIDIPrograms(Int track)",
      "eel": "bool HasTrackMIDIPrograms(#retval, int track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "integer" }],
        "method_name": "reaper.HasTrackMIDIPrograms",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "track", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "HasTrackMIDIProgramsEx",
    "functioncall": {
      "lua": "string = reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)",
      "cpp": "const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)",
      "python": "String RPR_HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)",
      "eel": "bool HasTrackMIDIProgramsEx(#retval, ReaProject proj, MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.HasTrackMIDIProgramsEx",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": ["reaper", "api", "helper", "display", "help", "information", "message"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Displays an information in the help and information-display, underneath the TCP(might be missing, in certain themes).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "helpstring", "description": "the string to display" },
        {
          "identifier": "is_temporary_help",
          "description": "true, show until another message is displayed; false, show permanently, every time no other message is displayed."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Help_Set",
    "functioncall": {
      "lua": "reaper.Help_Set(string helpstring, boolean is_temporary_help)",
      "cpp": "void Help_Set(const char* helpstring, bool is_temporary_help)",
      "python": "RPR_Help_Set(String helpstring, Boolean is_temporary_help)",
      "eel": "Help_Set(\"helpstring\", bool is_temporary_help)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "helpstring", "type": "string" },
          { "identifier": "is_temporary_help", "type": "boolean" }
        ],
        "method_name": "reaper.Help_Set",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "in", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "image_resolve_fn",
    "functioncall": {
      "lua": "string out = reaper.image_resolve_fn(string in, string out)",
      "cpp": "void image_resolve_fn(const char* in, char* out, int out_sz)",
      "python": "(String in, String out, Int out_sz) = RPR_image_resolve_fn(in, out, out_sz)",
      "eel": "image_resolve_fn(\"in\", #out)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "out", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "in", "type": "string" },
          { "identifier": "out", "type": "string" }
        ],
        "method_name": "reaper.image_resolve_fn",
        "return_values": [{ "identifier": "out", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.96" },
    "chapers": ["Automation Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert a new automation item. pool\\_id &lt; 0 collects existing envelope points into the automation item; if pool\\_id is &gt;= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See [GetSetAutomationItemInfo](#GetSetAutomationItemInfo).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "env", "description": "" },
        { "identifier": "pool_id", "description": "" },
        { "identifier": "position", "description": "" },
        { "identifier": "length", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "InsertAutomationItem",
    "functioncall": {
      "lua": "integer = reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)",
      "cpp": "int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)",
      "python": "Int RPR_InsertAutomationItem(TrackEnvelope env, Int pool_id, Float position, Float length)",
      "eel": "int InsertAutomationItem(TrackEnvelope env, int pool_id, position, length)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "pool_id", "type": "integer" },
          { "identifier": "position", "type": "number" },
          { "identifier": "length", "type": "number" }
        ],
        "method_name": "reaper.InsertAutomationItem",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [InsertEnvelopePointEx](#InsertEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "time", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "shape", "description": "" },
        { "identifier": "tension", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "InsertEnvelopePoint",
    "functioncall": {
      "lua": "boolean = reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)",
      "cpp": "bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)",
      "eel": "bool InsertEnvelopePoint(TrackEnvelope envelope, time, value, int shape, tension, bool selected, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "time", "type": "number" },
          { "identifier": "value", "type": "number" },
          { "identifier": "shape", "type": "integer" },
          { "identifier": "tension", "type": "number" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.InsertEnvelopePoint",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\n\nSee [CountEnvelopePointsEx](#CountEnvelopePointsEx), [GetEnvelopePointEx](#GetEnvelopePointEx), [SetEnvelopePointEx](#SetEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "autoitem_idx", "description": "" },
        { "identifier": "time", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "shape", "description": "" },
        { "identifier": "tension", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "InsertEnvelopePointEx",
    "functioncall": {
      "lua": "boolean = reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)",
      "cpp": "bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Float time, Float value, Int shape, Float tension, Boolean selected, Boolean noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)",
      "eel": "bool InsertEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, time, value, int shape, tension, bool selected, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "time", "type": "number" },
          { "identifier": "value", "type": "number" },
          { "identifier": "shape", "type": "integer" },
          { "identifier": "tension", "type": "number" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.InsertEnvelopePointEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.17" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "mode: \n0=add to current track\n1=add new track\n3=add to selected items as takes\n&amp;4=stretch/loop to fit time sel\n&amp;8=try to match tempo 1x\n&amp;16=try to match tempo 0.5x\n&amp;32=try to match tempo 2x\n&amp;64=don't preserve pitch when matching tempo\n&amp;128=no loop/section if startpct/endpct set\n&amp;256=force loop regardless of global preference for looping imported items\n&amp;512=use high word as absolute track index if mode&amp;3==0\n&amp;1024=insert into reasamplomatic on a new track\n&amp;2048=insert into open reasamplomatic instance\n&amp;4096=move to BWF source preferred position",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "file", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "InsertMedia",
    "functioncall": {
      "lua": "integer = reaper.InsertMedia(string file, integer mode)",
      "cpp": "int InsertMedia(const char* file, int mode)",
      "python": "Int RPR_InsertMedia(String file, Int mode)",
      "eel": "int InsertMedia(\"file\", int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "file", "type": "string" },
          { "identifier": "mode", "type": "integer" }
        ],
        "method_name": "reaper.InsertMedia",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "see [InsertMedia](#InsertMedia)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "file", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "startpct", "description": "" },
        { "identifier": "endpct", "description": "" },
        { "identifier": "pitchshift", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "InsertMediaSection",
    "functioncall": {
      "lua": "integer = reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)",
      "cpp": "int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)",
      "python": "Int RPR_InsertMediaSection(String file, Int mode, Float startpct, Float endpct, Float pitchshift)",
      "eel": "int InsertMediaSection(\"file\", int mode, startpct, endpct, pitchshift)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "file", "type": "string" },
          { "identifier": "mode", "type": "integer" },
          { "identifier": "startpct", "type": "number" },
          { "identifier": "endpct", "type": "number" },
          { "identifier": "pitchshift", "type": "number" }
        ],
        "method_name": "reaper.InsertMediaSection",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "insert", "track", "index", "default"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "inserts a track at idx,of course this will be clamped to 0..[GetNumTracks](#GetNumTracks)().",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "idx",
          "description": "the index, in which to insert the track; 0, insert before the first track."
        },
        {
          "identifier": "wantDefaults",
          "description": "true, default envelopes/FX; false, no enabled FX/envelopes"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "InsertTrackAtIndex",
    "functioncall": {
      "lua": "reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)",
      "cpp": "void InsertTrackAtIndex(int idx, bool wantDefaults)",
      "python": "RPR_InsertTrackAtIndex(Int idx, Boolean wantDefaults)",
      "eel": "InsertTrackAtIndex(int idx, bool wantDefaults)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "idx", "type": "integer" },
          { "identifier": "wantDefaults", "type": "boolean" }
        ],
        "method_name": "reaper.InsertTrackAtIndex",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "ext", "description": "" },
        { "identifier": "wantOthers", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "IsMediaExtension",
    "functioncall": {
      "lua": "boolean = reaper.IsMediaExtension(string ext, boolean wantOthers)",
      "cpp": "bool IsMediaExtension(const char* ext, bool wantOthers)",
      "python": "Boolean RPR_IsMediaExtension(String ext, Boolean wantOthers)",
      "eel": "bool IsMediaExtension(\"ext\", bool wantOthers)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "ext", "type": "string" },
          { "identifier": "wantOthers", "type": "boolean" }
        ],
        "method_name": "reaper.IsMediaExtension",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "selected", "state", "unselected"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get, if a MediaItem is selected or not.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "item",
          "description": "the MediaItem, whose selected-state you want to know"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "IsMediaItemSelected",
    "functioncall": {
      "lua": "boolean = reaper.IsMediaItemSelected(MediaItem item)",
      "cpp": "bool IsMediaItemSelected(MediaItem* item)",
      "python": "Boolean RPR_IsMediaItemSelected(MediaItem item)",
      "eel": "bool IsMediaItemSelected(MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, MediaItem is selected; false, MediaItem is not selected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.IsMediaItemSelected",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "get", "dirty", "state", "saved", "unsaved"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\nA project becomes dirty, as soon as it was changed since creation/last saving.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "IsProjectDirty",
    "functioncall": {
      "lua": "integer = reaper.IsProjectDirty(ReaProject proj)",
      "cpp": "int IsProjectDirty(ReaProject* proj)",
      "python": "Int RPR_IsProjectDirty(ReaProject proj)",
      "eel": "int IsProjectDirty(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the state, if a project needs saving or not; 0, needs no saving; 1, needs saving"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.IsProjectDirty",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "state", "selection", "deselection"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get, if a MediaTrack is selected or not.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack, whose selection-state you want to know"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "IsTrackSelected",
    "functioncall": {
      "lua": "boolean = reaper.IsTrackSelected(MediaTrack track)",
      "cpp": "bool IsTrackSelected(MediaTrack* track)",
      "python": "Boolean RPR_IsTrackSelected(MediaTrack track)",
      "eel": "bool IsTrackSelected(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, MediaTrack is selected; false, MediaTrack is not selected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.IsTrackSelected",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [
      "trackmanagement",
      "visible",
      "get",
      "invisible",
      "mixer",
      "track control panel",
      "tcp",
      "mcp"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets visibility-state of a MediaTrack.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack, whose visibility-state you want to know"
        },
        {
          "identifier": "mixer",
          "description": "true, visibility-state of the MediaTrack in the mixer; false, visibility-state of the MediaTrack in the TrackControlPanel"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "IsTrackVisible",
    "functioncall": {
      "lua": "boolean = reaper.IsTrackVisible(MediaTrack track, boolean mixer)",
      "cpp": "bool IsTrackVisible(MediaTrack* track, bool mixer)",
      "python": "Boolean RPR_IsTrackVisible(MediaTrack track, Boolean mixer)",
      "eel": "bool IsTrackVisible(MediaTrack track, bool mixer)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, MediaTrack is visible; false, MediaTrack is invisible"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "mixer", "type": "boolean" }
        ],
        "method_name": "reaper.IsTrackVisible",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "creates a joystick device",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "guidGUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_create",
    "functioncall": {
      "lua": "joystick_device = reaper.joystick_create(string guidGUID)",
      "cpp": "joystick_device* joystick_create(const GUID* guid)",
      "python": "joystick_device RPR_joystick_create(const GUID guid)",
      "eel": "joystick_device joystick_create(\"guidGUID\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "joystick_device", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "guidGUID", "type": "string" }],
        "method_name": "reaper.joystick_create",
        "return_values": [{ "type": "joystick_device" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "destroys a joystick device",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "device", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_destroy",
    "functioncall": {
      "lua": "reaper.joystick_destroy(joystick_device device)",
      "cpp": "void joystick_destroy(joystick_device* device)",
      "python": "RPR_joystick_destroy(joystick_device device)",
      "eel": "joystick_destroy(joystick_device device)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "device", "type": "joystick_device" }],
        "method_name": "reaper.joystick_destroy",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "enumerates installed devices, returns GUID as a string",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "index", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_enum",
    "functioncall": {
      "lua": "string retval, optional string namestr = reaper.joystick_enum(integer index)",
      "cpp": "const char* joystick_enum(int index, const char** namestrOutOptional)",
      "python": "String RPR_joystick_enum(Int index, String namestrOutOptional)",
      "eel": "bool joystick_enum(#retval, int index, optional #namestr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "string namestr", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "index", "type": "integer" }],
        "method_name": "reaper.joystick_enum",
        "return_values": [
          { "identifier": "retval", "type": "string" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns axis value (-1..1)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dev", "description": "" },
        { "identifier": "axis", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "joystick_getaxis",
    "functioncall": {
      "lua": "number = reaper.joystick_getaxis(joystick_device dev, integer axis)",
      "cpp": "double joystick_getaxis(joystick_device* dev, int axis)",
      "python": "Float RPR_joystick_getaxis(joystick_device dev, Int axis)",
      "eel": "double joystick_getaxis(joystick_device dev, int axis)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "dev", "type": "joystick_device" },
          { "identifier": "axis", "type": "integer" }
        ],
        "method_name": "reaper.joystick_getaxis",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns button pressed mask, 1=first button, 2=second...",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "dev", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_getbuttonmask",
    "functioncall": {
      "lua": "integer = reaper.joystick_getbuttonmask(joystick_device dev)",
      "cpp": "unsigned int joystick_getbuttonmask(joystick_device* dev)",
      "python": "Int RPR_joystick_getbuttonmask(joystick_device dev)",
      "eel": "uint joystick_getbuttonmask(joystick_device dev)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "dev", "type": "joystick_device" }],
        "method_name": "reaper.joystick_getbuttonmask",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns button count",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "dev", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_getinfo",
    "functioncall": {
      "lua": "integer retval, optional number axes, optional number povs = reaper.joystick_getinfo(joystick_device dev)",
      "cpp": "int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)",
      "python": "(Int retval, joystick_device dev, Int axesOutOptional, Int povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)",
      "eel": "int joystick_getinfo(joystick_device dev, optional int &amp;axes, optional int &amp;povs)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "axes", "description": "" },
        { "identifier": "povs", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "dev", "type": "joystick_device" }],
        "method_name": "reaper.joystick_getinfo",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns POV value (usually 0..655.35, or 655.35 on error)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dev", "description": "" },
        { "identifier": "pov", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "joystick_getpov",
    "functioncall": {
      "lua": "number = reaper.joystick_getpov(joystick_device dev, integer pov)",
      "cpp": "double joystick_getpov(joystick_device* dev, int pov)",
      "python": "Float RPR_joystick_getpov(joystick_device dev, Int pov)",
      "eel": "double joystick_getpov(joystick_device dev, int pov)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "dev", "type": "joystick_device" },
          { "identifier": "pov", "type": "integer" }
        ],
        "method_name": "reaper.joystick_getpov",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Joystick Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "dev", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "joystick_update",
    "functioncall": {
      "lua": "boolean = reaper.joystick_update(joystick_device dev)",
      "cpp": "bool joystick_update(joystick_device* dev)",
      "python": "Boolean RPR_joystick_update(joystick_device dev)",
      "eel": "bool joystick_update(joystick_device dev)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "dev", "type": "joystick_device" }],
        "method_name": "reaper.joystick_update",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns false if the line is entirely offscreen.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "xLo", "description": "" },
        { "identifier": "xLo", "description": "" },
        { "identifier": "xLo", "description": "" },
        { "identifier": "xLo", "description": "" },
        { "identifier": "xLo", "description": "" },
        { "identifier": "yLo", "description": "" },
        { "identifier": "xHi", "description": "" },
        { "identifier": "yHi", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_ClipLine",
    "functioncall": {
      "lua": "boolean retval, number pX1, number pY1, number pX2, number pY2 = reaper.LICE_ClipLine(number pX1, number pY1, number pX2, number pY2, integer xLo, integer yLo, integer xHi, integer yHi)",
      "cpp": "bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)",
      "python": "(Boolean retval, Int pX1Out, Int pY1Out, Int pX2Out, Int pY2Out, Int xLo, Int yLo, Int xHi, Int yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)",
      "eel": "bool LICE_ClipLine(int &amp;pX1, int &amp;pY1, int &amp;pX2, int &amp;pY2, int xLo, int yLo, int xHi, int yHi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "pX1", "description": "" },
        { "identifier": "pY1", "description": "" },
        { "identifier": "pX2", "description": "" },
        { "identifier": "pY2", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "pX1", "type": "number" },
          { "identifier": "pY1", "type": "number" },
          { "identifier": "pX2", "type": "number" },
          { "identifier": "pY2", "type": "number" },
          { "identifier": "xLo", "type": "integer" },
          { "identifier": "yLo", "type": "integer" },
          { "identifier": "xHi", "type": "integer" },
          { "identifier": "yHi", "type": "integer" }
        ],
        "method_name": "reaper.LICE_ClipLine",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "pX1", "type": "number" },
          { "identifier": "pY1", "type": "number" },
          { "identifier": "pX2", "type": "number" },
          { "identifier": "pY2", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.11" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string src_string",
          "description": "the string, which you want to be translated"
        },
        {
          "identifier": "string section",
          "description": "the section in the ReaperLangPack-file, in which the string to localize is located"
        },
        {
          "identifier": "integer flags",
          "description": "1, set to only localize if sprintf-style formatting matches the original"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "LocalizeString",
    "functioncall": {
      "lua": "string retval = reaper.LocalizeString(string src_string, string section, integer flags)",
      "cpp": "const char* LocalizeString(const char* src_string, const char* section, int flagsOptional)",
      "python": "String RPR_LocalizeString(String src_string, String section, Int flagsOptional)",
      "eel": "bool LocalizeString(#retval, \"src_string\", \"section\", int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string retval",
          "description": "the localized string or the original string, if no localized string is available"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_string", "type": "string" },
          { "identifier": "section", "type": "string" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.LocalizeString",
        "return_values": [{ "identifier": "retval", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "loop", "on arrow", "move", "selection", "snap"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Move the loop selection left or right in steps according to snap-settings(when snap is enabled).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project to be checked for. 0 for current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "direction",
          "description": "the direction to move; negative values, move towards start of project; positive values, move towards end of project; 0, keep position"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "Loop_OnArrow",
    "functioncall": {
      "lua": "boolean = reaper.Loop_OnArrow(ReaProject project, integer direction)",
      "cpp": "bool Loop_OnArrow(ReaProject* project, int direction)",
      "python": "Boolean RPR_Loop_OnArrow(ReaProject project, Int direction)",
      "eel": "bool Loop_OnArrow(ReaProject project, int direction)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, snap is enabled; false, snap is disabled" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "direction", "type": "integer" }
        ],
        "method_name": "reaper.Loop_OnArrow",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "run", "command", "action", "script"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see [NamedCommandLookup](#NamedCommandLookup)().\nSee [Main\\_OnCommandEx](#Main_OnCommandEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "command", "description": "the command-id of the action, you want to run" },
        { "identifier": "flag", "description": "set to 0" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Main_OnCommand",
    "functioncall": {
      "lua": "reaper.Main_OnCommand(integer command, integer flag)",
      "cpp": "void Main_OnCommand(int command, int flag)",
      "python": "RPR_Main_OnCommand(Int command, Int flag)",
      "eel": "Main_OnCommand(int command, int flag)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "command", "type": "integer" },
          { "identifier": "flag", "type": "integer" }
        ],
        "method_name": "reaper.Main_OnCommand",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "run", "command", "action", "script", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see [NamedCommandLookup](#NamedCommandLookup)().",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "command", "description": "the command-id of the action, you want to run" },
        { "identifier": "flag", "description": "0" },
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "Main_OnCommandEx",
    "functioncall": {
      "lua": "reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)",
      "cpp": "void Main_OnCommandEx(int command, int flag, ReaProject* proj)",
      "python": "RPR_Main_OnCommandEx(Int command, Int flag, ReaProject proj)",
      "eel": "Main_OnCommandEx(int command, int flag, ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "command", "type": "integer" },
          { "identifier": "flag", "type": "integer" },
          { "identifier": "proj", "type": "ReaProject" }
        ],
        "method_name": "reaper.Main_OnCommandEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.983" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "open", "project", "template", "filename"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "opens a project. \n\nwill prompt the user to save unless name is prefixed with 'noprompt:'. \n    example: \"noprompt:projectfile.rpp\"\n     \nIf name is prefixed with 'template:', project file will be loaded as a template.\n    example: \"template:projectfile.rpp\"\n\nYou can combine both: \"template:noprompt:projectfile.rpp\"\n\nIf passed a .RTrackTemplate file, adds the template to the existing project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string name",
          "description": "the path and filename of the project/template you want to open"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Main_openProject",
    "functioncall": {
      "lua": "reaper.Main_openProject(string name)",
      "cpp": "void Main_openProject(const char* name)",
      "python": "RPR_Main_openProject(String name)",
      "eel": "Main_openProject(\"name\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "name", "type": "string" }],
        "method_name": "reaper.Main_openProject",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "save", "project", "save dialog"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Save the project.\nOptional with a save-dialog.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "forceSaveAsIn",
          "description": "false, save the project; true, open save-file-dialog first"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "Main_SaveProject",
    "functioncall": {
      "lua": "reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)",
      "cpp": "void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)",
      "python": "RPR_Main_SaveProject(ReaProject proj, Boolean forceSaveAsInOptional)",
      "eel": "Main_SaveProject(ReaProject proj, bool forceSaveAsIn)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "forceSaveAsIn", "type": "boolean" }
        ],
        "method_name": "reaper.Main_SaveProject",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "ignoremask", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Main_UpdateLoopInfo",
    "functioncall": {
      "lua": "reaper.Main_UpdateLoopInfo(integer ignoremask)",
      "cpp": "void Main_UpdateLoopInfo(int ignoremask)",
      "python": "RPR_Main_UpdateLoopInfo(Int ignoremask)",
      "eel": "Main_UpdateLoopInfo(int ignoremask)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "ignoremask", "type": "integer" }],
        "method_name": "reaper.Main_UpdateLoopInfo",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "need save", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "MarkProjectDirty",
    "functioncall": {
      "lua": "reaper.MarkProjectDirty(ReaProject proj)",
      "cpp": "void MarkProjectDirty(ReaProject* proj)",
      "python": "RPR_MarkProjectDirty(ReaProject proj)",
      "eel": "MarkProjectDirty(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.MarkProjectDirty",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": ["miscellaneous", "track", "item", "dirty"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "If track is supplied, item is ignored",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "the MediaTrack that you want to mark as dirty" },
        {
          "identifier": "item",
          "description": "if no MediaTrack is given, use this MediaItem to mark as dirty"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MarkTrackItemsDirty",
    "functioncall": {
      "lua": "reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)",
      "cpp": "void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)",
      "python": "RPR_MarkTrackItemsDirty(MediaTrack track, MediaItem item)",
      "eel": "MarkTrackItemsDirty(MediaTrack track, MediaItem item)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "item", "type": "MediaItem" }
        ],
        "method_name": "reaper.MarkTrackItemsDirty",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "get", "playrate"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the playrate of the project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Master_GetPlayRate",
    "functioncall": {
      "lua": "number = reaper.Master_GetPlayRate(ReaProject project)",
      "cpp": "double Master_GetPlayRate(ReaProject* project)",
      "python": "Float RPR_Master_GetPlayRate(ReaProject project)",
      "eel": "double Master_GetPlayRate(ReaProject project)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number",
          "description": "the playrate of the project, between 0.25 and 10.0"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "project", "type": "ReaProject" }],
        "method_name": "reaper.Master_GetPlayRate",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "time_s", "description": "" },
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "Master_GetPlayRateAtTime",
    "functioncall": {
      "lua": "number = reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)",
      "cpp": "double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)",
      "python": "Float RPR_Master_GetPlayRateAtTime(Float time_s, ReaProject proj)",
      "eel": "double Master_GetPlayRateAtTime(time_s, ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "time_s", "type": "number" },
          { "identifier": "proj", "type": "ReaProject" }
        ],
        "method_name": "reaper.Master_GetPlayRateAtTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Master_GetTempo",
    "functioncall": {
      "lua": "number = reaper.Master_GetTempo()",
      "cpp": "double Master_GetTempo()",
      "python": "Float RPR_Master_GetTempo()",
      "eel": "double Master_GetTempo()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.Master_GetTempo",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "playrate", "description": "" },
        { "identifier": "isnormalized", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Master_NormalizePlayRate",
    "functioncall": {
      "lua": "number = reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)",
      "cpp": "double Master_NormalizePlayRate(double playrate, bool isnormalized)",
      "python": "Float RPR_Master_NormalizePlayRate(Float playrate, Boolean isnormalized)",
      "eel": "double Master_NormalizePlayRate(playrate, bool isnormalized)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "playrate", "type": "number" },
          { "identifier": "isnormalized", "type": "boolean" }
        ],
        "method_name": "reaper.Master_NormalizePlayRate",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bpm", "description": "" },
        { "identifier": "isnormalized", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Master_NormalizeTempo",
    "functioncall": {
      "lua": "number = reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)",
      "cpp": "double Master_NormalizeTempo(double bpm, bool isnormalized)",
      "python": "Float RPR_Master_NormalizeTempo(Float bpm, Boolean isnormalized)",
      "eel": "double Master_NormalizeTempo(bpm, bool isnormalized)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bpm", "type": "number" },
          { "identifier": "isnormalized", "type": "boolean" }
        ],
        "method_name": "reaper.Master_NormalizeTempo",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["user", "interface", "input", "dialog", "messagebox"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Shows Messagebox with user-clickable buttons.           ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "msg", "description": "the message, that shall be shown in messagebox" },
        { "identifier": "title", "description": "the title of the messagebox" },
        {
          "identifier": "type",
          "description": "which buttons shall be shown in the messagebox\n0, OK\n1, OK CANCEL\n2, ABORT RETRY IGNORE\n3, YES NO CANCEL\n4, YES NO\n5, RETRY CANCEL"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "MB",
    "functioncall": {
      "lua": "integer = reaper.MB(string msg, string title, integer type)",
      "cpp": "int MB(const char* msg, const char* title, int type)",
      "python": "Int RPR_MB(String msg, String title, Int type)",
      "eel": "int MB(\"msg\", \"title\", int type)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the button pressed by the user\n1, OK\n2, CANCEL\n3, ABORT\n4, RETRY\n5, IGNORE\n6, YES\n7, NO"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "msg", "type": "string" },
          { "identifier": "title", "type": "string" },
          { "identifier": "type", "type": "integer" }
        ],
        "method_name": "reaper.MB",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "track", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MediaItemDescendsFromTrack",
    "functioncall": {
      "lua": "integer = reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)",
      "cpp": "int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)",
      "python": "Int RPR_MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)",
      "eel": "int MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.MediaItemDescendsFromTrack",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_CountEvts",
    "functioncall": {
      "lua": "integer retval, number notecnt, number ccevtcnt, number textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)",
      "cpp": "int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)",
      "python": "(Int retval, MediaItem_Take take, Int notecntOut, Int ccevtcntOut, Int textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)",
      "eel": "int MIDI_CountEvts(MediaItem_Take take, int &amp;notecnt, int &amp;ccevtcnt, int &amp;textsyxevtcnt)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "notecnt", "description": "" },
        { "identifier": "ccevtcnt", "description": "" },
        { "identifier": "textsyxevtcnt", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.MIDI_CountEvts",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "notecnt", "type": "number" },
          { "identifier": "ccevtcnt", "type": "number" },
          { "identifier": "textsyxevtcnt", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a MIDI CC event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ccidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_DeleteCC",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)",
      "cpp": "bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)",
      "python": "Boolean RPR_MIDI_DeleteCC(MediaItem_Take take, Int ccidx)",
      "eel": "bool MIDI_DeleteCC(MediaItem_Take take, int ccidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_DeleteCC",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a MIDI event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "evtidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_DeleteEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)",
      "cpp": "bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)",
      "python": "Boolean RPR_MIDI_DeleteEvt(MediaItem_Take take, Int evtidx)",
      "eel": "bool MIDI_DeleteEvt(MediaItem_Take take, int evtidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "evtidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_DeleteEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a MIDI note.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "noteidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_DeleteNote",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)",
      "cpp": "bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)",
      "python": "Boolean RPR_MIDI_DeleteNote(MediaItem_Take take, Int noteidx)",
      "eel": "bool MIDI_DeleteNote(MediaItem_Take take, int noteidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "noteidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_DeleteNote",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Delete a MIDI text or sysex event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "textsyxevtidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_DeleteTextSysexEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)",
      "cpp": "bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)",
      "python": "Boolean RPR_MIDI_DeleteTextSysexEvt(MediaItem_Take take, Int textsyxevtidx)",
      "eel": "bool MIDI_DeleteTextSysexEvt(MediaItem_Take take, int textsyxevtidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "textsyxevtidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_DeleteTextSysexEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.974" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_DisableSort",
    "functioncall": {
      "lua": "reaper.MIDI_DisableSort(MediaItem_Take take)",
      "cpp": "void MIDI_DisableSort(MediaItem_Take* take)",
      "python": "RPR_MIDI_DisableSort(MediaItem_Take take)",
      "eel": "MIDI_DisableSort(MediaItem_Take take)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.MIDI_DisableSort",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ccidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_EnumSelCC",
    "functioncall": {
      "lua": "integer = reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)",
      "cpp": "int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)",
      "python": "Int RPR_MIDI_EnumSelCC(MediaItem_Take take, Int ccidx)",
      "eel": "int MIDI_EnumSelCC(MediaItem_Take take, int ccidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_EnumSelCC",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "evtidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_EnumSelEvts",
    "functioncall": {
      "lua": "integer = reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)",
      "cpp": "int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)",
      "python": "Int RPR_MIDI_EnumSelEvts(MediaItem_Take take, Int evtidx)",
      "eel": "int MIDI_EnumSelEvts(MediaItem_Take take, int evtidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "evtidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_EnumSelEvts",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "noteidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_EnumSelNotes",
    "functioncall": {
      "lua": "integer = reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)",
      "cpp": "int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)",
      "python": "Int RPR_MIDI_EnumSelNotes(MediaItem_Take take, Int noteidx)",
      "eel": "int MIDI_EnumSelNotes(MediaItem_Take take, int noteidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "noteidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_EnumSelNotes",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "textsyxidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_EnumSelTextSysexEvts",
    "functioncall": {
      "lua": "integer = reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)",
      "cpp": "int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)",
      "python": "Int RPR_MIDI_EnumSelTextSysexEvts(MediaItem_Take take, Int textsyxidx)",
      "eel": "int MIDI_EnumSelTextSysexEvts(MediaItem_Take take, int textsyxidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "textsyxidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_EnumSelTextSysexEvts",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\n\n    offset: MIDI ticks from previous event\n    flag: &1=selected &2=muted\n    flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\n    msg: the MIDI message.\n\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\n\nSee [MIDI\\_SetAllEvts](#MIDI_SetAllEvts).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetAllEvts",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take, string buf)",
      "cpp": "bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufNeedBig, int* bufNeedBig_sz)",
      "python": "(Boolean retval, MediaItem_Take take, String bufNeedBig, Int bufNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufNeedBig, bufNeedBig_sz)",
      "eel": "bool MIDI_GetAllEvts(MediaItem_Take take, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.MIDI_GetAllEvts",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get MIDI CC event properties.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ccidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetCC",
    "functioncall": {
      "lua": "boolean retval, boolean selected, boolean muted, number ppqpos, number chanmsg, number chan, number msg2, number msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)",
      "cpp": "bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)",
      "python": "(Boolean retval, MediaItem_Take take, Int ccidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, Int chanmsgOut, Int chanOut, Int msg2Out, Int msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)",
      "eel": "bool MIDI_GetCC(MediaItem_Take take, int ccidx, bool &amp;selected, bool &amp;muted, &amp;ppqpos, int &amp;chanmsg, int &amp;chan, int &amp;msg2, int &amp;msg3)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "chanmsg", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "msg2", "description": "" },
        { "identifier": "msg3", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_GetCC",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "chanmsg", "type": "number" },
          { "identifier": "chan", "type": "number" },
          { "identifier": "msg2", "type": "number" },
          { "identifier": "msg3", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get CC shape and bezier tension. See [MIDI\\_GetCC](#MIDI_GetCC), [MIDI\\_SetCCShape](#MIDI_SetCCShape)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer ccidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetCCShape",
    "functioncall": {
      "lua": "boolean retval, number shape, number beztension = reaper.MIDI_GetCCShape(MediaItem_Take take, integer ccidx)",
      "cpp": "bool MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut)",
      "python": "(Boolean retval, MediaItem_Take take, Int ccidx, Int shapeOut, Float beztensionOut) = RPR_MIDI_GetCCShape(take, ccidx, shapeOut, beztensionOut)",
      "eel": "bool MIDI_GetCCShape(MediaItem_Take take, int ccidx, int &shape, &beztension)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number shape", "description": "" },
        { "identifier": "number beztension", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_GetCCShape",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "shape", "type": "number" },
          { "identifier": "beztension", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get MIDI event properties.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "evtidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetEvt",
    "functioncall": {
      "lua": "boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx, boolean selected, boolean muted, number ppqpos, string msg)",
      "cpp": "bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msg, int* msg_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int evtidx, Boolean selectedOut, Boolean mutedOut, Float ppqposOut, String msg, Int msg_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msg, msg_sz)",
      "eel": "bool MIDI_GetEvt(MediaItem_Take take, int evtidx, bool &amp;selected, bool &amp;muted, &amp;ppqpos, #msg)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "msg", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "evtidx", "type": "integer" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "msg", "type": "string" }
        ],
        "method_name": "reaper.MIDI_GetEvt",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "msg", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetGrid",
    "functioncall": {
      "lua": "number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)",
      "cpp": "double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)",
      "python": "(Float retval, MediaItem_Take take, Float swingOutOptional, Float noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)",
      "eel": "double MIDI_GetGrid(MediaItem_Take take, optional &amp;swing, optional &amp;noteLen)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "swing", "description": "" },
        { "identifier": "noteLen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.MIDI_GetGrid",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See [MIDI\\_GetTrackHash](#MIDI_GetTrackHash)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "notesonly", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetHash",
    "functioncall": {
      "lua": "boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly, string hash)",
      "cpp": "bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hash, int hash_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetHash(take, notesonly, hash, hash_sz)",
      "eel": "bool MIDI_GetHash(MediaItem_Take take, bool notesonly, #hash)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "hash", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "notesonly", "type": "boolean" },
          { "identifier": "hash", "type": "string" }
        ],
        "method_name": "reaper.MIDI_GetHash",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "hash", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get MIDI note properties.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "noteidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetNote",
    "functioncall": {
      "lua": "boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, number chan, number pitch, number vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)",
      "cpp": "bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)",
      "python": "(Boolean retval, MediaItem_Take take, Int noteidx, Boolean selectedOut, Boolean mutedOut, Float startppqposOut, Float endppqposOut, Int chanOut, Int pitchOut, Int velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)",
      "eel": "bool MIDI_GetNote(MediaItem_Take take, int noteidx, bool &amp;selected, bool &amp;muted, &amp;startppqpos, &amp;endppqpos, int &amp;chan, int &amp;pitch, int &amp;vel)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "startppqpos", "description": "" },
        { "identifier": "endppqpos", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "vel", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "noteidx", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_GetNote",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "startppqpos", "type": "number" },
          { "identifier": "endppqpos", "type": "number" },
          { "identifier": "chan", "type": "number" },
          { "identifier": "pitch", "type": "number" },
          { "identifier": "vel", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ppqpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetPPQPos_EndOfMeasure",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)",
      "cpp": "double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)",
      "python": "Float RPR_MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, Float ppqpos)",
      "eel": "double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, ppqpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ppqpos", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetPPQPos_EndOfMeasure",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ppqpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetPPQPos_StartOfMeasure",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)",
      "cpp": "double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)",
      "python": "Float RPR_MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, Float ppqpos)",
      "eel": "double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, ppqpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ppqpos", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetPPQPos_StartOfMeasure",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "projqn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetPPQPosFromProjQN",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)",
      "cpp": "double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)",
      "python": "Float RPR_MIDI_GetPPQPosFromProjQN(MediaItem_Take take, Float projqn)",
      "eel": "double MIDI_GetPPQPosFromProjQN(MediaItem_Take take, projqn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "projqn", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetPPQPosFromProjQN",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "projtime", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetPPQPosFromProjTime",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)",
      "cpp": "double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)",
      "python": "Float RPR_MIDI_GetPPQPosFromProjTime(MediaItem_Take take, Float projtime)",
      "eel": "double MIDI_GetPPQPosFromProjTime(MediaItem_Take take, projtime)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "projtime", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetPPQPosFromProjTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ppqpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetProjQNFromPPQPos",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)",
      "cpp": "double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)",
      "python": "Float RPR_MIDI_GetProjQNFromPPQPos(MediaItem_Take take, Float ppqpos)",
      "eel": "double MIDI_GetProjQNFromPPQPos(MediaItem_Take take, ppqpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ppqpos", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetProjQNFromPPQPos",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ppqpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetProjTimeFromPPQPos",
    "functioncall": {
      "lua": "number = reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)",
      "cpp": "double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)",
      "python": "Float RPR_MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, Float ppqpos)",
      "eel": "double MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, ppqpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ppqpos", "type": "number" }
        ],
        "method_name": "reaper.MIDI_GetProjTimeFromPPQPos",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &amp;0x1=root, &amp;0x2=minor 2nd, &amp;0x4=major 2nd, &amp;0x8=minor 3rd, &amp;0xF=fourth, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetScale",
    "functioncall": {
      "lua": "boolean retval, number root, number scale, string name = reaper.MIDI_GetScale(MediaItem_Take take, number root, number scale, string name)",
      "cpp": "bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* name, int name_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int rootOut, Int scaleOut, String name, Int name_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, name, name_sz)",
      "eel": "bool MIDI_GetScale(MediaItem_Take take, int &amp;root, int &amp;scale, #name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "root", "description": "" },
        { "identifier": "scale", "description": "" },
        { "identifier": "name", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "root", "type": "number" },
          { "identifier": "scale", "type": "number" },
          { "identifier": "name", "type": "string" }
        ],
        "method_name": "reaper.MIDI_GetScale",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "root", "type": "number" },
          { "identifier": "scale", "type": "number" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. \n\nSee [MIDI\\_GetEvt](#MIDI_GetEvt).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "textsyxevtidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetTextSysexEvt",
    "functioncall": {
      "lua": "boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional number type, optional string msg)",
      "cpp": "bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int textsyxevtidx, Boolean selectedOutOptional, Boolean mutedOutOptional, Float ppqposOutOptional, Int typeOutOptional, String msgOptional, Int msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)",
      "eel": "bool MIDI_GetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool &amp;selected, optional bool &amp;muted, optional &amp;ppqpos, optional int &amp;type, optional #msg)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "type", "description": "" },
        { "identifier": "string msg", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "textsyxevtidx", "type": "integer" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "string", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_GetTextSysexEvt",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See [MIDI\\_GetHash](#MIDI_GetHash)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "notesonly", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_GetTrackHash",
    "functioncall": {
      "lua": "boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly, string hash)",
      "cpp": "bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hash, int hash_sz)",
      "python": "(Boolean retval, MediaTrack track, Boolean notesonly, String hash, Int hash_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hash, hash_sz)",
      "eel": "bool MIDI_GetTrackHash(MediaTrack track, bool notesonly, #hash)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "hash", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "notesonly", "type": "boolean" },
          { "identifier": "hash", "type": "string" }
        ],
        "method_name": "reaper.MIDI_GetTrackHash",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "hash", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert a new MIDI CC event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "chanmsg", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "msg2", "description": "" },
        { "identifier": "msg3", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "MIDI_InsertCC",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)",
      "cpp": "bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)",
      "python": "Boolean RPR_MIDI_InsertCC(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int chanmsg, Int chan, Int msg2, Int msg3)",
      "eel": "bool MIDI_InsertCC(MediaItem_Take take, bool selected, bool muted, ppqpos, int chanmsg, int chan, int msg2, int msg3)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "chanmsg", "type": "integer" },
          { "identifier": "chan", "type": "integer" },
          { "identifier": "msg2", "type": "integer" },
          { "identifier": "msg3", "type": "integer" }
        ],
        "method_name": "reaper.MIDI_InsertCC",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert a new MIDI event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "bytestr", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "MIDI_InsertEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)",
      "cpp": "bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)",
      "python": "Boolean RPR_MIDI_InsertEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, String bytestr, Int bytestr_sz)",
      "eel": "bool MIDI_InsertEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, \"bytestr\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "bytestr", "type": "string" }
        ],
        "method_name": "reaper.MIDI_InsertEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "startppqpos", "description": "" },
        { "identifier": "endppqpos", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "vel", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "MIDI_InsertNote",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)",
      "cpp": "bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_InsertNote(MediaItem_Take take, Boolean selected, Boolean muted, Float startppqpos, Float endppqpos, Int chan, Int pitch, Int vel, const bool noSortInOptional)",
      "eel": "bool MIDI_InsertNote(MediaItem_Take take, bool selected, bool muted, startppqpos, endppqpos, int chan, int pitch, int vel, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "startppqpos", "type": "number" },
          { "identifier": "endppqpos", "type": "number" },
          { "identifier": "chan", "type": "integer" },
          { "identifier": "pitch", "type": "integer" },
          { "identifier": "vel", "type": "integer" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_InsertNote",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "muted", "description": "" },
        { "identifier": "ppqpos", "description": "" },
        { "identifier": "type", "description": "" },
        { "identifier": "bytestr", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "MIDI_InsertTextSysexEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)",
      "cpp": "bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)",
      "python": "Boolean RPR_MIDI_InsertTextSysexEvt(MediaItem_Take take, Boolean selected, Boolean muted, Float ppqpos, Int type, String bytestr, Int bytestr_sz)",
      "eel": "bool MIDI_InsertTextSysexEvt(MediaItem_Take take, bool selected, bool muted, ppqpos, int type, \"bytestr\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "muted", "type": "boolean" },
          { "identifier": "ppqpos", "type": "number" },
          { "identifier": "type", "type": "integer" },
          { "identifier": "bytestr", "type": "string" }
        ],
        "method_name": "reaper.MIDI_InsertTextSysexEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Reset all MIDI devices",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "midi_reinit",
    "functioncall": {
      "lua": "reaper.midi_reinit()",
      "cpp": "void midi_reinit()",
      "python": "RPR_midi_reinit()",
      "eel": "midi_reinit()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.midi_reinit", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Select or deselect all MIDI content.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "select", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SelectAll",
    "functioncall": {
      "lua": "reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)",
      "cpp": "void MIDI_SelectAll(MediaItem_Take* take, bool select)",
      "python": "RPR_MIDI_SelectAll(MediaItem_Take take, Boolean select)",
      "eel": "MIDI_SelectAll(MediaItem_Take take, bool select)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "select", "type": "boolean" }
        ],
        "method_name": "reaper.MIDI_SelectAll",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\n\n    offset: MIDI ticks from previous event\n    flag: &1=selected &2=muted\n    flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\n    msg: the MIDI message.\n    \nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\n\nSee [MIDI\\_GetAllEvts](#MIDI_GetAllEvts).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetAllEvts",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)",
      "cpp": "bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)",
      "python": "Boolean RPR_MIDI_SetAllEvts(MediaItem_Take take, String buf, Int buf_sz)",
      "eel": "bool MIDI_SetAllEvts(MediaItem_Take take, \"buf\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.MIDI_SetAllEvts",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ccidx", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "mutedIn", "description": "" },
        { "identifier": "chanmsgIn", "description": "" },
        { "identifier": "chanmsgIn", "description": "" },
        { "identifier": "chanIn", "description": "" },
        { "identifier": "msg2In", "description": "" },
        { "identifier": "msg3In", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetCC",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number chanmsgIn, optional number chanIn, optional number msg2In, optional number msg3In, optional boolean noSortIn)",
      "cpp": "bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_SetCC(MediaItem_Take take, Int ccidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int chanmsgInOptional, const int chanInOptional, const int msg2InOptional, const int msg3InOptional, const bool noSortInOptional)",
      "eel": "bool MIDI_SetCC(MediaItem_Take take, int ccidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int chanmsgIn, optional int chanIn, optional int msg2In, optional int msg3In, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_SetCC",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See [MIDI\\_SetCC](#MIDI_SetCC), [MIDI\\_GetCCShape](#MIDI_GetCCShape)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer ccidx", "description": "" },
        { "identifier": "integer shape", "description": "" },
        { "identifier": "number beztension", "description": "" },
        { "identifier": "optional boolean noSortIn", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetCCShape",
    "functioncall": {
      "lua": "boolean reaper.MIDI_SetCCShape(MediaItem_Take take, integer ccidx, integer shape, number beztension, optional boolean noSortIn)",
      "cpp": "bool MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_SetCCShape(MediaItem_Take take, Int ccidx, Int shape, Float beztension, const bool noSortInOptional)",
      "eel": "bool MIDI_SetCCShape(MediaItem_Take take, int ccidx, int shape, beztension, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ccidx", "type": "integer" },
          { "identifier": "shape", "type": "integer" },
          { "identifier": "beztension", "type": "number" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_SetCCShape",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "evtidx", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "mutedIn", "description": "" },
        { "identifier": "msg", "description": "" },
        { "identifier": "ppqposIn", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)",
      "cpp": "bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_SetEvt(MediaItem_Take take, Int evtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)",
      "eel": "bool MIDI_SetEvt(MediaItem_Take take, int evtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional \"msg\", optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "evtidx", "type": "integer" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_SetEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the start/end positions of a media item that contains a MIDI take.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "startQN", "description": "" },
        { "identifier": "endQN", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetItemExtents",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)",
      "cpp": "bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)",
      "python": "Boolean RPR_MIDI_SetItemExtents(MediaItem item, Float startQN, Float endQN)",
      "eel": "bool MIDI_SetItemExtents(MediaItem item, startQN, endQN)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "startQN", "type": "number" },
          { "identifier": "endQN", "type": "number" }
        ],
        "method_name": "reaper.MIDI_SetItemExtents",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "noteidx", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "mutedIn", "description": "" },
        { "identifier": "chanIn", "description": "" },
        { "identifier": "chanIn", "description": "" },
        { "identifier": "chanIn", "description": "" },
        { "identifier": "pitchIn", "description": "" },
        { "identifier": "velIn", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetNote",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional number chanIn, optional number pitchIn, optional number velIn, optional boolean noSortIn)",
      "cpp": "bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_SetNote(MediaItem_Take take, Int noteidx, const bool selectedInOptional, const bool mutedInOptional, const double startppqposInOptional, const double endppqposInOptional, const int chanInOptional, const int pitchInOptional, const int velInOptional, const bool noSortInOptional)",
      "eel": "bool MIDI_SetNote(MediaItem_Take take, int noteidx, optional bool selectedIn, optional bool mutedIn, optional startppqposIn, optional endppqposIn, optional int chanIn, optional int pitchIn, optional int velIn, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "noteidx", "type": "integer" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_SetNote",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "textsyxevtidx", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "mutedIn", "description": "" },
        { "identifier": "typeIn", "description": "" },
        { "identifier": "typeIn", "description": "" },
        { "identifier": "msg", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "MIDI_SetTextSysexEvt",
    "functioncall": {
      "lua": "boolean = reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional number typeIn, optional string msg, optional boolean noSortIn)",
      "cpp": "bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)",
      "python": "Boolean RPR_MIDI_SetTextSysexEvt(MediaItem_Take take, Int textsyxevtidx, const bool selectedInOptional, const bool mutedInOptional, const double ppqposInOptional, const int typeInOptional, String msgOptional, Int msgOptional_sz, const bool noSortInOptional)",
      "eel": "bool MIDI_SetTextSysexEvt(MediaItem_Take take, int textsyxevtidx, optional bool selectedIn, optional bool mutedIn, optional ppqposIn, optional int typeIn, optional \"msg\", optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "textsyxevtidx", "type": "integer" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.MIDI_SetTextSysexEvt",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_Sort",
    "functioncall": {
      "lua": "reaper.MIDI_Sort(MediaItem_Take take)",
      "cpp": "void MIDI_Sort(MediaItem_Take* take)",
      "python": "RPR_MIDI_Sort(MediaItem_Take take)",
      "eel": "MIDI_Sort(MediaItem_Take take)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.MIDI_Sort",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get a pointer to the focused MIDI editor window\nsee [MIDIEditor\\_GetMode](#MIDIEditor_GetMode), [MIDIEditor\\_OnCommand](#MIDIEditor_OnCommand)",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "MIDIEditor_GetActive",
    "functioncall": {
      "lua": "HWND = reaper.MIDIEditor_GetActive()",
      "cpp": "HWND MIDIEditor_GetActive()",
      "python": "HWND RPR_MIDIEditor_GetActive()",
      "eel": "HWND MIDIEditor_GetActive()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.MIDIEditor_GetActive",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee [MIDIEditor\\_GetActive](#MIDIEditor_GetActive), [MIDIEditor\\_OnCommand](#MIDIEditor_OnCommand)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midieditor", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_GetMode",
    "functioncall": {
      "lua": "integer = reaper.MIDIEditor_GetMode(HWND midieditor)",
      "cpp": "int MIDIEditor_GetMode(HWND midieditor)",
      "python": "Int RPR_MIDIEditor_GetMode(HWND midieditor)",
      "eel": "int MIDIEditor_GetMode(HWND midieditor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "midieditor", "type": "HWND" }],
        "method_name": "reaper.MIDIEditor_GetMode",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get settings from a MIDI editor. setting_desc can be:\n    snap\\_enabled: returns 0 or 1\n    active\\_note\\_row: returns 0-127\n    last\\_clicked\\_cc\\_lane: \n        returns 0-127=CC, \n                0x100|(0-31)=14-bit CC, \n                0x200=velocity, \n                0x201=pitch, \n                0x202=program, \n                0x203=channel pressure, \n                0x204=bank/program select, \n                0x205=text, \n                0x206=sysex, \n                0x207=off velocity, \n                0x208=notation events, \n                0x210=media item lane\n    default\\_note\\_vel: returns 0-127\n    default\\_note\\_chan: returns 0-15\n    default\\_note\\_len: returns default length in MIDI ticks\n    scale\\_enabled: returns 0-1\n    scale\\_root: returns 0-12 (0=C)\n    if setting\\_desc is unsupported, the function returns -1.\n    See [MIDIEditor\\_SetSetting\\_int](#MIDIEditor_SetSetting_int), [MIDIEditor\\_GetActive](#MIDIEditor_GetActive), [MIDIEditor\\_GetSetting\\_str](#MIDIEditor_GetSetting_str)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midieditor", "description": "" },
        { "identifier": "setting_desc", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_GetSetting_int",
    "functioncall": {
      "lua": "integer = reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)",
      "cpp": "int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)",
      "python": "Int RPR_MIDIEditor_GetSetting_int(HWND midieditor, String setting_desc)",
      "eel": "int MIDIEditor_GetSetting_int(HWND midieditor, \"setting_desc\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midieditor", "type": "HWND" },
          { "identifier": "setting_desc", "type": "string" }
        ],
        "method_name": "reaper.MIDIEditor_GetSetting_int",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get settings from a MIDI editor. setting\\_desc can be:\nlast\\_clicked\\_cc\\_lane: returns text description (\"velocity\", \"pitch\", etc)\nscale: returns the scale record, for example \"102034050607\" for a major scale\nif setting\\_desc is unsupported, the function returns false.\n        \nSee [MIDIEditor\\_GetActive](#MIDIEditor_GetActive), [MIDIEditor\\_GetSetting_int](#MIDIEditor_GetSetting_int)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midieditor", "description": "" },
        { "identifier": "setting_desc", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_GetSetting_str",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc, string buf)",
      "cpp": "bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* buf, int buf_sz)",
      "python": "(Boolean retval, HWND midieditor, String setting_desc, String buf, Int buf_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, buf, buf_sz)",
      "eel": "bool MIDIEditor_GetSetting_str(HWND midieditor, \"setting_desc\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midieditor", "type": "HWND" },
          { "identifier": "setting_desc", "type": "string" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.MIDIEditor_GetSetting_str",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the take that is currently being edited in this MIDI editor",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midieditor", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_GetTake",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.MIDIEditor_GetTake(HWND midieditor)",
      "cpp": "MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)",
      "python": "MediaItem_Take RPR_MIDIEditor_GetTake(HWND midieditor)",
      "eel": "MediaItem_Take MIDIEditor_GetTake(HWND midieditor)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "midieditor", "type": "HWND" }],
        "method_name": "reaper.MIDIEditor_GetTake",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee [MIDIEditor\\_OnCommand](#MIDIEditor_OnCommand)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "command_id", "description": "" },
        { "identifier": "islistviewcommand", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_LastFocused_OnCommand",
    "functioncall": {
      "lua": "boolean = reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)",
      "cpp": "bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)",
      "python": "Boolean RPR_MIDIEditor_LastFocused_OnCommand(Int command_id, Boolean islistviewcommand)",
      "eel": "bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "command_id", "type": "integer" },
          { "identifier": "islistviewcommand", "type": "boolean" }
        ],
        "method_name": "reaper.MIDIEditor_LastFocused_OnCommand",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee [MIDIEditor\\_GetActive](#MIDIEditor_GetActive), [MIDIEditor\\_LastFocused\\_OnCommand](#MIDIEditor_LastFocused_OnCommand)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midieditor", "description": "" },
        { "identifier": "command_id", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_OnCommand",
    "functioncall": {
      "lua": "boolean = reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)",
      "cpp": "bool MIDIEditor_OnCommand(HWND midieditor, int command_id)",
      "python": "Boolean RPR_MIDIEditor_OnCommand(HWND midieditor, Int command_id)",
      "eel": "bool MIDIEditor_OnCommand(HWND midieditor, int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midieditor", "type": "HWND" },
          { "identifier": "command_id", "type": "integer" }
        ],
        "method_name": "reaper.MIDIEditor_OnCommand",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set settings for a MIDI editor. setting\\_desc can be:\nactive\\_note\\_row: 0-127\nSee [MIDIEditor\\_GetSetting_int](#MIDIEditor_GetSetting_int)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "HWND midieditor", "description": "" },
        { "identifier": "string setting_desc", "description": "" },
        { "identifier": "integer setting", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "MIDIEditor_SetSetting_int",
    "functioncall": {
      "lua": "boolean retval = reaper.MIDIEditor_SetSetting_int(HWND midieditor, string setting_desc, integer setting)",
      "cpp": "bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)",
      "python": "Boolean RPR_MIDIEditor_SetSetting_int(HWND midieditor, String setting_desc, Int setting)",
      "eel": "bool MIDIEditor_SetSetting_int(HWND midieditor, \"setting_desc\", int setting)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midieditor", "type": "HWND" },
          { "identifier": "setting_desc", "type": "string" },
          { "identifier": "setting", "type": "integer" }
        ],
        "method_name": "reaper.MIDIEditor_SetSetting_int",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts a double-number to its panstr-equivalent.\n        \nSee [parsepanstr](#parsepanstr) for its counterpart. ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string strNeed64", "description": "just set this to \"\"" },
        {
          "identifier": "number pan",
          "description": "the pan-number which shall be converted to the panstring; valid numbers are -1.0 to 1.0 even if you can set higher ones"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "mkpanstr",
    "functioncall": {
      "lua": "string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)",
      "cpp": "void mkpanstr(char* strNeed64, double pan)",
      "python": "(String strNeed64, Float pan) = RPR_mkpanstr(strNeed64, pan)",
      "eel": "mkpanstr(#strNeed64, pan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string strNeed64",
          "description": "the converted panstring, from -100% over center to 100%"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "strNeed64", "type": "string" },
          { "identifier": "pan", "type": "number" }
        ],
        "method_name": "reaper.mkpanstr",
        "return_values": [{ "identifier": "strNeed64", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "creates a vol-pan-string, which holds a readable representation of the vol and pan-values.\n\nThe format is like \"+6.02db center\" or \"+inf +80R\", etc\n\nsee [mkpanstr](#mkpanstr) and [mkvolstr](#mkvolstr) for the individual pan/vol-string functions.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "stirng strNeed64", "description": "just set this to \"\"" },
        {
          "identifier": "number vol",
          "description": "the volume-value, which you want to convert into db"
        },
        {
          "identifier": "number pan",
          "description": "the pan-value, which you want to convert into its percentage value; valid -1.0 to 1.0"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "mkvolpanstr",
    "functioncall": {
      "lua": "string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)",
      "cpp": "void mkvolpanstr(char* strNeed64, double vol, double pan)",
      "python": "(String strNeed64, Float vol, Float pan) = RPR_mkvolpanstr(strNeed64, vol, pan)",
      "eel": "mkvolpanstr(#strNeed64, vol, pan)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string strNeed64", "description": "the converted volpan-string" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "strNeed64", "type": "string" },
          { "identifier": "vol", "type": "number" },
          { "identifier": "pan", "type": "number" }
        ],
        "method_name": "reaper.mkvolpanstr",
        "return_values": [{ "identifier": "strNeed64", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts a volume-value into a string-representation of it as dB.\n\nNote: Unlike panstr, there is no parsevolstr-string-function available!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string strNeed64", "description": "just set this to \"\"" },
        {
          "identifier": "number vol",
          "description": "the volume-value, which shall be converted; 0, -inf; 1, 0dB; 1.412, +3dB"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "mkvolstr",
    "functioncall": {
      "lua": "string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)",
      "cpp": "void mkvolstr(char* strNeed64, double vol)",
      "python": "(String strNeed64, Float vol) = RPR_mkvolstr(strNeed64, vol)",
      "eel": "mkvolstr(#strNeed64, vol)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "stirng strNeed64", "description": "the converted vol-string" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "strNeed64", "type": "string" },
          { "identifier": "vol", "type": "number" }
        ],
        "method_name": "reaper.mkvolstr",
        "return_values": [{ "identifier": "strNeed64", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "edit", "cursor", "move"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves the Edit Cursor.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number adjamt",
          "description": "move of edit cursor by seconds, relative from the current position. positive-values=forward, negative values=backwards"
        },
        {
          "identifier": "boolean dosel",
          "description": "true, create selection from old edit-cursor-position to the new position; false, just move the edit cursor"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MoveEditCursor",
    "functioncall": {
      "lua": "reaper.MoveEditCursor(number adjamt, boolean dosel)",
      "cpp": "void MoveEditCursor(double adjamt, bool dosel)",
      "python": "RPR_MoveEditCursor(Float adjamt, Boolean dosel)",
      "eel": "MoveEditCursor(adjamt, bool dosel)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "adjamt", "type": "number" },
          { "identifier": "dosel", "type": "boolean" }
        ],
        "method_name": "reaper.MoveEditCursor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "move", "item", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves a MediaItem-object to a specific MediaTrack.\n\nCall [UpdateArrange](#UpdateArrange) to update the arrangeview after that.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "the MediaItem, that shall be moved" },
        {
          "identifier": "MediaTrack desttr",
          "description": "the MediaTrack, to which the MediaItem shall be moved to"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "MoveMediaItemToTrack",
    "functioncall": {
      "lua": "boolean = reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)",
      "cpp": "bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)",
      "python": "Boolean RPR_MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)",
      "eel": "bool MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean", "description": "true, if move succeeded; false, if not" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "desttr", "type": "MediaTrack" }
        ],
        "method_name": "reaper.MoveMediaItemToTrack",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "mute", "tracks", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Mutes all tracks",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean mute",
          "description": "true, mutes all tracks; false, unmutes all tracks"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MuteAllTracks",
    "functioncall": {
      "lua": "reaper.MuteAllTracks(boolean mute)",
      "cpp": "void MuteAllTracks(bool mute)",
      "python": "RPR_MuteAllTracks(Boolean mute)",
      "eel": "MuteAllTracks(bool mute)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "mute", "type": "boolean" }],
        "method_name": "reaper.MuteAllTracks",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [
      "userinterface",
      "viewport",
      "multi monitor",
      "get",
      "workarea",
      "full screen resolution"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "With r.??? and sr.??? parameters, you can define coordinates of a rectangle. \nThe function will return the left/top/right/bottom coordinates of the viewport that that rectangle is on/closest to.            ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number r.left", "description": "left coordinate of the rectangle" },
        { "identifier": "number r.top", "description": "top coordinate of the rectangle" },
        { "identifier": "number r.right", "description": "right coordinate of the rectangle" },
        { "identifier": "number r.bot", "description": "bottom coordinate of the rectangle" },
        {
          "identifier": "number sr.left",
          "description": "left coordinate of the rectangle in multimonitor usecases"
        },
        {
          "identifier": "number sr.top",
          "description": "top coordinate of the rectangle in multimonitor usecases"
        },
        {
          "identifier": "number sr.right",
          "description": "right coordinate of the rectangle in multimonitor usecases"
        },
        {
          "identifier": "number sr.bot",
          "description": "bottom coordinate of the rectangle in mutlimonitor usecases"
        },
        {
          "identifier": "boolean wantWorkArea",
          "description": "true, returns workspace only; false, full monitor coordinates of the returned viewport"
        }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "my_getViewport",
    "functioncall": {
      "lua": "integer left, integer top, integer right, integer bottom = reaper.my_getViewport(number r.left, number r.top, number r.right, number r.bot, number sr.left, number sr.top, number sr.right, number sr.bot, boolean wantWorkArea)",
      "cpp": "void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)",
      "python": "RPR_my_getViewport(RECT r, const RECT sr, Boolean wantWorkArea)",
      "eel": "my_getViewport(int &amp;r.left, int &amp;r.top, int &amp;r.right, int &amp;r.bot, int sr.left, int sr.top, int sr.right, int sr.bot, bool wantWorkArea)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer left", "description": "left coordinate of the returned viewport" },
        { "identifier": "integer top", "description": "top coordinate of the returned viewport" },
        {
          "identifier": "integer right",
          "description": "right coordinate of the returned viewport"
        },
        {
          "identifier": "integer bottom",
          "description": "bottom coordinate of the returned viewport"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "r", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "sr", "type": "number" },
          { "identifier": "sr", "type": "number" },
          { "identifier": "sr", "type": "number" },
          { "identifier": "sr", "type": "number" },
          { "identifier": "wantWorkArea", "type": "boolean" }
        ],
        "method_name": "reaper.my_getViewport",
        "return_values": [
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "command", "id", "actioncommandid", "lookup"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the command ID number for named command that was registered by an extension such as \"\\_SWS\\_ABOUT\" or \"\\_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.\n\nsee [Main\\_OnCommand](#Main_OnCommand) for executing actions with command-ID-numbers.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string command_name",
          "description": "the ActionCommandID of the script/action, whose command-id number you want. Must start with \\_, eg. \"SWS\\_ABOUT\" -> \"\\_SWS\\_ABOUT\""
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NamedCommandLookup",
    "functioncall": {
      "lua": "integer = reaper.NamedCommandLookup(string command_name)",
      "cpp": "int NamedCommandLookup(const char* command_name)",
      "python": "Int RPR_NamedCommandLookup(String command_name)",
      "eel": "int NamedCommandLookup(\"command_name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the command-id-number of the script/action, which can be used to e.g. run the action, toggle actions, refresh toolbars, etc."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "command_name", "type": "string" }],
        "method_name": "reaper.NamedCommandLookup",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "pause", "play", "rec", "toggle"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Toggles pause/play during play or pause/rec during recording in the current project.\nWhen stopped, it will start paused play.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "OnPauseButton",
    "functioncall": {
      "lua": "reaper.OnPauseButton()",
      "cpp": "void OnPauseButton()",
      "python": "RPR_OnPauseButton()",
      "eel": "OnPauseButton()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.OnPauseButton", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "pause", "play", "rec", "toggle", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Toggles pause/play during play or pause/rec during recording in a specific project.\nWhen stopped, it will start paused play.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "OnPauseButtonEx",
    "functioncall": {
      "lua": "reaper.OnPauseButtonEx(ReaProject proj)",
      "cpp": "void OnPauseButtonEx(ReaProject* proj)",
      "python": "RPR_OnPauseButtonEx(ReaProject proj)",
      "eel": "OnPauseButtonEx(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.OnPauseButtonEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "play", "editcursor", "start"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Starts playing at edit-cursor. Will stop recording, when executed during recording.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "OnPlayButton",
    "functioncall": {
      "lua": "reaper.OnPlayButton()",
      "cpp": "void OnPlayButton()",
      "python": "RPR_OnPlayButton()",
      "eel": "OnPlayButton()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.OnPlayButton", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "play", "editcursor", "start", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Starts playing at edit-cursor. Will stop recording, when executed during recording.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "OnPlayButtonEx",
    "functioncall": {
      "lua": "reaper.OnPlayButtonEx(ReaProject proj)",
      "cpp": "void OnPlayButtonEx(ReaProject* proj)",
      "python": "RPR_OnPlayButtonEx(ReaProject proj)",
      "eel": "OnPlayButtonEx(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.OnPlayButtonEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "stop", "play", "recording"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Stops playing/recording.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "OnStopButton",
    "functioncall": {
      "lua": "reaper.OnStopButton()",
      "cpp": "void OnStopButton()",
      "python": "RPR_OnStopButton()",
      "eel": "OnStopButton()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.OnStopButton", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "stop", "play", "recording"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Stops playing/recording.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "OnStopButtonEx",
    "functioncall": {
      "lua": "reaper.OnStopButtonEx(ReaProject proj)",
      "cpp": "void OnStopButtonEx(ReaProject* proj)",
      "python": "RPR_OnStopButtonEx(ReaProject proj)",
      "eel": "OnStopButtonEx(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.OnStopButtonEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "theme", "load", "open", "filename"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Open a different installed theme.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string fn",
          "description": "the path+filename of the color-theme-file, usually with the \".ReaperTheme\"-extension"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "OpenColorThemeFile",
    "functioncall": {
      "lua": "boolean retval = reaper.OpenColorThemeFile(string fn)",
      "cpp": "bool OpenColorThemeFile(const char* fn)",
      "python": "Boolean RPR_OpenColorThemeFile(String fn)",
      "eel": "bool OpenColorThemeFile(\"fn\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, changing theme worked; false, changing theme didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "fn", "type": "string" }],
        "method_name": "reaper.OpenColorThemeFile",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "media explorer", "open", "filename", "audio", "play"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Opens mediafn in the Media Explorer.\n\nIf you just want to change folder in MediaExplorer, give it a path instead of a file and set play to false.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string mediafn",
          "description": "the filename/folder, to be opened with the Media Explorer"
        },
        {
          "identifier": "boolean play",
          "description": "true, start/toggle playing immediately; false, just select file without playing"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "OpenMediaExplorer",
    "functioncall": {
      "lua": "HWND = reaper.OpenMediaExplorer(string mediafn, boolean play)",
      "cpp": "HWND OpenMediaExplorer(const char* mediafn, bool play)",
      "python": "HWND RPR_OpenMediaExplorer(String mediafn, Boolean play)",
      "eel": "HWND OpenMediaExplorer(\"mediafn\", bool play)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "the window of the Media Explorer" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mediafn", "type": "string" },
          { "identifier": "play", "type": "boolean" }
        ],
        "method_name": "reaper.OpenMediaExplorer",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["AudioMidi Devicemanagement"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns. Only supported if control surface support was enabled when installing REAPER.\n\nThis is not broadcast outside of Reaper, so you can't control devices, plugins, etc with it!\n\nMessages sent via this function can be used for parameter-learn/modulation and as shortcuts for scripts.\nThe parameter valueIn can be retrieved with the returnvalue val of the function reaper.get_action_context, so sending values to a script is possible that way.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string message",
          "description": "the osc-message, which shall be sent to Reaper"
        },
        {
          "identifier": "optional number valueIn",
          "description": "a number, which can be sent to scripts who are started by the osc-message"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "OscLocalMessageToHost",
    "functioncall": {
      "lua": "reaper.OscLocalMessageToHost(string message, optional number valueIn)",
      "cpp": "void OscLocalMessageToHost(const char* message, const double* valueInOptional)",
      "python": "RPR_OscLocalMessageToHost(String message, const double valueInOptional)",
      "eel": "OscLocalMessageToHost(\"message\", optional valueIn)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "message", "type": "string" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.OscLocalMessageToHost",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [
      "helperfunctions",
      "timestring",
      "hour",
      "minute",
      "second",
      "millisecond",
      "parse",
      "convert",
      "time"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See [parse\\_timestr_pos](#parse_timestr_pos), [parse\\_timestr_len](#parse_timestr_len).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "the timestring to convert (hh:mm:ss.sss). Each position of the time can be one digit only, means: \"1:2:3.4\" is valid. Milliseconds can be more than 3 digits. Hours, seconds, minutes with more than two digits will be converted correctly \"1:120\" will be converted to 180 seconds."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "parse_timestr",
    "functioncall": {
      "lua": "number timestr = reaper.parse_timestr(string buf)",
      "cpp": "double parse_timestr(const char* buf)",
      "python": "Float RPR_parse_timestr(String buf)",
      "eel": "double parse_timestr(\"buf\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number timestr", "description": "the converted time in seconds" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "buf", "type": "string" }],
        "method_name": "reaper.parse_timestr",
        "return_values": [{ "identifier": "timestr", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts a time-string in its time-in-seconds-representation\n        \ntime formatting mode overrides: -1=proj default.\n0, time\n1, measures.beats + time\n2, measures.beats\n3, seconds\n4, samples\n5, h:m:s:f",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "the time-string, which shall be converted into its time in seconds"
        },
        { "identifier": "number offset", "description": "??Buggy??" },
        {
          "identifier": "integer modeoverride",
          "description": "the format, in which the timestring is"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "parse_timestr_len",
    "functioncall": {
      "lua": "number = reaper.parse_timestr_len(string buf, number offset, integer modeoverride)",
      "cpp": "double parse_timestr_len(const char* buf, double offset, int modeoverride)",
      "python": "Float RPR_parse_timestr_len(String buf, Float offset, Int modeoverride)",
      "eel": "double parse_timestr_len(\"buf\", offset, int modeoverride)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number",
          "description": "the time, as interpreted from the buf-parameter "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "buf", "type": "string" },
          { "identifier": "offset", "type": "number" },
          { "identifier": "modeoverride", "type": "integer" }
        ],
        "method_name": "reaper.parse_timestr_len",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [
      "helperfunctions",
      "parse",
      "timestring",
      "measures",
      "beats",
      "samples",
      "seconds",
      "hours",
      "time",
      "minutes",
      "seconds"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Parse time string and convert it into seconds.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string buf",
          "description": "the timestring to be parsed and converted into seconds"
        },
        {
          "identifier": "integer modeoverride",
          "description": "the format of the timestring to parse and convert\n-1, proj default.\n0, time\n1, measures.beats + time\n2, measures.beats\n3, seconds\n4, samples\n5, h:m:s:f"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "parse_timestr_pos",
    "functioncall": {
      "lua": "number = reaper.parse_timestr_pos(string buf, integer modeoverride)",
      "cpp": "double parse_timestr_pos(const char* buf, int modeoverride)",
      "python": "Float RPR_parse_timestr_pos(String buf, Int modeoverride)",
      "eel": "double parse_timestr_pos(\"buf\", int modeoverride)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "the converted time in seconds" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "buf", "type": "string" },
          { "identifier": "modeoverride", "type": "integer" }
        ],
        "method_name": "reaper.parse_timestr_pos",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts a string created by [mkpanstr](#mkpanstr) back to it's double-number.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string str",
          "description": "a panstring, whose value you want to convert back to its double-equivalent"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "parsepanstr",
    "functioncall": {
      "lua": "number retval = reaper.parsepanstr(string str)",
      "cpp": "double parsepanstr(const char* str)",
      "python": "Float RPR_parsepanstr(String str)",
      "eel": "double parsepanstr(\"str\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number retval", "description": "the double-value of the panstring" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "string" }],
        "method_name": "reaper.parsepanstr",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "enumerates the available PCM-sink-formats, which means, the output-formats available in Reaper",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the index of the sink-format, beginning with 0"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Sink_Enum",
    "functioncall": {
      "lua": "integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)",
      "cpp": "unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)",
      "python": "Int RPR_PCM_Sink_Enum(Int idx, String descstrOut)",
      "eel": "uint PCM_Sink_Enum(int idx, #descstr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "a number, which represents the PCM-sink-format as an integer-representation\n2002876005 - WAV (evaw)\n1634297446 - AIFF (ffia)\n1769172768 - Audio CD Image (CUE/BIN format) ( osi)\n1684303904 - DDP ( pdd)\n1718378851 - FLAC (calf)\n1836069740 - MP3 (encoder by LAME project) (l3pm)\n1869047670 - OGG Vorbis (vggo)\n1332176723 - OGG Opus (SggO)\n1179012432 - Video (ffmpeg/libav encoder) (PMFF)\n1195984416 - Video (GIF) ( FIG)\n1279477280 - Video (LCF) ( FCL)\n2004250731 - WavPack lossless compressor (kpvw)\nmaybe others as well?"
        },
        {
          "identifier": "string descstr",
          "description": "the PCM-sink-format\n0 - WAV\n1 - AIFF\n2 - Audio CD Image (CUE/BIN format)\n3 - DDP\n4 - FLAC\n5 - MP3 (encoder by LAME project)\n6 - OGG Vorbis\n7 - OGG Opus\n8 - Video (ffmpeg/libav encoder)\n9 - Video (GIF)\n10 - Video (LCF)\n11 - WavPack lossless compressor\nmaybe others as well?"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "idx", "type": "integer" }],
        "method_name": "reaper.PCM_Sink_Enum",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "descstr", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "allows you to retrieve the file-extension of a certain PCM-sink/fileformat available.\n\nSee [PCM\\_Sink\\_Enum](#PCM_Sink_Enum) to enumerate available PCM-sink/fileformats.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string data",
          "description": "the format, whose extension-format you'd like to get:\nevaw, extension: \"wav\"\nffia, extension: \"aif\"\n osi, extension: \"cue\"\n pdd, extension: \"DAT\"\ncalf, extension: \"flac\"\nl3pm, extension: \"mp3\"\nvggo, extension: \"ogg\"\nSggO, extension: \"opus\"\nPMFF, extension: \"avi\"\n FIG, extension: \"gif\"\n FCL, extension: \"lcf\"\nkpvw, extension: \"wv\"\nmaybe others?"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Sink_GetExtension",
    "functioncall": {
      "lua": "string = reaper.PCM_Sink_GetExtension(string data)",
      "cpp": "const char* PCM_Sink_GetExtension(const char* data, int data_sz)",
      "python": "String RPR_PCM_Sink_GetExtension(String data, Int data_sz)",
      "eel": "bool PCM_Sink_GetExtension(#retval, \"data\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the extension returned by a certain" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "data", "type": "string" }],
        "method_name": "reaper.PCM_Sink_GetExtension",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "cfg", "description": "" },
        { "identifier": "hwndParent", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "PCM_Sink_ShowConfig",
    "functioncall": {
      "lua": "HWND = reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)",
      "cpp": "HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)",
      "python": "HWND RPR_PCM_Sink_ShowConfig(String cfg, Int cfg_sz, HWND hwndParent)",
      "eel": "HWND PCM_Sink_ShowConfig(\"cfg\", HWND hwndParent)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "cfg", "type": "string" },
          { "identifier": "hwndParent", "type": "HWND" }
        ],
        "method_name": "reaper.PCM_Sink_ShowConfig",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "See [PCM\\_Source\\_CreateFromFileEx](#PCM_Source_CreateFromFileEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "filename", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_CreateFromFile",
    "functioncall": {
      "lua": "PCM_source = reaper.PCM_Source_CreateFromFile(string filename)",
      "cpp": "PCM_source* PCM_Source_CreateFromFile(const char* filename)",
      "python": "PCM_source RPR_PCM_Source_CreateFromFile(String filename)",
      "eel": "PCM_source PCM_Source_CreateFromFile(\"filename\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "filename", "type": "string" }],
        "method_name": "reaper.PCM_Source_CreateFromFile",
        "return_values": [{ "type": "PCM_source" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "filename", "description": "" },
        { "identifier": "forcenoMidiImp", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_CreateFromFileEx",
    "functioncall": {
      "lua": "PCM_source = reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)",
      "cpp": "PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)",
      "python": "PCM_source RPR_PCM_Source_CreateFromFileEx(String filename, Boolean forcenoMidiImp)",
      "eel": "PCM_source PCM_Source_CreateFromFileEx(\"filename\", bool forcenoMidiImp)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "filename", "type": "string" },
          { "identifier": "forcenoMidiImp", "type": "boolean" }
        ],
        "method_name": "reaper.PCM_Source_CreateFromFileEx",
        "return_values": [{ "type": "PCM_source" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "sourcetype", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_CreateFromType",
    "functioncall": {
      "lua": "PCM_source = reaper.PCM_Source_CreateFromType(string sourcetype)",
      "cpp": "PCM_source* PCM_Source_CreateFromType(const char* sourcetype)",
      "python": "PCM_source RPR_PCM_Source_CreateFromType(String sourcetype)",
      "eel": "PCM_source PCM_Source_CreateFromType(\"sourcetype\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "sourcetype", "type": "string" }],
        "method_name": "reaper.PCM_Source_CreateFromType",
        "return_values": [{ "type": "PCM_source" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_Destroy",
    "functioncall": {
      "lua": "reaper.PCM_Source_Destroy(PCM_source src)",
      "cpp": "void PCM_Source_Destroy(PCM_source* src)",
      "python": "RPR_PCM_Source_Destroy(PCM_source src)",
      "eel": "PCM_Source_Destroy(PCM_source src)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "src", "type": "PCM_source" }],
        "method_name": "reaper.PCM_Source_Destroy",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). \nReturn value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). \nextra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "peakrate", "description": "" },
        { "identifier": "starttime", "description": "" },
        { "identifier": "numchannels", "description": "" },
        { "identifier": "numsamplesperchannel", "description": "" },
        { "identifier": "want_extra_type", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_GetPeaks",
    "functioncall": {
      "lua": "integer = reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)",
      "cpp": "int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)",
      "python": "(Int retval, PCM_source src, Float peakrate, Float starttime, Int numchannels, Int numsamplesperchannel, Int want_extra_type, Float buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)",
      "eel": "int PCM_Source_GetPeaks(PCM_source src, peakrate, starttime, int numchannels, int numsamplesperchannel, int want_extra_type, buffer_ptr buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "peakrate", "type": "number" },
          { "identifier": "starttime", "type": "number" },
          { "identifier": "numchannels", "type": "integer" },
          { "identifier": "numsamplesperchannel", "type": "integer" },
          { "identifier": "want_extra_type", "type": "integer" },
          { "identifier": "buf", "type": "array" }
        ],
        "method_name": "reaper.PCM_Source_GetPeaks",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_GetSectionInfo",
    "functioncall": {
      "lua": "boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)",
      "cpp": "bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)",
      "python": "(Boolean retval, PCM_source src, Float offsOut, Float lenOut, Boolean revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)",
      "eel": "bool PCM_Source_GetSectionInfo(PCM_source src, &amp;offs, &amp;len, bool &amp;rev)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "offs", "description": "" },
        { "identifier": "len", "description": "" },
        { "identifier": "rev", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "src", "type": "PCM_source" }],
        "method_name": "reaper.PCM_Source_GetSectionInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "offs", "type": "number" },
          { "identifier": "len", "type": "number" },
          { "identifier": "rev", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "amt", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PluginWantsAlwaysRunFx",
    "functioncall": {
      "lua": "reaper.PluginWantsAlwaysRunFx(integer amt)",
      "cpp": "void PluginWantsAlwaysRunFx(int amt)",
      "python": "RPR_PluginWantsAlwaysRunFx(Int amt)",
      "eel": "PluginWantsAlwaysRunFx(int amt)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "amt", "type": "integer" }],
        "method_name": "reaper.PluginWantsAlwaysRunFx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "prevent_count", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PreventUIRefresh",
    "functioncall": {
      "lua": "reaper.PreventUIRefresh(integer prevent_count)",
      "cpp": "void PreventUIRefresh(int prevent_count)",
      "python": "RPR_PreventUIRefresh(Int prevent_count)",
      "eel": "PreventUIRefresh(int prevent_count)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "prevent_count", "type": "integer" }],
        "method_name": "reaper.PreventUIRefresh",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.12" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Opens the actionlist and allows you to get, which action the user selected.\n\nSo the user can select numerous actions, and when they hit the select or select/close-button, you can get the actions selected.\n\nTo start a new session, pass 1 as parameter session_mode.\n\nAfter that, repeatedly call the function with session_mode=0, which will return the selected actions.\n        - -1, the actionlist is closed\n        - 0, no action has been selected\n        - any other number, this action has been selected.\nIn the latter case, call the function until it returns 0 again to get all selected actions.\n\nIf you're finished, call the function with session_mode=-1\n\n\nWhen finished, call with session_mode=-1.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer session_mode",
          "description": "1, start a new session; 0, retrieve selected actions; -1, end a session"
        },
        {
          "identifier": "integer init_id",
          "description": "the command-id, which shall be preselected, when the actionlist opens"
        },
        {
          "identifier": "integer section_id",
          "description": "the section in which you want to let the user select\n0 - Main\n100 - Main (alt recording)\n32060 - MIDI Editor\n32061 - MIDI Event List Editor\n32062 - MIDI Inline Editor\n32063 - Media Explorer "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "PromptForAction",
    "functioncall": {
      "lua": "integer retval = reaper.PromptForAction(integer session_mode, integer init_id, integer section_id)",
      "cpp": "int PromptForAction(int session_mode, int init_id, int section_id)",
      "python": "Int RPR_PromptForAction(Int session_mode, Int init_id, Int section_id)",
      "eel": "int PromptForAction(int session_mode, int init_id, int section_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "the selected actions\n-1, actionlist is not opened\n0, no action has been selected yet/you retrieved all selected actions\nany other number, the selected actions; call repeatedly to get all selected commandids until the function returns 0 again"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "session_mode", "type": "integer" },
          { "identifier": "init_id", "type": "integer" },
          { "identifier": "section_id", "type": "integer" }
        ],
        "method_name": "reaper.PromptForAction",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Causes REAPER to display the error message after the current ReaScript finishes. When Reaper's IDE is open, it will display it at the bottom of the IDE.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "errmsg", "description": "the message to show" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ReaScriptError",
    "functioncall": {
      "lua": "reaper.ReaScriptError(string errmsg)",
      "cpp": "void ReaScriptError(const char* errmsg)",
      "python": "RPR_ReaScriptError(String errmsg)",
      "eel": "ReaScriptError(\"errmsg\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "errmsg", "type": "string" }],
        "method_name": "reaper.ReaScriptError",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "create", "recursive", "directory"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Creates a new directory. \n\nYou can recursivly create directories, means: if the higher directories don't exist, the will also be automatically created.\n\nreturns positive value on success, 0 on failure.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "path", "description": "the directory-path to be created" },
        { "identifier": "ignored", "description": "unknown" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "RecursiveCreateDirectory",
    "functioncall": {
      "lua": "integer = reaper.RecursiveCreateDirectory(string path, integer ignored)",
      "cpp": "int RecursiveCreateDirectory(const char* path, size_t ignored)",
      "python": "Int RPR_RecursiveCreateDirectory(String path, Int ignored)",
      "eel": "int RecursiveCreateDirectory(\"path\", size_t ignored)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "0, failure; 1 and higher, success" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "path", "type": "string" },
          { "identifier": "ignored", "type": "integer" }
        ],
        "method_name": "reaper.RecursiveCreateDirectory",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "reduce", "open files"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). \n\nreturns number of files closed by this call.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer flags",
          "description": "influences, how the garbage collection shall be\n&1, incrementally\n&2, aggressively(files need to be reopened after that, if needed)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "reduce_open_files",
    "functioncall": {
      "lua": "integer reaper.reduce_open_files(integer flags)",
      "cpp": "int reduce_open_files(int flags)",
      "python": "Int RPR_reduce_open_files(Int flags)",
      "eel": "int reduce_open_files(int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "the number of closed files" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.reduce_open_files",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterfacer", "toolbar", "toggle", "command"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Refreshes the toolbar-buttons, associated with a specific command_id/action\nSee [RefreshToolbar2](#RefreshToolbar2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "command_id",
          "description": "the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "RefreshToolbar",
    "functioncall": {
      "lua": "reaper.RefreshToolbar(integer command_id)",
      "cpp": "void RefreshToolbar(int command_id)",
      "python": "RPR_RefreshToolbar(Int command_id)",
      "eel": "RefreshToolbar(int command_id)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "command_id", "type": "integer" }],
        "method_name": "reaper.RefreshToolbar",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterfacer", "toolbar", "toggle", "command", "section"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Refreshes the toolbar-buttons, associated with a specific command_id/action within a certain section",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "section_id", "description": "the section, in which the action lies" },
        {
          "identifier": "command_id",
          "description": "the command_id-number of the action, whose toolbar button you want to toggle. see [NamedCommandLookup](#NamedCommandLookup) for getting command-ids from scripts and 3rd-party actions"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "RefreshToolbar2",
    "functioncall": {
      "lua": "reaper.RefreshToolbar2(integer section_id, integer command_id)",
      "cpp": "void RefreshToolbar2(int section_id, int command_id)",
      "python": "RPR_RefreshToolbar2(Int section_id, Int command_id)",
      "eel": "RefreshToolbar2(int section_id, int command_id)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section_id", "type": "integer" },
          { "identifier": "command_id", "type": "integer" }
        ],
        "method_name": "reaper.RefreshToolbar2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Makes a filename \"in\" relative to the current project, if any.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "in", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "relative_fn",
    "functioncall": {
      "lua": "string out = reaper.relative_fn(string in, string out)",
      "cpp": "void relative_fn(const char* in, char* out, int out_sz)",
      "python": "(String in, String out, Int out_sz) = RPR_relative_fn(in, out, out_sz)",
      "eel": "relative_fn(\"in\", #out)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "out", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "in", "type": "string" },
          { "identifier": "out", "type": "string" }
        ],
        "method_name": "reaper.relative_fn",
        "return_values": [{ "identifier": "out", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Remove a send/receive/hardware output. See [CreateTrackSend](#CreateTrackSend), [GetSetTrackSendInfo](#GetSetTrackSendInfo), [GetTrackSendInfo\\_Value](#GetTrackSendInfo_Value), [SetTrackSendInfo\\_Value](#SetTrackSendInfo_Value), [GetTrackNumSends](#GetTrackNumSends).\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "tr",
          "description": "the MediaTrack-object, in which you want to remove send/receive/hwouts"
        },
        {
          "identifier": "category",
          "description": "less than 0, receives; 0, sends; greater than 0, hardware outputs"
        },
        {
          "identifier": "sendidx",
          "description": "the idx of the send/receive/hwoutput to remove. 0, the first; 1 for the second, etc"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "RemoveTrackSend",
    "functioncall": {
      "lua": "boolean = reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)",
      "cpp": "bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)",
      "python": "Boolean RPR_RemoveTrackSend(MediaTrack tr, Int category, Int sendidx)",
      "eel": "bool RemoveTrackSend(MediaTrack tr, int category, int sendidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, removing worked; false, removing didn't work(e.g. does not exist)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" }
        ],
        "method_name": "reaper.RemoveTrackSend",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Not available while playing back.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source_filename", "description": "" },
        { "identifier": "target_filename", "description": "" },
        { "identifier": "start_percent", "description": "" },
        { "identifier": "end_percent", "description": "" },
        { "identifier": "playrate", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "RenderFileSection",
    "functioncall": {
      "lua": "boolean = reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)",
      "cpp": "bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)",
      "python": "Boolean RPR_RenderFileSection(String source_filename, String target_filename, Float start_percent, Float end_percent, Float playrate)",
      "eel": "bool RenderFileSection(\"source_filename\", \"target_filename\", start_percent, end_percent, playrate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source_filename", "type": "string" },
          { "identifier": "target_filename", "type": "string" },
          { "identifier": "start_percent", "type": "number" },
          { "identifier": "end_percent", "type": "number" },
          { "identifier": "playrate", "type": "number" }
        ],
        "method_name": "reaper.RenderFileSection",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.90" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "move", "selected", "tracks", "folder", "last folder"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. \nmakePrevFolder=0 for normal, \n   1 = as child of track preceding track specified by beforeTrackIdx, \n   2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer beforeTrackIdx",
          "description": "the number of track, before which you want to move the selected tracks; zero-based(0 for track 1, 1 for track 2, etc)"
        },
        {
          "identifier": "integer makePrevFolder",
          "description": "decides, whether the track before the moved tracks(beforeTrackIdx-1) shall be a folder-track. Does only    \napply, when beforeTrackIdx>0(a track above the moved tracks exists).\n0, don't make track beforeTrackIdx-1 a folder track; \n1, make track beforeTrackIdx-1 a folder track\n2, if track beforeTrackIdx-1 is the last track in folder, extend the folder(make the last moved track the last track in folder."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ReorderSelectedTracks",
    "functioncall": {
      "lua": "boolean retval = reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)",
      "cpp": "bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)",
      "python": "Boolean RPR_ReorderSelectedTracks(Int beforeTrackIdx, Int makePrevFolder)",
      "eel": "bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if it was successful; false, if not(e.g. no tracks were selected)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "beforeTrackIdx", "type": "integer" },
          { "identifier": "makePrevFolder", "type": "integer" }
        ],
        "method_name": "reaper.ReorderSelectedTracks",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "mode", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Resample_EnumModes",
    "functioncall": {
      "lua": "string = reaper.Resample_EnumModes(integer mode)",
      "cpp": "const char* Resample_EnumModes(int mode)",
      "python": "String RPR_Resample_EnumModes(Int mode)",
      "eel": "bool Resample_EnumModes(#retval, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "mode", "type": "integer" }],
        "method_name": "reaper.Resample_EnumModes",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [resolve\\_fn2](#resolve_fn2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "in", "description": "" },
        { "identifier": "out", "description": "" },
        { "identifier": "out_sz", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "resolve_fn",
    "functioncall": {
      "lua": "string out = reaper.resolve_fn(string in, string out)",
      "cpp": "void resolve_fn(const char* in, char* out, int out_sz)",
      "python": "(String in, String out, Int out_sz) = RPR_resolve_fn(in, out, out_sz)",
      "eel": "resolve_fn(\"in\", #out)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "out", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "in", "type": "string" },
          { "identifier": "out", "type": "string" }
        ],
        "method_name": "reaper.resolve_fn",
        "return_values": [{ "identifier": "out", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "in", "description": "" },
        { "identifier": "out", "description": "" },
        { "identifier": "out_sz", "description": "" },
        { "identifier": "checkSubDir", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "resolve_fn2",
    "functioncall": {
      "lua": "string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)",
      "cpp": "void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)",
      "python": "(String in, String out, Int out_sz, String checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)",
      "eel": "resolve_fn2(\"in\", #out, optional \"checkSubDir\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "out", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "in", "type": "string" },
          { "identifier": "out", "type": "string" },
          { "identifier": "string", "type": "optional" }
        ],
        "method_name": "reaper.resolve_fn2",
        "return_values": [{ "identifier": "out", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "command", "id", "actioncommand", "id", "lookup"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "command_id",
          "description": "the command/script/action, whose ActionCommandID you want to have"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ReverseNamedCommandLookup",
    "functioncall": {
      "lua": "string = reaper.ReverseNamedCommandLookup(integer command_id)",
      "cpp": "const char* ReverseNamedCommandLookup(int command_id)",
      "python": "String RPR_ReverseNamedCommandLookup(Int command_id)",
      "eel": "bool ReverseNamedCommandLookup(#retval, int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string",
          "description": "the ActionCommandID of the command/script/action"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "command_id", "type": "integer" }],
        "method_name": "reaper.ReverseNamedCommandLookup",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "scaling_mode", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ScaleFromEnvelopeMode",
    "functioncall": {
      "lua": "number = reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)",
      "cpp": "double ScaleFromEnvelopeMode(int scaling_mode, double val)",
      "python": "Float RPR_ScaleFromEnvelopeMode(Int scaling_mode, Float val)",
      "eel": "double ScaleFromEnvelopeMode(int scaling_mode, val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "scaling_mode", "type": "integer" },
          { "identifier": "val", "type": "number" }
        ],
        "method_name": "reaper.ScaleFromEnvelopeMode",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetEnvelopeScalingMode](#GetEnvelopeScalingMode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "scaling_mode", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ScaleToEnvelopeMode",
    "functioncall": {
      "lua": "number = reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)",
      "cpp": "double ScaleToEnvelopeMode(int scaling_mode, double val)",
      "python": "Float RPR_ScaleToEnvelopeMode(Int scaling_mode, Float val)",
      "eel": "double ScaleToEnvelopeMode(int scaling_mode, val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "scaling_mode", "type": "integer" },
          { "identifier": "val", "type": "number" }
        ],
        "method_name": "reaper.ScaleToEnvelopeMode",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "mediaitem", "select", "deselect", "all"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Selects or deselects all MediaItems in a project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "selected", "description": "true, select; false, deselect" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SelectAllMediaItems",
    "functioncall": {
      "lua": "reaper.SelectAllMediaItems(ReaProject proj, boolean selected)",
      "cpp": "void SelectAllMediaItems(ReaProject* proj, bool selected)",
      "python": "RPR_SelectAllMediaItems(ReaProject proj, Boolean selected)",
      "eel": "SelectAllMediaItems(ReaProject proj, bool selected)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "selected", "type": "boolean" }
        ],
        "method_name": "reaper.SelectAllMediaItems",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "switch", "select", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Switch to another opened project/projecttab.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "SelectProjectInstance",
    "functioncall": {
      "lua": "reaper.SelectProjectInstance(ReaProject proj)",
      "cpp": "void SelectProjectInstance(ReaProject* proj)",
      "python": "RPR_SelectProjectInstance(ReaProject proj)",
      "eel": "SelectProjectInstance(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.SelectProjectInstance",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "set this take active in this media item",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "take",
          "description": "the MediaItem_Take, you want to set as active-take in the MediaItem it is associated with"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetActiveTake",
    "functioncall": {
      "lua": "reaper.SetActiveTake(MediaItem_Take take)",
      "cpp": "void SetActiveTake(MediaItem_Take* take)",
      "python": "RPR_SetActiveTake(MediaItem_Take take)",
      "eel": "SetActiveTake(MediaItem_Take take)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.SetActiveTake",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [
      "envelopemanagement",
      "set",
      "mode",
      "trim",
      "read",
      "touch",
      "write",
      "latch",
      "selected",
      "deselected",
      "master"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets all or selected tracks to mode.\n\nIncludes the master-track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "mode",
          "description": "the automation-mode\n0, Trim/read\n1, Read\n2, Touch\n3, Write\n4, Latch\n5 and higher no mode selected"
        },
        {
          "identifier": "onlySel",
          "description": "true, only selected tracks; false, all tracks including master-track"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetAutomationMode",
    "functioncall": {
      "lua": "reaper.SetAutomationMode(integer mode, boolean onlySel)",
      "cpp": "void SetAutomationMode(int mode, bool onlySel)",
      "python": "RPR_SetAutomationMode(Int mode, Boolean onlySel)",
      "eel": "SetAutomationMode(int mode, bool onlySel)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mode", "type": "integer" },
          { "identifier": "onlySel", "type": "boolean" }
        ],
        "method_name": "reaper.SetAutomationMode",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "set", "bpm", "undo"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "set current BPM in project, set wantUndo=true to add undo point",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "bpm", "description": "the new beats per minute-value" },
        {
          "identifier": "wantUndo",
          "description": "true, add undo point; false, no undo point added"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "SetCurrentBPM",
    "functioncall": {
      "lua": "reaper.SetCurrentBPM(ReaProject proj, number bpm, boolean wantUndo)",
      "cpp": "void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)",
      "python": "RPR_SetCurrentBPM(ReaProject __proj, Float bpm, Boolean wantUndo)",
      "eel": "SetCurrentBPM(ReaProject __proj, bpm, bool wantUndo)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "wantUndo", "type": "boolean" }
        ],
        "method_name": "reaper.SetCurrentBPM",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "envelope", "focus", "set", "cursor", "context"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Change the focus for the cursor.\nYou must use this to change the focus for the cursor programmatically. \n\nmode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or envIn==NULL to clear the current track/take envelope selection)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "mode",
          "description": "the focus to be changed to\n0, track panels\n1, arrange window\n2, arrangewindow and env"
        },
        {
          "identifier": "envIn",
          "description": "TrackEnvelope-object of the envelope to select(only when mode=2, else set to nil); nil, clear current track/envelope-selection;"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetCursorContext",
    "functioncall": {
      "lua": "reaper.SetCursorContext(integer mode, TrackEnvelope envIn)",
      "cpp": "void SetCursorContext(int mode, TrackEnvelope* envInOptional)",
      "python": "RPR_SetCursorContext(Int mode, TrackEnvelope envInOptional)",
      "eel": "SetCursorContext(int mode, TrackEnvelope envIn)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mode", "type": "integer" },
          { "identifier": "envIn", "type": "TrackEnvelope" }
        ],
        "method_name": "reaper.SetCursorContext",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": ["transportmanagement", "set", "edit", "cursor", "position", "seekplay", "move view"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Change the position of the edit-cursor in the current project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "time", "description": "the new editcursor-position in seconds" },
        {
          "identifier": "moveview",
          "description": "true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)"
        },
        {
          "identifier": "seekplay",
          "description": "true, when playing, restart playing at the new edit-cursor position; false, keep playing at \"old\" playposition"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetEditCurPos",
    "functioncall": {
      "lua": "reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)",
      "cpp": "void SetEditCurPos(double time, bool moveview, bool seekplay)",
      "python": "RPR_SetEditCurPos(Float time, Boolean moveview, Boolean seekplay)",
      "eel": "SetEditCurPos(time, bool moveview, bool seekplay)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "time", "type": "number" },
          { "identifier": "moveview", "type": "boolean" },
          { "identifier": "seekplay", "type": "boolean" }
        ],
        "method_name": "reaper.SetEditCurPos",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Transport Management"],
    "tags": [
      "transportmanagement",
      "set",
      "edit",
      "cursor",
      "position",
      "seekplay",
      "move view",
      "project"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Change the position of the edit-cursor in a specific project.       ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time", "description": "the new editcursor-position in seconds" },
        {
          "identifier": "moveview",
          "description": "true, change the arrange-view so editcursor is visible; false, just set the edit-cursor without moving the view(editcursor might be out of sight)"
        },
        {
          "identifier": "seekplay",
          "description": "true, when playing, restart playing at the new edit-cursor position; false, keep playing at \"old\" playposition"
        }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "SetEditCurPos2",
    "functioncall": {
      "lua": "reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)",
      "cpp": "void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)",
      "python": "RPR_SetEditCurPos2(ReaProject proj, Float time, Boolean moveview, Boolean seekplay)",
      "eel": "SetEditCurPos2(ReaProject proj, time, bool moveview, bool seekplay)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" },
          { "identifier": "moveview", "type": "boolean" },
          { "identifier": "seekplay", "type": "boolean" }
        ],
        "method_name": "reaper.SetEditCurPos2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See [SetEnvelopePointEx](#SetEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "ptidx", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "SetEnvelopePoint",
    "functioncall": {
      "lua": "boolean = reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)",
      "cpp": "bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)",
      "eel": "bool SetEnvelopePoint(TrackEnvelope envelope, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "ptidx", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.SetEnvelopePoint",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem\\_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem\\_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee [CountEnvelopePointsEx](#CountEnvelopePointsEx), [GetEnvelopePointEx](#GetEnvelopePointEx), [InsertEnvelopePointEx](#InsertEnvelopePointEx), [DeleteEnvelopePointEx](#DeleteEnvelopePointEx).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "autoitem_idx", "description": "" },
        { "identifier": "ptidx", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "shapeIn", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "selectedIn", "description": "" },
        { "identifier": "noSortIn", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "SetEnvelopePointEx",
    "functioncall": {
      "lua": "boolean = reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional number shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)",
      "cpp": "bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)",
      "python": "(Boolean retval, TrackEnvelope envelope, Int autoitem_idx, Int ptidx, Float timeInOptional, Float valueInOptional, Int shapeInOptional, Float tensionInOptional, Boolean selectedInOptional, Boolean noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)",
      "eel": "bool SetEnvelopePointEx(TrackEnvelope envelope, int autoitem_idx, int ptidx, optional timeIn, optional valueIn, optional int shapeIn, optional tensionIn, optional bool selectedIn, optional bool noSortIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "autoitem_idx", "type": "integer" },
          { "identifier": "ptidx", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "boolean", "type": "optional" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.SetEnvelopePointEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "set", "statechunk", "envelope"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the RPPXML state of an envelope, returns true if successful. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "env",
          "description": "the TrackEnvelope, whose statechunk you want to set"
        },
        { "identifier": "str", "description": "the new statechunk, that you want to set" },
        { "identifier": "isundo", "description": "undo flag is a performance/caching hint." }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetEnvelopeStateChunk",
    "functioncall": {
      "lua": "boolean = reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)",
      "cpp": "bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)",
      "python": "Boolean RPR_SetEnvelopeStateChunk(TrackEnvelope env, String str, Boolean isundoOptional)",
      "eel": "bool SetEnvelopeStateChunk(TrackEnvelope env, \"str\", bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting worked; false, setting didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "env", "type": "TrackEnvelope" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.SetEnvelopeStateChunk",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Extended States"],
    "tags": ["extendedstates", "state", "value", "key", "section", "set", "persist"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the extended state value for a specific section and key. \n\nPersistant states are stored into the reaper-extstate.ini in the resources-folder.\n\nSee [GetExtState](#GetExtState), [DeleteExtState](#DeleteExtState), [HasExtState](#HasExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "section", "description": "the section, in which the key-value is stored" },
        { "identifier": "key", "description": "the key, which stores the value" },
        { "identifier": "value", "description": "the new value to be set" },
        {
          "identifier": "persist",
          "description": "true, means the value should be stored and reloaded the next time REAPER is opened"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SetExtState",
    "functioncall": {
      "lua": "reaper.SetExtState(string section, string key, string value, boolean persist)",
      "cpp": "void SetExtState(const char* section, const char* key, const char* value, bool persist)",
      "python": "RPR_SetExtState(String section, String key, String value, Boolean persist)",
      "eel": "SetExtState(\"section\", \"key\", \"value\", bool persist)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "key", "type": "string" },
          { "identifier": "value", "type": "string" },
          { "identifier": "persist", "type": "boolean" }
        ],
        "method_name": "reaper.SetExtState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "mode: see [GetGlobalAutomationOverride](GetGlobalAutomationOverride)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "mode", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetGlobalAutomationOverride",
    "functioncall": {
      "lua": "reaper.SetGlobalAutomationOverride(integer mode)",
      "cpp": "void SetGlobalAutomationOverride(int mode)",
      "python": "RPR_SetGlobalAutomationOverride(Int mode)",
      "eel": "SetGlobalAutomationOverride(int mode)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "mode", "type": "integer" }],
        "method_name": "reaper.SetGlobalAutomationOverride",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "str", "description": "" },
        { "identifier": "isundo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetItemStateChunk",
    "functioncall": {
      "lua": "boolean = reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)",
      "cpp": "bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)",
      "python": "Boolean RPR_SetItemStateChunk(MediaItem item, String str, Boolean isundoOptional)",
      "eel": "bool SetItemStateChunk(MediaItem item, \"str\", bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.SetItemStateChunk",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "set &amp;1 to show the master track in the TCP, &amp;2 to show in the mixer. Returns the previous visibility state. See [GetMasterTrackVisibility](#GetMasterTrackVisibility).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "flag", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetMasterTrackVisibility",
    "functioncall": {
      "lua": "integer = reaper.SetMasterTrackVisibility(integer flag)",
      "cpp": "int SetMasterTrackVisibility(int flag)",
      "python": "Int RPR_SetMasterTrackVisibility(Int flag)",
      "eel": "int SetMasterTrackVisibility(int flag)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "flag", "type": "integer" }],
        "method_name": "reaper.SetMasterTrackVisibility",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.12" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position of track in pixels (read-only)\nI_LASTH : int * : height in track in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color.\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int, item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "newvalue", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemInfo_Value",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)",
      "cpp": "bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)",
      "python": "Boolean RPR_SetMediaItemInfo_Value(MediaItem item, String parmname, Float newvalue)",
      "eel": "bool SetMediaItemInfo_Value(MediaItem item, \"parmname\", newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "newvalue", "type": "number" }
        ],
        "method_name": "reaper.SetMediaItemInfo_Value",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Redraws the screen only if refreshUI == true.\nSee [UpdateArrange](#UpdateArrange)().",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "length", "description": "" },
        { "identifier": "refreshUI", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemLength",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)",
      "cpp": "bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)",
      "python": "Boolean RPR_SetMediaItemLength(MediaItem item, Float length, Boolean refreshUI)",
      "eel": "bool SetMediaItemLength(MediaItem item, length, bool refreshUI)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "length", "type": "number" },
          { "identifier": "refreshUI", "type": "boolean" }
        ],
        "method_name": "reaper.SetMediaItemLength",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Redraws the screen only if refreshUI == true.\nSee [UpdateArrange](#UpdateArrange)().",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "position", "description": "" },
        { "identifier": "refreshUI", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemPosition",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)",
      "cpp": "bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)",
      "python": "Boolean RPR_SetMediaItemPosition(MediaItem item, Float position, Boolean refreshUI)",
      "eel": "bool SetMediaItemPosition(MediaItem item, position, bool refreshUI)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "position", "type": "number" },
          { "identifier": "refreshUI", "type": "boolean" }
        ],
        "method_name": "reaper.SetMediaItemPosition",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "selected", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemSelected",
    "functioncall": {
      "lua": "reaper.SetMediaItemSelected(MediaItem item, boolean selected)",
      "cpp": "void SetMediaItemSelected(MediaItem* item, bool selected)",
      "python": "RPR_SetMediaItemSelected(MediaItem item, Boolean selected)",
      "eel": "SetMediaItemSelected(MediaItem item, bool selected)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "selected", "type": "boolean" }
        ],
        "method_name": "reaper.SetMediaItemSelected",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.961" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "source", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemTake_Source",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)",
      "cpp": "bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)",
      "python": "Boolean RPR_SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)",
      "eel": "bool SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "source", "type": "PCM_source" }
        ],
        "method_name": "reaper.SetMediaItemTake_Source",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.01" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color.\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "newvalue", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMediaItemTakeInfo_Value",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)",
      "cpp": "bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)",
      "python": "Boolean RPR_SetMediaItemTakeInfo_Value(MediaItem_Take take, String parmname, Float newvalue)",
      "eel": "bool SetMediaItemTakeInfo_Value(MediaItem_Take take, \"parmname\", newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "newvalue", "type": "number" }
        ],
        "method_name": "reaper.SetMediaItemTakeInfo_Value",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, &lt;0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container\nI_MCPW : int * : current MCP width in pixels\nI_MCPH : int * : current MCP height in pixels\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, &lt;0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, &lt;0=project default, 1=+0dB, etc\nP_ENV:&lt;envchunkname : TrackEnvelope*, read only. Call with :&lt;VOLENV, :&lt;PANENV, etc appended.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nB_FREEMODE : bool * : track free item positioning enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track playback offset, units depend on I_PLAY_OFFSET_FLAG",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "newvalue", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMediaTrackInfo_Value",
    "functioncall": {
      "lua": "boolean = reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)",
      "cpp": "bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)",
      "python": "Boolean RPR_SetMediaTrackInfo_Value(MediaTrack tr, String parmname, Float newvalue)",
      "eel": "bool SetMediaTrackInfo_Value(MediaTrack tr, \"parmname\", newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "newvalue", "type": "number" }
        ],
        "method_name": "reaper.SetMediaTrackInfo_Value",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "division", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SetMIDIEditorGrid",
    "functioncall": {
      "lua": "reaper.SetMIDIEditorGrid(ReaProject project, number division)",
      "cpp": "void SetMIDIEditorGrid(ReaProject* project, double division)",
      "python": "RPR_SetMIDIEditorGrid(ReaProject project, Float division)",
      "eel": "SetMIDIEditorGrid(ReaProject project, division)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "division", "type": "number" }
        ],
        "method_name": "reaper.SetMIDIEditorGrid",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "set", "mixer", "scroll", "leftmost"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "leftmosttrack", "description": "the desired leftmost-MediaTrack" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetMixerScroll",
    "functioncall": {
      "lua": "MediaTrack = reaper.SetMixerScroll(MediaTrack leftmosttrack)",
      "cpp": "MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)",
      "python": "MediaTrack RPR_SetMixerScroll(MediaTrack leftmosttrack)",
      "eel": "MediaTrack SetMixerScroll(MediaTrack leftmosttrack)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack", "description": "the new leftmost-track as MediaTrack-object" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "leftmosttrack", "type": "MediaTrack" }],
        "method_name": "reaper.SetMixerScroll",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like \"MM_CTX_ITEM\". Find these strings by modifying an assignment in \nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable \"show action IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\nSee [GetMouseModifier](#GetMouseModifier).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "context", "description": "" },
        { "identifier": "modifier_flag", "description": "" },
        { "identifier": "action", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetMouseModifier",
    "functioncall": {
      "lua": "reaper.SetMouseModifier(string context, integer modifier_flag, string action)",
      "cpp": "void SetMouseModifier(const char* context, int modifier_flag, const char* action)",
      "python": "RPR_SetMouseModifier(String context, Int modifier_flag, String action)",
      "eel": "SetMouseModifier(\"context\", int modifier_flag, \"action\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "context", "type": "string" },
          { "identifier": "modifier_flag", "type": "integer" },
          { "identifier": "action", "type": "string" }
        ],
        "method_name": "reaper.SetMouseModifier",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "set", "selected", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set exactly one track selected, deselect all others.\n\t\t\t\n\t\t\tThis sets the track as Last-Touched-Track as well.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "the MediaTrack to be selected" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetOnlyTrackSelected",
    "functioncall": {
      "lua": "reaper.SetOnlyTrackSelected(MediaTrack track)",
      "cpp": "void SetOnlyTrackSelected(MediaTrack* track)",
      "python": "RPR_SetOnlyTrackSelected(MediaTrack track)",
      "eel": "SetOnlyTrackSelected(MediaTrack track)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.SetOnlyTrackSelected",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "division", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SetProjectGrid",
    "functioncall": {
      "lua": "reaper.SetProjectGrid(ReaProject project, number division)",
      "cpp": "void SetProjectGrid(ReaProject* project, double division)",
      "python": "RPR_SetProjectGrid(ReaProject project, Float division)",
      "eel": "SetProjectGrid(ReaProject project, division)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "division", "type": "number" }
        ],
        "method_name": "reaper.SetProjectGrid",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "set", "marker", "region", "position", "name"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters an existing project-marker",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "markrgnindexnumber",
          "description": "the shown number of the marker to be altered"
        },
        {
          "identifier": "isrgn",
          "description": "true, marker is a region; false, marker is a normal marker"
        },
        { "identifier": "pos", "description": "the position of the new marker in seconds" },
        { "identifier": "rgnend", "description": "the end of a region, if isrgn is true" },
        { "identifier": "name", "description": "shown name of the marker" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "SetProjectMarker",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)",
      "cpp": "bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)",
      "python": "Boolean RPR_SetProjectMarker(Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)",
      "eel": "bool SetProjectMarker(int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting the marker worked; false, setting the marker didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" }
        ],
        "method_name": "reaper.SetProjectMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "set", "marker", "region", "position", "name", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters an existing project-marker in a given project.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "markrgnindexnumber",
          "description": "the shown number of the marker to be altered"
        },
        {
          "identifier": "isrgn",
          "description": "true, marker is a region; false, marker is a normal marker"
        },
        { "identifier": "pos", "description": "the position of the new marker in seconds" },
        { "identifier": "rgnend", "description": "the end of a region, if isrgn is true" },
        { "identifier": "name", "description": "shown name of the marker" }
      ],
      "param_count": 6,
      "markup_type": "markdown"
    },
    "title": "SetProjectMarker2",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)",
      "cpp": "bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)",
      "python": "Boolean RPR_SetProjectMarker2(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name)",
      "eel": "bool SetProjectMarker2(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting the marker worked; false, setting the marker didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" }
        ],
        "method_name": "reaper.SetProjectMarker2",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "set", "marker", "region", "position", "name", "project", "color"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters an existing project-marker in a given project. Differs from SetProjectMarker2 and SetProjectMarker, that you can set color as well.\nColor should be 0 to not change, or ColorToNative(r,g,b)|0x1000000",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "markrgnindexnumber",
          "description": "the shown number of the marker to be altered"
        },
        {
          "identifier": "isrgn",
          "description": "true, marker is a region; false, marker is a normal marker"
        },
        { "identifier": "pos", "description": "the position of the new marker in seconds" },
        { "identifier": "rgnend", "description": "the end of a region, if isrgn is true" },
        { "identifier": "name", "description": "shown name of the marker" },
        { "identifier": "color", "description": "the new color-value as native color-value" }
      ],
      "param_count": 7,
      "markup_type": "markdown"
    },
    "title": "SetProjectMarker3",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)",
      "cpp": "bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)",
      "python": "Boolean RPR_SetProjectMarker3(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color)",
      "eel": "bool SetProjectMarker3(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\", int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting the marker worked; false, setting the marker didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.SetProjectMarker3",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [
      "markermanagement",
      "set",
      "marker",
      "region",
      "position",
      "name",
      "project",
      "color",
      "clear name"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets/alters an existing project-marker in a given project.\ncolor should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&amp;1 to clear name",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "markrgnindexnumber",
          "description": "the shown number of the marker to be altered"
        },
        {
          "identifier": "isrgn",
          "description": "true, marker is a region; false, marker is a normal marker"
        },
        { "identifier": "pos", "description": "the position of the new marker in seconds" },
        { "identifier": "rgnend", "description": "the end of a region, if isrgn is true" },
        { "identifier": "name", "description": "shown name of the marker" },
        { "identifier": "color", "description": "the new color-value as native color-value" },
        { "identifier": "flags", "description": "&1 to clear name" }
      ],
      "param_count": 8,
      "markup_type": "markdown"
    },
    "title": "SetProjectMarker4",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)",
      "cpp": "bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)",
      "python": "Boolean RPR_SetProjectMarker4(ReaProject proj, Int markrgnindexnumber, Boolean isrgn, Float pos, Float rgnend, String name, Int color, Int flags)",
      "eel": "bool SetProjectMarker4(ReaProject proj, int markrgnindexnumber, bool isrgn, pos, rgnend, \"name\", int color, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting the marker worked; false, setting the marker didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnindexnumber", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.SetProjectMarker4",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [SetProjectMarkerByIndex2](#SetProjectMarkerByIndex2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "markrgnidx", "description": "" },
        { "identifier": "isrgn", "description": "" },
        { "identifier": "pos", "description": "" },
        { "identifier": "rgnend", "description": "" },
        { "identifier": "IDnumber", "description": "" },
        { "identifier": "name", "description": "" },
        { "identifier": "color", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "markdown"
    },
    "title": "SetProjectMarkerByIndex",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)",
      "cpp": "bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)",
      "python": "Boolean RPR_SetProjectMarkerByIndex(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color)",
      "eel": "bool SetProjectMarkerByIndex(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, \"name\", int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnidx", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "IDnumber", "type": "integer" },
          { "identifier": "name", "type": "string" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.SetProjectMarkerByIndex",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see [EnumProjectMarkers3](#EnumProjectMarkers3)), rather than representing the displayed marker/region ID number (see [SetProjectMarker3](#SetProjectMarker3)). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&amp;1 to clear name.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "markrgnidx", "description": "" },
        { "identifier": "isrgn", "description": "" },
        { "identifier": "pos", "description": "" },
        { "identifier": "rgnend", "description": "" },
        { "identifier": "IDnumber", "description": "" },
        { "identifier": "name", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "flags", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "markdown"
    },
    "title": "SetProjectMarkerByIndex2",
    "functioncall": {
      "lua": "boolean = reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)",
      "cpp": "bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)",
      "python": "Boolean RPR_SetProjectMarkerByIndex2(ReaProject proj, Int markrgnidx, Boolean isrgn, Float pos, Float rgnend, Int IDnumber, String name, Int color, Int flags)",
      "eel": "bool SetProjectMarkerByIndex2(ReaProject proj, int markrgnidx, bool isrgn, pos, rgnend, int IDnumber, \"name\", int color, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "markrgnidx", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "IDnumber", "type": "integer" },
          { "identifier": "name", "type": "string" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.SetProjectMarkerByIndex2",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "extended", "state", "value", "section", "key", "extname", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted. If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See [GetProjExtState](#GetProjExtState), [EnumProjExtState](#EnumProjExtState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "extname", "description": "the section, in which the key/value is stored" },
        { "identifier": "key", "description": "the key, that stores the value" },
        { "identifier": "value", "description": "the value, that's stored in the key" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "SetProjExtState",
    "functioncall": {
      "lua": "integer = reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)",
      "cpp": "int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)",
      "python": "Int RPR_SetProjExtState(ReaProject proj, String extname, String key, String value)",
      "eel": "int SetProjExtState(ReaProject proj, \"extname\", \"key\", \"value\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of key/value-pairs in the extname" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "extname", "type": "string" },
          { "identifier": "key", "type": "string" },
          { "identifier": "value", "type": "string" }
        ],
        "method_name": "reaper.SetProjExtState",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Add (addorremove &gt; 0) or remove (addorremove &gt; 0) a track from this region when using the region render matrix.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "regionindex", "description": "" },
        { "identifier": "track", "description": "" },
        { "identifier": "addorremove", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "SetRegionRenderMatrix",
    "functioncall": {
      "lua": "reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer addorremove)",
      "cpp": "void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)",
      "python": "RPR_SetRegionRenderMatrix(ReaProject proj, Int regionindex, MediaTrack track, Int addorremove)",
      "eel": "SetRegionRenderMatrix(ReaProject proj, int regionindex, MediaTrack track, int addorremove)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "regionindex", "type": "integer" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "addorremove", "type": "integer" }
        ],
        "method_name": "reaper.SetRegionRenderMatrix",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.09" },
    "chapers": ["Marker Management"],
    "tags": ["markermanagement", "set", "takemarker"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Inserts or updates a take marker. If idx&lt;0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated).\n\t\t\t\n\t\t\tWhen inserting a new takemarker, parameter srcposIn must be given!\n\t\t\t\nSee [GetNumTakeMarkers](#GetNumTakeMarkers)), [GetTakeMarker](#GetTakeMarker) and [DeleteTakeMarker](#DeleteTakeMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem_Take take",
          "description": "the take, whose take-marker you want to delete"
        },
        {
          "identifier": "integer idx",
          "description": "the id of the marker within the take, 0 for the first, 1 for the second, etc."
        },
        {
          "identifier": "MediaItem_Take take",
          "description": "the take, from which you want to set an existing takemarker or insert a new one"
        },
        {
          "identifier": "integer idx",
          "description": "the index of the takemarker that you want to set; -1, adds a new takemarker"
        },
        { "identifier": "string nameIn", "description": "the name of the takemarker" },
        {
          "identifier": "optional number srcposIn",
          "description": "the position of the takemarker; omit if you want to keep the old position; must be given, when inserting a new takemarker"
        },
        { "identifier": "optional number colorIn", "description": "the color of the takemarker" }
      ],
      "param_count": 7,
      "markup_type": "markdown"
    },
    "title": "SetTakeMarker",
    "functioncall": {
      "lua": "integer index = reaper.SetTakeMarker(MediaItem_Take take, integer idx, string nameIn, optional number srcposIn, optional number colorIn)",
      "cpp": "int index = SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional)",
      "python": "(Int index, MediaItem_Take take, Int idx, String nameIn, Float srcposInOptional, Int colorInOptional) = RPR_SetTakeMarker(take, idx, nameIn, srcposInOptional, colorInOptional)",
      "eel": "int index = SetTakeMarker(MediaItem_Take take, int idx, \"nameIn\", optional srcposIn, optional int colorIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer index", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" },
          { "identifier": "nameIn", "type": "string" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.SetTakeMarker",
        "return_values": [{ "identifier": "index", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Adds or updates a stretch marker. If idx&gt;0, stretch marker will be added. If idx&gt;=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "idx", "description": "" },
        { "identifier": "pos", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetTakeStretchMarker",
    "functioncall": {
      "lua": "integer = reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)",
      "cpp": "int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)",
      "python": "Int RPR_SetTakeStretchMarker(MediaItem_Take take, Int idx, Float pos, const double srcposInOptional)",
      "eel": "int SetTakeStretchMarker(MediaItem_Take take, int idx, pos, optional srcposIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.SetTakeStretchMarker",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [GetTakeStretchMarkerSlope](#GetTakeStretchMarkerSlope)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "idx", "description": "" },
        { "identifier": "slope", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetTakeStretchMarkerSlope",
    "functioncall": {
      "lua": "boolean = reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)",
      "cpp": "bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)",
      "python": "Boolean RPR_SetTakeStretchMarkerSlope(MediaItem_Take take, Int idx, Float slope)",
      "eel": "bool SetTakeStretchMarkerSlope(MediaItem_Take take, int idx, slope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "idx", "type": "integer" },
          { "identifier": "slope", "type": "number" }
        ],
        "method_name": "reaper.SetTakeStretchMarkerSlope",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig\\_num and timesig\\_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See [CountTempoTimeSigMarkers](#CountTempoTimeSigMarkers), [GetTempoTimeSigMarker](#GetTempoTimeSigMarker), [AddTempoTimeSigMarker](#AddTempoTimeSigMarker), [DeleteTempoTimeSigMarker](#DeleteTempoTimeSigMarker).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "ptidx", "description": "" },
        { "identifier": "timepos", "description": "" },
        { "identifier": "measurepos", "description": "" },
        { "identifier": "beatpos", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "timesig_num", "description": "" },
        { "identifier": "timesig_denom", "description": "" },
        { "identifier": "lineartempo", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "markdown"
    },
    "title": "SetTempoTimeSigMarker",
    "functioncall": {
      "lua": "boolean = reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)",
      "cpp": "bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)",
      "python": "Boolean RPR_SetTempoTimeSigMarker(ReaProject proj, Int ptidx, Float timepos, Int measurepos, Float beatpos, Float bpm, Int timesig_num, Int timesig_denom, Boolean lineartempo)",
      "eel": "bool SetTempoTimeSigMarker(ReaProject proj, int ptidx, timepos, int measurepos, beatpos, bpm, int timesig_num, int timesig_denom, bool lineartempo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "ptidx", "type": "integer" },
          { "identifier": "timepos", "type": "number" },
          { "identifier": "measurepos", "type": "integer" },
          { "identifier": "beatpos", "type": "number" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "timesig_num", "type": "integer" },
          { "identifier": "timesig_denom", "type": "integer" },
          { "identifier": "lineartempo", "type": "boolean" }
        ],
        "method_name": "reaper.SetTempoTimeSigMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.11" },
    "chapers": ["Theme management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call [UpdateArrange()](#UpdateArrange) etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see [GetThemeColor](#GetThemeColor).\n\n * col_main_bg2 : Main window/transport background \n * col_main_text2 : Main window/transport text \n * col_main_textshadow : Main window text shadow (ignored if too close to text color) \n * col_main_3dhl : Main window 3D highlight \n * col_main_3dsh : Main window 3D shadow \n * col_main_resize2 : Main window pane resize mouseover \n * col_main_text : Window text \n * col_main_bg : Window background \n * col_main_editbk : Window edit background \n * col_transport_editbk : Transport edit background \n * col_toolbar_text : Toolbar button text \n * col_toolbar_text_on : Toolbar button enabled text \n * col_toolbar_frame : Toolbar frame when floating or docked \n * toolbararmed_color : Toolbar button armed color \n * toolbararmed_drawmode : Toolbar button armed fill mode \n * io_text : I/O window text \n * io_3dhl : I/O window 3D highlight \n * io_3dsh : I/O window 3D shadow \n * genlist_bg : Window list background \n * genlist_fg : Window list text \n * genlist_grid : Window list grid lines \n * genlist_selbg : Window list selected row \n * genlist_selfg : Window list selected text \n * genlist_seliabg : Window list selected row (inactive) \n * genlist_seliafg : Window list selected text (inactive) \n * genlist_hilite : Window list highlighted text\n * genlist_hilite_sel : Window list highlighted selected text\n * col_buttonbg : Button background \n * col_tcp_text : Track panel text \n * col_tcp_textsel : Track panel (selected) text \n * col_seltrack : Selected track control panel background \n * col_seltrack2 : Unselected track control panel background (enabled with a checkbox above) \n * tcplocked_color : Locked track control panel overlay color \n * tcplocked_drawmode : Locked track control panel fill mode \n * col_tracklistbg : Empty track list area \n * col_mixerbg : Empty mixer list area \n * col_arrangebg : Empty arrange view area \n * arrange_vgrid : Empty arrange view area vertical grid shading \n * col_fadearm : Fader background when automation recording \n * col_fadearm2 : Fader background when automation playing \n * col_fadearm3 : Fader background when in inactive touch/latch \n * col_tl_fg : Timeline foreground \n * col_tl_fg2 : Timeline foreground (secondary markings) \n * col_tl_bg : Timeline background \n * col_tl_bgsel : Time selection color \n * timesel_drawmode : Time selection fill mode \n * col_tl_bgsel2 : Timeline background (in loop points) \n * col_trans_bg : Transport status background \n * col_trans_fg : Transport status text \n * playrate_edited : Project play rate control when not 1.0 \n * col_mi_label : Media item label \n * col_mi_label_sel : Media item label (selected) \n * col_mi_label_float : Floating media item label \n * col_mi_label_float_sel : Floating media item label (selected) \n * col_mi_bg : Media item background (odd tracks) \n * col_mi_bg2 : Media item background (even tracks) \n * col_tr1_itembgsel : Media item background selected (odd tracks) \n * col_tr2_itembgsel : Media item background selected (even tracks) \n * itembg_drawmode : Media item background fill mode \n * col_tr1_peaks : Media item peaks (odd tracks) \n * col_tr2_peaks : Media item peaks (even tracks) \n * col_tr1_ps2 : Media item peaks when selected (odd tracks) \n * col_tr2_ps2 : Media item peaks when selected (even tracks) \n * col_peaksedge : Media item peaks edge highlight (odd tracks) \n * col_peaksedge2 : Media item peaks edge highlight (even tracks) \n * col_peaksedgesel : Media item peaks edge highlight when selected (odd tracks) \n * col_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks) \n * cc_chase_drawmode : Media item MIDI CC peaks fill mode \n * col_peaksfade : Media item peaks when active in crossfade editor (fade-out) \n * col_peaksfade2 : Media item peaks when active in crossfade editor (fade-in) \n * col_mi_fades : Media item fade/volume controls \n * fadezone_color : Media item fade quiet zone fill color \n * fadezone_drawmode : Media item fade quiet zone fill mode \n * fadearea_color : Media item fade full area fill color \n * fadearea_drawmode : Media item fade full area fill mode \n * col_mi_fade2 : Media item edges of controls \n * col_mi_fade2_drawmode : Media item edges of controls blend mode \n * item_grouphl : Media item edge when selected via grouping \n * col_offlinetext : Media item \"offline\" text \n * col_stretchmarker : Media item stretch marker line \n * col_stretchmarker_h0 : Media item stretch marker handle (1x) \n * col_stretchmarker_h1 : Media item stretch marker handle (&gt;1x) \n * col_stretchmarker_h2 : Media item stretch marker handle (&lt;1x) \n * col_stretchmarker_b : Media item stretch marker handle edge \n * col_stretchmarkerm : Media item stretch marker blend mode \n * col_stretchmarker_text : Media item stretch marker text \n * col_stretchmarker_tm : Media item transient guide handle \n * take_marker : Media item take marker \n * selitem_tag : Selected media item bar color \n * activetake_tag : Active media item take bar color \n * col_tr1_bg : Track background (odd tracks) \n * col_tr2_bg : Track background (even tracks) \n * col_tr1_divline : Track divider line (odd tracks) \n * col_tr2_divline : Track divider line (even tracks) \n * col_envlane1_divline : Envelope lane divider line (odd tracks) \n * col_envlane2_divline : Envelope lane divider line (even tracks) \n * marquee_fill : Marquee fill \n * marquee_drawmode : Marquee fill mode \n * marquee_outline : Marquee outline \n * marqueezoom_fill : Marquee zoom fill \n * marqueezoom_drawmode : Marquee zoom fill mode \n * marqueezoom_outline : Marquee zoom outline \n * col_cursor : Edit cursor \n * col_cursor2 : Edit cursor (alternate) \n * playcursor_color : Play cursor \n * playcursor_drawmode : Play cursor fill mode \n * col_gridlines2 : Grid lines (start of measure) \n * col_gridlines2dm : Grid lines (start of measure) \n * col_gridlines3 : Grid lines (start of beats) \n * col_gridlines3dm : Grid lines (start of beats) \n * col_gridlines : Grid lines (in between beats) \n * col_gridlines1dm : Grid lines (in between beats) \n * guideline_color : Editing guide line color \n * guideline_drawmode : Editing guide fill mode \n * region : Regions \n * region_lane_bg : Region lane background \n * region_lane_text : Region lane text \n * marker : Markers \n * marker_lane_bg : Marker lane background \n * marker_lane_text : Marker lane text \n * col_tsigmark : Time signature change marker \n * ts_lane_bg : Time signature lane background \n * ts_lane_text : Time signature lane text \n * timesig_sel_bg : Time signature marker selected background \n * col_routinghl1 : Routing matrix row highlight \n * col_routinghl2 : Routing matrix column highlight \n * col_vudoint : Theme has interlaced VU meters\n * col_vuclip : VU meter clip indicator \n * col_vutop : VU meter top \n * col_vumid : VU meter middle \n * col_vubot : VU meter bottom \n * col_vuintcol : VU meter interlace/edge color \n * col_vumidi : VU meter midi activity \n * col_vuind1 : VU (indicator) - no signal \n * col_vuind2 : VU (indicator) - low signal \n * col_vuind3 : VU (indicator) - med signal \n * col_vuind4 : VU (indicator) - hot signal \n * mcp_sends_normal : Sends text: normal \n * mcp_sends_muted : Sends text: muted \n * mcp_send_midihw : Sends text: MIDI hardware \n * mcp_sends_levels : Sends level \n * mcp_fx_normal : FX insert text: normal \n * mcp_fx_bypassed : FX insert text: bypassed \n * mcp_fx_offlined : FX insert text: offline \n * mcp_fxparm_normal : FX parameter text: normal \n * mcp_fxparm_bypassed : FX parameter text: bypassed \n * mcp_fxparm_offlined : FX parameter text: offline \n * tcp_list_scrollbar : List scrollbar (track panel) \n * tcp_list_scrollbar_mode : List scrollbar (track panel) \n * tcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel) \n * tcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) \n * mcp_list_scrollbar : List scrollbar (mixer panel) \n * mcp_list_scrollbar_mode : List scrollbar (mixer panel) \n * mcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel) \n * mcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel)  \n * midi_rulerbg : MIDI editor ruler background \n * midi_rulerfg : MIDI editor ruler text \n * midi_grid2 : MIDI editor grid line (start of measure) \n * midi_griddm2 : MIDI editor grid line (start of measure) \n * midi_grid3 : MIDI editor grid line (start of beats) \n * midi_griddm3 : MIDI editor grid line (start of beats) \n * midi_grid1 : MIDI editor grid line (between beats) \n * midi_griddm1 : MIDI editor grid line (between beats) \n * midi_trackbg1 : MIDI editor background color (naturals) \n * midi_trackbg2 : MIDI editor background color (sharps/flats) \n * midi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals) \n * midi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats) \n * midi_selpitch1 : MIDI editor background color, selected pitch (naturals) \n * midi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats) \n * midi_selbg : MIDI editor time selection color \n * midi_selbg_drawmode : MIDI editor time selection fill mode \n * midi_gridhc : MIDI editor CC horizontal center line \n * midi_gridhcdm : MIDI editor CC horizontal center line \n * midi_gridh : MIDI editor CC horizontal line \n * midi_gridhdm : MIDI editor CC horizontal line \n * midi_ccbut : MIDI editor CC lane add/remove buttons \n * midi_ccbut_text : MIDI editor CC lane button text \n * midi_ccbut_arrow : MIDI editor CC lane button arrow \n * midioct : MIDI editor octave line color \n * midi_inline_trackbg1 : MIDI inline background color (naturals) \n * midi_inline_trackbg2 : MIDI inline background color (sharps/flats) \n * midioct_inline : MIDI inline octave line color \n * midi_endpt : MIDI editor end marker \n * midi_notebg : MIDI editor note, unselected (midi_note_colormap overrides) \n * midi_notefg : MIDI editor note, selected (midi_note_colormap overrides) \n * midi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides) \n * midi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides) \n * midi_itemctl : MIDI editor note controls \n * midi_ofsn : MIDI editor note (offscreen) \n * midi_ofsnsel : MIDI editor note (offscreen, selected) \n * midi_editcurs : MIDI editor cursor \n * midi_pkey1 : MIDI piano key color (naturals background, sharps/flats text) \n * midi_pkey2 : MIDI piano key color (sharps/flats background, naturals text) \n * midi_pkey3 : MIDI piano key color (selected) \n * midi_noteon_flash : MIDI piano key note-on flash \n * midi_leftbg : MIDI piano pane background \n * midifont_col_light_unsel : MIDI editor note text and control color, unselected (light) \n * midifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark) \n * midifont_mode_unsel : MIDI editor note text and control mode, unselected\n * midifont_col_light : MIDI editor note text and control color (light) \n * midifont_col_dark : MIDI editor note text and control color (dark) \n * midifont_mode : MIDI editor note text and control mode \n * score_bg : MIDI notation editor background \n * score_fg : MIDI notation editor staff/notation/text \n * score_sel : MIDI notation editor selected staff/notation/text \n * score_timesel : MIDI notation editor time selection \n * score_loop : MIDI notation editor loop points, selected pitch \n * midieditorlist_bg : MIDI list editor background \n * midieditorlist_fg : MIDI list editor text \n * midieditorlist_grid : MIDI list editor grid lines \n * midieditorlist_selbg : MIDI list editor selected row \n * midieditorlist_selfg : MIDI list editor selected text \n * midieditorlist_seliabg : MIDI list editor selected row (inactive) \n * midieditorlist_seliafg : MIDI list editor selected text (inactive) \n * midieditorlist_bg2 : MIDI list editor background (secondary) \n * midieditorlist_fg2 : MIDI list editor text (secondary) \n * midieditorlist_selbg2 : MIDI list editor selected row (secondary) \n * midieditorlist_selfg2 : MIDI list editor selected text (secondary) \n * col_explorer_sel : Media explorer selection \n * col_explorer_seldm : Media explorer selection mode \n * col_explorer_seledge : Media explorer selection edge \n * docker_shadow : Tab control shadow \n * docker_selface : Tab control selected tab \n * docker_unselface : Tab control unselected tab \n * docker_text : Tab control text \n * docker_text_sel : Tab control text selected tab \n * docker_bg : Tab control background \n * windowtab_bg : Tab control background in windows \n * auto_item_unsel : Envelope: Unselected automation item \n * col_env1 : Envelope: Volume (pre-FX) \n * col_env2 : Envelope: Volume \n * env_trim_vol : Envelope: Trim Volume \n * col_env3 : Envelope: Pan (pre-FX) \n * col_env4 : Envelope: Pan \n * env_track_mute : Envelope: Mute \n * col_env5 : Envelope: Master playrate \n * col_env6 : Envelope: Master tempo \n * col_env7 : Envelope: Send volume \n * col_env8 : Envelope: Send pan \n * col_env9 : Envelope: Send volume 2 \n * col_env10 : Envelope: Send pan 2 \n * env_sends_mute : Envelope: Send mute \n * col_env11 : Envelope: Audio hardware output volume \n * col_env12 : Envelope: Audio hardware output pan \n * col_env13 : Envelope: FX parameter 1 \n * col_env14 : Envelope: FX parameter 2 \n * col_env15 : Envelope: FX parameter 3 \n * col_env16 : Envelope: FX parameter 4 \n * env_item_vol : Envelope: Item take volume \n * env_item_pan : Envelope: Item take pan \n * env_item_mute : Envelope: Item take mute \n * env_item_pitch : Envelope: Item take pitch \n * wiring_grid2 : Wiring: Background \n * wiring_grid : Wiring: Background grid lines \n * wiring_border : Wiring: Box border \n * wiring_tbg : Wiring: Box background \n * wiring_ticon : Wiring: Box foreground \n * wiring_recbg : Wiring: Record section background \n * wiring_recitem : Wiring: Record section foreground \n * wiring_media : Wiring: Media \n * wiring_recv : Wiring: Receives \n * wiring_send : Wiring: Sends \n * wiring_fader : Wiring: Fader \n * wiring_parent : Wiring: Master/Parent \n * wiring_parentwire_border : Wiring: Master/Parent wire border \n * wiring_parentwire_master : Wiring: Master/Parent to master wire \n * wiring_parentwire_folder : Wiring: Master/Parent to parent folder wire \n * wiring_pin_normal : Wiring: Pins normal \n * wiring_pin_connected : Wiring: Pins connected \n * wiring_pin_disconnected : Wiring: Pins disconnected \n * wiring_horz_col : Wiring: Horizontal pin connections \n * wiring_sendwire : Wiring: Send hanging wire \n * wiring_hwoutwire : Wiring: Hardware output wire \n * wiring_recinputwire : Wiring: Record input wire \n * wiring_hwout : Wiring: System hardware outputs \n * wiring_recinput : Wiring: System record inputs \n * group_0 : Group #1 \n * group_1 : Group #2 \n * group_2 : Group #3 \n * group_3 : Group #4 \n * group_4 : Group #5 \n * group_5 : Group #6 \n * group_6 : Group #7 \n * group_7 : Group #8 \n * group_8 : Group #9 \n * group_9 : Group #10 \n * group_10 : Group #11 \n * group_11 : Group #12 \n * group_12 : Group #13 \n * group_13 : Group #14 \n * group_14 : Group #15 \n * group_15 : Group #16 \n * group_16 : Group #17 \n * group_17 : Group #18 \n * group_18 : Group #19 \n * group_19 : Group #20 \n * group_20 : Group #21 \n * group_21 : Group #22 \n * group_22 : Group #23 \n * group_23 : Group #24 \n * group_24 : Group #25 \n * group_25 : Group #26 \n * group_26 : Group #27 \n * group_27 : Group #28 \n * group_28 : Group #29 \n * group_29 : Group #30 \n * group_30 : Group #31 \n * group_31 : Group #32 \n * group_32 : Group #33 \n * group_33 : Group #34 \n * group_34 : Group #35 \n * group_35 : Group #36 \n * group_36 : Group #37 \n * group_37 : Group #38 \n * group_38 : Group #39 \n * group_39 : Group #40 \n * group_40 : Group #41 \n * group_41 : Group #42 \n * group_42 : Group #43 \n * group_43 : Group #44 \n * group_44 : Group #45 \n * group_45 : Group #46 \n * group_46 : Group #47 \n * group_47 : Group #48 \n * group_48 : Group #49 \n * group_49 : Group #50 \n * group_50 : Group #51 \n * group_51 : Group #52 \n * group_52 : Group #53 \n * group_53 : Group #54 \n * group_54 : Group #55 \n * group_55 : Group #56 \n * group_56 : Group #57 \n * group_57 : Group #58 \n * group_58 : Group #59 \n * group_59 : Group #60 \n * group_60 : Group #61 \n * group_61 : Group #62 \n * group_62 : Group #63 \n * group_63 : Group #64 ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string ini_key", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "integer flags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetThemeColor",
    "functioncall": {
      "lua": "integer retval = reaper.SetThemeColor(string ini_key, integer color, integer flags)",
      "cpp": "int SetThemeColor(const char* ini_key, int color, int flagsOptional)",
      "python": "Int RPR_SetThemeColor(String ini_key, Int color, Int flagsOptional)",
      "eel": "int SetThemeColor(\"ini_key\", int color, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "ini_key", "type": "string" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.SetThemeColor",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See [RefreshToolbar2](#RefreshToolbar2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "section_id", "description": "" },
        { "identifier": "command_id", "description": "" },
        { "identifier": "state", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetToggleCommandState",
    "functioncall": {
      "lua": "boolean = reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)",
      "cpp": "bool SetToggleCommandState(int section_id, int command_id, int state)",
      "python": "Boolean RPR_SetToggleCommandState(Int section_id, Int command_id, Int state)",
      "eel": "bool SetToggleCommandState(int section_id, int command_id, int state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section_id", "type": "integer" },
          { "identifier": "command_id", "type": "integer" },
          { "identifier": "state", "type": "integer" }
        ],
        "method_name": "reaper.SetToggleCommandState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [
      "envelopemanagement",
      "set",
      "mode",
      "trim",
      "read",
      "touch",
      "write",
      "latch",
      "master"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set automation-mode for a specific MediaTrack.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "tr",
          "description": "the MediaTrack, whose automation-mode you want to set"
        },
        {
          "identifier": "mode",
          "description": "the automation-mode\n0, Trim/read\n1, Read\n2, Touch\n3, Write\n4, Latch\n5 and higher no mode selected"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetTrackAutomationMode",
    "functioncall": {
      "lua": "reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)",
      "cpp": "void SetTrackAutomationMode(MediaTrack* tr, int mode)",
      "python": "RPR_SetTrackAutomationMode(MediaTrack tr, Int mode)",
      "eel": "SetTrackAutomationMode(MediaTrack tr, int mode)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "mode", "type": "integer" }
        ],
        "method_name": "reaper.SetTrackAutomationMode",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "set", "color", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the custom track color, color is OS dependent (i.e. [ColorToNative(r,g,b)](#ColorToNative).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "the MediaTrack, whose color you want to change" },
        { "identifier": "color", "description": "the new color-value" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetTrackColor",
    "functioncall": {
      "lua": "reaper.SetTrackColor(MediaTrack track, integer color)",
      "cpp": "void SetTrackColor(MediaTrack* track, int color)",
      "python": "RPR_SetTrackColor(MediaTrack track, Int color)",
      "eel": "SetTrackColor(MediaTrack track, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.SetTrackColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t.1.1\\tLyric for measure 2 beat 1    \"). See [GetTrackMIDILyrics](#GetTrackMIDILyrics)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "flag", "description": "" },
        { "identifier": "str", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetTrackMIDILyrics",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)",
      "cpp": "bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)",
      "python": "Boolean RPR_SetTrackMIDILyrics(MediaTrack track, Int flag, String str)",
      "eel": "bool SetTrackMIDILyrics(MediaTrack track, int flag, \"str\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "flag", "type": "integer" },
          { "identifier": "str", "type": "string" }
        ],
        "method_name": "reaper.SetTrackMIDILyrics",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "channel &gt; 0 assigns these note names to all channels.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "name", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SetTrackMIDINoteName",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)",
      "cpp": "bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)",
      "python": "Boolean RPR_SetTrackMIDINoteName(Int track, Int pitch, Int chan, String name)",
      "eel": "bool SetTrackMIDINoteName(int track, int pitch, int chan, \"name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "integer" },
          { "identifier": "pitch", "type": "integer" },
          { "identifier": "chan", "type": "integer" },
          { "identifier": "name", "type": "string" }
        ],
        "method_name": "reaper.SetTrackMIDINoteName",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "channel &gt; 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "track", "description": "" },
        { "identifier": "pitch", "description": "" },
        { "identifier": "chan", "description": "" },
        { "identifier": "name", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "markdown"
    },
    "title": "SetTrackMIDINoteNameEx",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)",
      "cpp": "bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)",
      "python": "Boolean RPR_SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, Int pitch, Int chan, String name)",
      "eel": "bool SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, int pitch, int chan, \"name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "pitch", "type": "integer" },
          { "identifier": "chan", "type": "integer" },
          { "identifier": "name", "type": "string" }
        ],
        "method_name": "reaper.SetTrackMIDINoteNameEx",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "select", "deselect", "unselect", "track", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set a MediaTrack selected/deselected. Will retain already existing selection, so you can set multiple tracks selected that way.\n\t\t\t\n\t\t\tWill not affect Last-Touched-Track.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack, whose selection state you want to set"
        },
        {
          "identifier": "selected",
          "description": "true, set MediaTrack to selected; false, set MediaTrack to deselected"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SetTrackSelected",
    "functioncall": {
      "lua": "reaper.SetTrackSelected(MediaTrack track, boolean selected)",
      "cpp": "void SetTrackSelected(MediaTrack* track, bool selected)",
      "python": "RPR_SetTrackSelected(MediaTrack track, Boolean selected)",
      "eel": "SetTrackSelected(MediaTrack track, bool selected)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "selected", "type": "boolean" }
        ],
        "method_name": "reaper.SetTrackSelected",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs\nparameter names:\n\n    B\\_MUTE : bool \\*\n    B\\_PHASE : bool \\*, true to flip phase\n    B\\_MONO : bool \\*\n    D\\_VOL : double \\*, 1.0 = +0dB etc\n    D\\_PAN : double \\*, -1..+1\n    D\\_PANLAW : double \\*,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\n    I\\_SENDMODE : int \\*, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\n    I\\_AUTOMODE : int \\* : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\n    I\\_SRCCHAN : int \\*, index,&amp;1024=mono, -1 for none\n    I\\_DSTCHAN : int \\*, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute\n    I\\_MIDIFLAGS : int \\*, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chanSee [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).\n\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).\n\nSee [CreateTrackSend](#CreateTrackSend), [RemoveTrackSend](#RemoveTrackSend), [GetTrackNumSends](#GetTrackNumSends).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "category", "description": "" },
        { "identifier": "sendidx", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "newvalue", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "SetTrackSendInfo_Value",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)",
      "cpp": "bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)",
      "python": "Boolean RPR_SetTrackSendInfo_Value(MediaTrack tr, Int category, Int sendidx, String parmname, Float newvalue)",
      "eel": "bool SetTrackSendInfo_Value(MediaTrack tr, int category, int sendidx, \"parmname\", newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "newvalue", "type": "number" }
        ],
        "method_name": "reaper.SetTrackSendInfo_Value",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_idx", "description": "" },
        { "identifier": "pan", "description": "" },
        { "identifier": "isend", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SetTrackSendUIPan",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)",
      "cpp": "bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)",
      "python": "Boolean RPR_SetTrackSendUIPan(MediaTrack track, Int send_idx, Float pan, Int isend)",
      "eel": "bool SetTrackSendUIPan(MediaTrack track, int send_idx, pan, int isend)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_idx", "type": "integer" },
          { "identifier": "pan", "type": "number" },
          { "identifier": "isend", "type": "integer" }
        ],
        "method_name": "reaper.SetTrackSendUIPan",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_idx", "description": "" },
        { "identifier": "vol", "description": "" },
        { "identifier": "isend", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SetTrackSendUIVol",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)",
      "cpp": "bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)",
      "python": "Boolean RPR_SetTrackSendUIVol(MediaTrack track, Int send_idx, Float vol, Int isend)",
      "eel": "bool SetTrackSendUIVol(MediaTrack track, int send_idx, vol, int isend)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_idx", "type": "integer" },
          { "identifier": "vol", "type": "number" },
          { "identifier": "isend", "type": "integer" }
        ],
        "method_name": "reaper.SetTrackSendUIVol",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "set", "track", "statechunk"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack, whose statechunk you want to set"
        },
        {
          "identifier": "str",
          "description": "the new trackstatechunk, you want to set this MediaTrack to"
        },
        { "identifier": "isundo", "description": "undo flag is a performance/caching hint" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SetTrackStateChunk",
    "functioncall": {
      "lua": "boolean = reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)",
      "cpp": "bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)",
      "python": "Boolean RPR_SetTrackStateChunk(MediaTrack track, String str, Boolean isundoOptional)",
      "eel": "bool SetTrackStateChunk(MediaTrack track, \"str\", bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting worked; false, setting didn't work"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "str", "type": "string" },
          { "identifier": "isundo", "type": "boolean" }
        ],
        "method_name": "reaper.SetTrackStateChunk",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.92" },
    "chapers": ["User Interface"],
    "tags": [
      "userinterface",
      "context",
      "menu",
      "track",
      "envelope",
      "item",
      "automation item",
      "envelope point",
      "position",
      "hwnd"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "shows a Reaper-context menu.\nYou can decide, which menu to show and to which track/item/envelope/envelope-point/automation-item you want this context-menu to be applied to.\ne.g. you can decide, whether settings in the context-menu \"track_panel\" shall be applied to track 1, track 2, etc\n\nYou can also apply this to the selected track/mediaitem/envelope.\nThe parameters name and ctx influence each other, means: name=\"item\" and ctx=reaper.GetMediaItem(0,1) apply the mediaitem-contextmenu to the Mediaitem-object, given to parameter ctx.\nThe choice of the parameter name also influences, whether ctxOptional and ctx2Optional can be set or not and what they mean.\n\nBlocks further execution of a script, until the context-menu is closed.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string name",
          "description": "the name of the context-menu to show\ncan be track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item"
        },
        {
          "identifier": "integer x",
          "description": "x-position of the contextmenu-display-position in pixels"
        },
        {
          "identifier": "integer y",
          "description": "y-position of the contextmenu-display-position in pixels"
        },
        {
          "identifier": "optional HWND hwndParent",
          "description": "the HWND-window in which to display the context-menu. \nnil, Reaper's main window will be used as HWND"
        },
        {
          "identifier": "optional identifier ctx",
          "description": "the object for which to apply the contextmenu. Options selected in the context-menu will be applied to this track/item; \nnil, use the selected track(s)/item(s)/envelope, depending on the chosen context-menu-name in parameter name; \n     shows no context-menu, when no track/item/envelope is selected;\n\npossible objects and their corresponding name-parameter:\n  - MediaTrack(track_input, track_panel, track_routing)\n  - MediaItem(item)\n  - TrackEnvelope(also Take-Envelopes!) (envelope, envelope_point)\nwhen using any other context-menu-name, this parameter will be ignored by Reaper."
        },
        {
          "identifier": "optional ctxOptional",
          "description": "when ctx is a TrackEnvelope(or nil) and menu=\"envelope_point\", \n     this is the idx of the envelope-point to which to apply the context-menu\nwhen ctx is a TrackEnvelope(or nil) and menu=\"envelope_item\", \n     this reflects the automation-item in chosen envelope, to which to apply the context-menu(1 or higher for automation-item 1 or higher)"
        },
        {
          "identifier": "optional ctx2Optional",
          "description": "when ctx is a TrackEnvelope(or nil) and menu=\"envelope_point\", this reflects, \n0, whether to apply the context-menu to the point in the envelope-lane or\n1 or higher, whether to apply the context-menu to the point in automation-item 1 or higher; \nnil, assumes 0(envelope-lane)"
        }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "ShowPopupMenu",
    "functioncall": {
      "lua": "reaper.ShowPopupMenu(string name, integer x, integer y, optional HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)",
      "cpp": "void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)",
      "python": "RPR_ShowPopupMenu(String name, Int x, Int y, HWND hwndParentOptional, void ctxOptional, Int ctx2Optional, Int ctx3Optional)",
      "eel": "ShowPopupMenu(\"name\", int x, int y, HWND hwndParent, void* ctx, int ctx2, int ctx3)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "name", "type": "string" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "HWND", "type": "optional" },
          { "identifier": "ctx", "type": "identifier" },
          { "identifier": "ctx2", "type": "integer" },
          { "identifier": "ctx3", "type": "integer" }
        ],
        "method_name": "reaper.ShowPopupMenu",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "caller", "description": "" },
        {
          "identifier": "optional HWND callerWnd",
          "description": "the HWND that shall call the ActionList; can be nil"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ShowActionList",
    "functioncall": {
      "lua": "reaper.ShowActionList(KbdSectionInfo caller, optional HWND callerWnd)",
      "cpp": "void ShowActionList(KbdSectionInfo* caller, HWND callerWnd)",
      "python": "RPR_ShowActionList(KbdSectionInfo caller, HWND callerWnd)",
      "eel": "ShowActionList(KbdSectionInfo caller, HWND callerWnd)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "caller", "type": "KbdSectionInfo" },
          { "identifier": "HWND", "type": "optional" }
        ],
        "method_name": "reaper.ShowActionList",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "message", "console"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. See [ClearConsole](#ClearConsole)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "msg", "description": "a message to be shown in ReaConsole" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ShowConsoleMsg",
    "functioncall": {
      "lua": "reaper.ShowConsoleMsg(string msg)",
      "cpp": "void ShowConsoleMsg(const char* msg)",
      "python": "RPR_ShowConsoleMsg(String msg)",
      "eel": "ShowConsoleMsg(\"msg\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "msg", "type": "string" }],
        "method_name": "reaper.ShowConsoleMsg",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["user", "interface", "input", "dialog", "messagebox"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Shows Messagebox with user-clickable buttons.           ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "msg", "description": "the message, that shall be shown in messagebox" },
        { "identifier": "title", "description": "the title of the messagebox" },
        {
          "identifier": "type",
          "description": "which buttons shall be shown in the messagebox\n0, OK\n1, OK CANCEL\n2, ABORT RETRY IGNORE\n3, YES NO CANCEL\n4, YES NO\n5, RETRY CANCEL"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "ShowMessageBox",
    "functioncall": {
      "lua": "integer = reaper.ShowMessageBox(string msg, string title, integer type)",
      "cpp": "int ShowMessageBox(const char* msg, const char* title, int type)",
      "python": "Int RPR_ShowMessageBox(String msg, String title, Int type)",
      "eel": "int ShowMessageBox(\"msg\", \"title\", int type)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the button pressed by the user\n1, OK\n2, CANCEL\n3, ABORT\n4, RETRY\n5, IGNORE\n6, YES\n7, NO"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "msg", "type": "string" },
          { "identifier": "title", "type": "string" },
          { "identifier": "type", "type": "integer" }
        ],
        "method_name": "reaper.ShowMessageBox",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "slider", "db", "convert"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Convert slider-value to it's dB-value-equivalent.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "y", "description": "the dB-value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SLIDER2DB",
    "functioncall": {
      "lua": "number = reaper.SLIDER2DB(number y)",
      "cpp": "double SLIDER2DB(double y)",
      "python": "Float RPR_SLIDER2DB(Float y)",
      "eel": "double SLIDER2DB(y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number", "description": "the slider-value, you want to convert to dB" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "y", "type": "number" }],
        "method_name": "reaper.SLIDER2DB",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time_pos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SnapToGrid",
    "functioncall": {
      "lua": "number = reaper.SnapToGrid(ReaProject project, number time_pos)",
      "cpp": "double SnapToGrid(ReaProject* project, double time_pos)",
      "python": "Float RPR_SnapToGrid(ReaProject project, Float time_pos)",
      "eel": "double SnapToGrid(ReaProject project, time_pos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "time_pos", "type": "number" }
        ],
        "method_name": "reaper.SnapToGrid",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [
      "trackmanagement",
      "solo",
      "state",
      "set",
      "on",
      "off",
      "solo in place",
      "solo ignore routing"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set solo-state for all tracks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "solo",
          "description": "the new solo state for all tracks\n0, solo off\n1, solo, ignore routing\n2, solo in place"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SoloAllTracks",
    "functioncall": {
      "lua": "reaper.SoloAllTracks(integer solo)",
      "cpp": "void SoloAllTracks(int solo)",
      "python": "RPR_SoloAllTracks(Int solo)",
      "eel": "SoloAllTracks(int solo)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "solo", "type": "integer" }],
        "method_name": "reaper.SoloAllTracks",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the sphah window is not displayed.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Splash_GetWnd",
    "functioncall": {
      "lua": "HWND = reaper.Splash_GetWnd()",
      "cpp": "HWND Splash_GetWnd()",
      "python": "HWND RPR_Splash_GetWnd()",
      "eel": "HWND Splash_GetWnd()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.Splash_GetWnd",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "split", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "The original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "the MediaItem so be split" },
        { "identifier": "position", "description": "the split-position in seconds" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SplitMediaItem",
    "functioncall": {
      "lua": "MediaItem = reaper.SplitMediaItem(MediaItem item, number position)",
      "cpp": "MediaItem* SplitMediaItem(MediaItem* item, double position)",
      "python": "MediaItem RPR_SplitMediaItem(MediaItem item, Float position)",
      "eel": "MediaItem SplitMediaItem(MediaItem item, position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem",
          "description": "the new MediaItem on the right side of the split"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "position", "type": "number" }
        ],
        "method_name": "reaper.SplitMediaItem",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "stringToGuid",
    "functioncall": {
      "lua": "string gGUID = reaper.stringToGuid(string str, string gGUID)",
      "cpp": "void stringToGuid(const char* str, GUID* g)",
      "python": "RPR_stringToGuid(String str, GUID g)",
      "eel": "stringToGuid(\"str\", #gGUID)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "gGUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "str", "type": "string" },
          { "identifier": "gGUID", "type": "string" }
        ],
        "method_name": "reaper.stringToGuid",
        "return_values": [{ "identifier": "gGUID", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.92" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see [GetNumMIDIOutputs](#GetNumMIDIOutputs), [GetMIDIOutputName](#GetMIDIOutputName).\n\nif mode is set to 1, you can send messages as control-message for Parameter LEarn/Modulation and as shortcut for scripts.\nThe parameter msg3 can be retrieved with the returnvalue val of the function reaper.get\\_action\\_context, so sending values to a script is possible that way.\n\nFor more detailed information about the possible midi-messages you can send via StuffMIDIMessage, see: [StuffMIDIMessage-docs](../misc/misc_docs/Reaper-StuffMidiMessage-docs.txt)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mode", "description": "" },
        { "identifier": "msg1", "description": "modifier" },
        { "identifier": "msg2", "description": "note/keyname" },
        { "identifier": "msg3", "description": "velocity" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "StuffMIDIMessage",
    "functioncall": {
      "lua": "reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)",
      "cpp": "void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)",
      "python": "RPR_StuffMIDIMessage(Int mode, Int msg1, Int msg2, Int msg3)",
      "eel": "StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "mode", "type": "integer" },
          { "identifier": "msg1", "type": "integer" },
          { "identifier": "msg2", "type": "integer" },
          { "identifier": "msg3", "type": "integer" }
        ],
        "method_name": "reaper.StuffMIDIMessage",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.12" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds or queries the position of a named FX in a take. See [TrackFX\\_AddByName()](#TrackFX_AddByName) for information on fxname and instantiate. ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fxname", "description": "" },
        { "identifier": "instantiate", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_AddByName",
    "functioncall": {
      "lua": "integer = reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)",
      "cpp": "int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)",
      "python": "Int RPR_TakeFX_AddByName(MediaItem_Take take, String fxname, Int instantiate)",
      "eel": "int TakeFX_AddByName(MediaItem_Take take, \"fxname\", int instantiate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fxname", "type": "string" },
          { "identifier": "instantiate", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_AddByName",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_EndParamEdit",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)",
      "cpp": "bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)",
      "python": "Boolean RPR_TakeFX_EndParamEdit(MediaItem_Take take, Int fx, Int param)",
      "eel": "bool TakeFX_EndParamEdit(MediaItem_Take take, int fx, int param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_EndParamEdit",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Note: only works with FX that support Cockos VST extensions.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_FormatParamValue",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val, string buf)",
      "cpp": "bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, buf, buf_sz)",
      "eel": "bool TakeFX_FormatParamValue(MediaItem_Take take, int fx, int param, val, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "val", "type": "number" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_FormatParamValue",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Note: only works with FX that support Cockos VST extensions.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_FormatParamValueNormalized",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)",
      "cpp": "bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)",
      "eel": "bool TakeFX_FormatParamValueNormalized(MediaItem_Take take, int fx, int param, value, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "value", "type": "number" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_FormatParamValueNormalized",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetChainVisible",
    "functioncall": {
      "lua": "integer = reaper.TakeFX_GetChainVisible(MediaItem_Take take)",
      "cpp": "int TakeFX_GetChainVisible(MediaItem_Take* take)",
      "python": "Int RPR_TakeFX_GetChainVisible(MediaItem_Take take)",
      "eel": "int TakeFX_GetChainVisible(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.TakeFX_GetChainVisible",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetCount",
    "functioncall": {
      "lua": "integer = reaper.TakeFX_GetCount(MediaItem_Take take)",
      "cpp": "int TakeFX_GetCount(MediaItem_Take* take)",
      "python": "Int RPR_TakeFX_GetCount(MediaItem_Take take)",
      "eel": "int TakeFX_GetCount(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.TakeFX_GetCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TakeFX\\_SetEnabled](#TakeFX_SetEnabled)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetEnabled",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)",
      "cpp": "bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)",
      "python": "Boolean RPR_TakeFX_GetEnabled(MediaItem_Take take, Int fx)",
      "eel": "bool TakeFX_GetEnabled(MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetEnabled",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fxindex", "description": "" },
        { "identifier": "parameterindex", "description": "" },
        { "identifier": "create", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetEnvelope",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)",
      "cpp": "TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)",
      "python": "TrackEnvelope RPR_TakeFX_GetEnvelope(MediaItem_Take take, Int fxindex, Int parameterindex, Boolean create)",
      "eel": "TrackEnvelope TakeFX_GetEnvelope(MediaItem_Take take, int fxindex, int parameterindex, bool create)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fxindex", "type": "integer" },
          { "identifier": "parameterindex", "type": "integer" },
          { "identifier": "create", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_GetEnvelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns HWND of floating window for effect index, if any",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetFloatingWindow",
    "functioncall": {
      "lua": "HWND = reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)",
      "cpp": "HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)",
      "python": "HWND RPR_TakeFX_GetFloatingWindow(MediaItem_Take take, Int index)",
      "eel": "HWND TakeFX_GetFloatingWindow(MediaItem_Take take, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetFloatingWindow",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetFormattedParamValue",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param, string buf)",
      "cpp": "bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)",
      "eel": "bool TakeFX_GetFormattedParamValue(MediaItem_Take take, int fx, int param, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetFormattedParamValue",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetFXGUID",
    "functioncall": {
      "lua": "string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)",
      "cpp": "GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)",
      "python": "GUID RPR_TakeFX_GetFXGUID(MediaItem_Take take, Int fx)",
      "eel": "bool TakeFX_GetFXGUID(#retguid, MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "GUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetFXGUID",
        "return_values": [{ "identifier": "GUID", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetFXName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx, string buf)",
      "cpp": "bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, String buf, Int buf_sz) = RPR_TakeFX_GetFXName(take, fx, buf, buf_sz)",
      "eel": "bool TakeFX_GetFXName(MediaItem_Take take, int fx, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetFXName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetIOSize",
    "functioncall": {
      "lua": "integer retval, optional number inputPins, optional number outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)",
      "cpp": "int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)",
      "python": "(Int retval, MediaItem_Take take, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOutOptional, outputPinsOutOptional)",
      "eel": "int TakeFX_GetIOSize(MediaItem_Take take, int fx, optional int &amp;inputPins, optional int &amp;outputPins)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "inputPins", "description": "" },
        { "identifier": "outputPins", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetIOSize",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets plug-in specific named configuration value (returns true on success)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "parmname", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetNamedConfigParm",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)",
      "cpp": "bool TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOut, int bufOut_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOut, bufOut_sz)",
      "eel": "bool TakeFX_GetNamedConfigParm(MediaItem_Take take, int fx, \"parmname\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetNamedConfigParm",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetNumParams",
    "functioncall": {
      "lua": "integer = reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)",
      "cpp": "int TakeFX_GetNumParams(MediaItem_Take* take, int fx)",
      "python": "Int RPR_TakeFX_GetNumParams(MediaItem_Take take, Int fx)",
      "eel": "int TakeFX_GetNumParams(MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetNumParams",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See [TakeFX\\_SetOpen](#TakeFX_SetOpen)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetOpen",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)",
      "cpp": "bool TakeFX_GetOpen(MediaItem_Take* take, int fx)",
      "python": "Boolean RPR_TakeFX_GetOpen(MediaItem_Take take, Int fx)",
      "eel": "bool TakeFX_GetOpen(MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetOpen",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetParam",
    "functioncall": {
      "lua": "number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)",
      "cpp": "double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)",
      "python": "(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)",
      "eel": "double TakeFX_GetParam(MediaItem_Take take, int fx, int param, &amp;minval, &amp;maxval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "minval", "description": "" },
        { "identifier": "maxval", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetParam",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "minval", "type": "number" },
          { "identifier": "maxval", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetParameterStepSizes",
    "functioncall": {
      "lua": "boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)",
      "cpp": "bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)",
      "eel": "bool TakeFX_GetParameterStepSizes(MediaItem_Take take, int fx, int param, &amp;step, &amp;smallstep, &amp;largestep, bool &amp;istoggle)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "step", "description": "" },
        { "identifier": "smallstep", "description": "" },
        { "identifier": "largestep", "description": "" },
        { "identifier": "istoggle", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetParameterStepSizes",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "step", "type": "number" },
          { "identifier": "smallstep", "type": "number" },
          { "identifier": "largestep", "type": "number" },
          { "identifier": "istoggle", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetParamEx",
    "functioncall": {
      "lua": "number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)",
      "cpp": "double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)",
      "python": "(Float retval, MediaItem_Take take, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)",
      "eel": "double TakeFX_GetParamEx(MediaItem_Take take, int fx, int param, &amp;minval, &amp;maxval, &amp;midval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "minval", "description": "" },
        { "identifier": "maxval", "description": "" },
        { "identifier": "midval", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetParamEx",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "minval", "type": "number" },
          { "identifier": "maxval", "type": "number" },
          { "identifier": "midval", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetParamName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param, string buf)",
      "cpp": "bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, Int param, String buf, Int buf_sz) = RPR_TakeFX_GetParamName(take, fx, param, buf, buf_sz)",
      "eel": "bool TakeFX_GetParamName(MediaItem_Take take, int fx, int param, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetParamName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetParamNormalized",
    "functioncall": {
      "lua": "number = reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)",
      "cpp": "double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)",
      "python": "Float RPR_TakeFX_GetParamNormalized(MediaItem_Take take, Int fx, Int param)",
      "eel": "double TakeFX_GetParamNormalized(MediaItem_Take take, int fx, int param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetParamNormalized",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "is", "description": "" },
        { "identifier": "pin", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetPinMappings",
    "functioncall": {
      "lua": "integer retval, optional number high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin)",
      "cpp": "int TakeFX_GetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int* high32OutOptional)",
      "python": "(Int retval, MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TakeFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)",
      "eel": "int TakeFX_GetPinMappings(MediaItem_Take tr, int fx, int is, int pin, optional int &amp;high32)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "high32", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "is", "type": "integer" },
          { "identifier": "pin", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetPinMappings",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See [TakeFX\\_SetPreset](#TakeFX_SetPreset).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetPreset",
    "functioncall": {
      "lua": "boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx, string presetname)",
      "cpp": "bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetname, int presetname_sz)",
      "python": "(Boolean retval, MediaItem_Take take, Int fx, String presetname, Int presetname_sz) = RPR_TakeFX_GetPreset(take, fx, presetname, presetname_sz)",
      "eel": "bool TakeFX_GetPreset(MediaItem_Take take, int fx, #presetname)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "presetname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetname", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetPreset",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "presetname", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TakeFX\\_SetPresetByIndex](#TakeFX_SetPresetByIndex)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetPresetIndex",
    "functioncall": {
      "lua": "integer retval, number numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)",
      "cpp": "int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)",
      "python": "(Int retval, MediaItem_Take take, Int fx, Int numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)",
      "eel": "int TakeFX_GetPresetIndex(MediaItem_Take take, int fx, int &amp;numberOfPresets)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "numberOfPresets", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetPresetIndex",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "numberOfPresets", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetUserPresetFilename",
    "functioncall": {
      "lua": "string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx, string fn)",
      "cpp": "void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fn, int fn_sz)",
      "python": "(MediaItem_Take take, Int fx, String fn, Int fn_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fn, fn_sz)",
      "eel": "TakeFX_GetUserPresetFilename(MediaItem_Take take, int fx, #fn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fn", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "fn", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_GetUserPresetFilename",
        "return_values": [{ "identifier": "fn", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "presetmove", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_NavigatePresets",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)",
      "cpp": "bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)",
      "python": "Boolean RPR_TakeFX_NavigatePresets(MediaItem_Take take, Int fx, Int presetmove)",
      "eel": "bool TakeFX_NavigatePresets(MediaItem_Take take, int fx, int presetmove)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetmove", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_NavigatePresets",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TakeFX\\_GetEnabled](#TakeFX_GetEnabled)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "enabled", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetEnabled",
    "functioncall": {
      "lua": "reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)",
      "cpp": "void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)",
      "python": "RPR_TakeFX_SetEnabled(MediaItem_Take take, Int fx, Boolean enabled)",
      "eel": "TakeFX_SetEnabled(MediaItem_Take take, int fx, bool enabled)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "enabled", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_SetEnabled",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets plug-in specific named configuration value (returns true on success)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetNamedConfigParm",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)",
      "cpp": "bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)",
      "python": "Boolean RPR_TakeFX_SetNamedConfigParm(MediaItem_Take take, Int fx, String parmname, String value)",
      "eel": "bool TakeFX_SetNamedConfigParm(MediaItem_Take take, int fx, \"parmname\", \"value\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "value", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_SetNamedConfigParm",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Open this FX UI. See [TakeFX\\_GetOpen](#TakeFX_GetOpen)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "open", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetOpen",
    "functioncall": {
      "lua": "reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)",
      "cpp": "void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)",
      "python": "RPR_TakeFX_SetOpen(MediaItem_Take take, Int fx, Boolean open)",
      "eel": "TakeFX_SetOpen(MediaItem_Take take, int fx, bool open)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "open", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_SetOpen",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetParam",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)",
      "cpp": "bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)",
      "python": "Boolean RPR_TakeFX_SetParam(MediaItem_Take take, Int fx, Int param, Float val)",
      "eel": "bool TakeFX_SetParam(MediaItem_Take take, int fx, int param, val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "val", "type": "number" }
        ],
        "method_name": "reaper.TakeFX_SetParam",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetParamNormalized",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)",
      "cpp": "bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)",
      "python": "Boolean RPR_TakeFX_SetParamNormalized(MediaItem_Take take, Int fx, Int param, Float value)",
      "eel": "bool TakeFX_SetParamNormalized(MediaItem_Take take, int fx, int param, value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.TakeFX_SetParamNormalized",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "is", "description": "" },
        { "identifier": "pin", "description": "" },
        { "identifier": "low32bits", "description": "" },
        { "identifier": "hi32bits", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetPinMappings",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetPinMappings(MediaItem_Take tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)",
      "cpp": "bool TakeFX_SetPinMappings(MediaItem_Take* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)",
      "python": "Boolean RPR_TakeFX_SetPinMappings(MediaItem_Take tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)",
      "eel": "bool TakeFX_SetPinMappings(MediaItem_Take tr, int fx, int is, int pin, int low32bits, int hi32bits)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "is", "type": "integer" },
          { "identifier": "pin", "type": "integer" },
          { "identifier": "low32bits", "type": "integer" },
          { "identifier": "hi32bits", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_SetPinMappings",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TakeFX\\_GetPreset](#TakeFX_GetPreset).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "presetname", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetPreset",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)",
      "cpp": "bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)",
      "python": "Boolean RPR_TakeFX_SetPreset(MediaItem_Take take, Int fx, String presetname)",
      "eel": "bool TakeFX_SetPreset(MediaItem_Take take, int fx, \"presetname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetname", "type": "string" }
        ],
        "method_name": "reaper.TakeFX_SetPreset",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TakeFX\\_GetPresetIndex](#TakeFX_GetPresetIndex).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "idx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetPresetByIndex",
    "functioncall": {
      "lua": "boolean = reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)",
      "cpp": "bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)",
      "python": "Boolean RPR_TakeFX_SetPresetByIndex(MediaItem_Take take, Int fx, Int idx)",
      "eel": "bool TakeFX_SetPresetByIndex(MediaItem_Take take, int fx, int idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_SetPresetByIndex",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "index", "description": "" },
        { "identifier": "showFlag", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_Show",
    "functioncall": {
      "lua": "reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)",
      "cpp": "void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)",
      "python": "RPR_TakeFX_Show(MediaItem_Take take, Int index, Int showFlag)",
      "eel": "TakeFX_Show(MediaItem_Take take, int index, int showFlag)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "showFlag", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_Show",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": ["midimanagement", "take", "item", "check"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if the active take contains MIDI.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "take",
          "description": "the MediaItem_Take, that you want to check for MIDI-elements"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TakeIsMIDI",
    "functioncall": {
      "lua": "boolean = reaper.TakeIsMIDI(MediaItem_Take take)",
      "cpp": "bool TakeIsMIDI(MediaItem_Take* take)",
      "python": "Boolean RPR_TakeIsMIDI(MediaItem_Take take)",
      "eel": "bool TakeIsMIDI(MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, MediaItem_Take contains MIDI; false, MediaItem_Take doesn't contain MIDI"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.TakeIsMIDI",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.00" },
    "chapers": ["Theme management"],
    "tags": ["theme management", "get", "layout", "theme"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets theme layout information. \n\n    section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. \n    idx can be \n        -1 to query the current value, \n        -2 to get the description of the section (if not global), \n        -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. \n        \n returns false if failed.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string section", "description": "" },
        { "identifier": "integer idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ThemeLayout_GetLayout",
    "functioncall": {
      "lua": "boolean retval, string name = reaper.ThemeLayout_GetLayout(string section, integer idx)",
      "cpp": "bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)",
      "python": "(Boolean retval, String section, Int idx, String nameOut, Int nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)",
      "eel": "bool ThemeLayout_GetLayout(\"section\", int idx, #name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string name", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.ThemeLayout_GetLayout",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.972" },
    "chapers": ["Theme management"],
    "tags": ["theme management", "get", "layout", "theme", "parameter"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer wp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ThemeLayout_GetParameter",
    "functioncall": {
      "lua": "string retval, optional string desc, optional number value, optional number defValue, optional number minValue, optional number maxValue = reaper.ThemeLayout_GetParameter(integer wp)",
      "cpp": "const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)",
      "python": "(String retval, Int wp, String descOutOptional, Int valueOutOptional, Int defValueOutOptional, Int minValueOutOptional, Int maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)",
      "eel": "bool ThemeLayout_GetParameter(#retval, int wp, optional #desc, optional int &value, optional int &defValue, optional int &minValue, optional int &maxValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string retval", "description": "" },
        { "identifier": "optional string desc", "description": "" },
        { "identifier": "optional number value", "description": "" },
        { "identifier": "optional number defValue", "description": "" },
        { "identifier": "optional number minValue", "description": "" },
        { "identifier": "optional number maxValue", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "wp", "type": "integer" }],
        "method_name": "reaper.ThemeLayout_GetParameter",
        "return_values": [
          { "identifier": "retval", "type": "string" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.972" },
    "chapers": ["Theme management"],
    "tags": ["theme management", "refresh", "layout", "theme"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Refreshes all layouts",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "ThemeLayout_RefreshAll",
    "functioncall": {
      "lua": "reaper.ThemeLayout_RefreshAll()",
      "cpp": "void ThemeLayout_RefreshAll()",
      "python": "RPR_ThemeLayout_RefreshAll()",
      "eel": "ThemeLayout_RefreshAll()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.ThemeLayout_RefreshAll",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.974" },
    "chapers": ["Theme management"],
    "tags": ["theme management", "set", "layout", "theme"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets theme layout override for a particular section \n\nsection can be 'global' or 'mcp' etc. \n\nIf setting global layout, prefix a ! to the layout string to clear any per-layout overrides. \n\nReturns false if failed.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string section", "description": "" },
        { "identifier": "string layout", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ThemeLayout_SetLayout",
    "functioncall": {
      "lua": "boolean retval = reaper.ThemeLayout_SetLayout(string section, string layout)",
      "cpp": "bool ThemeLayout_SetLayout(const char* section, const char* layout)",
      "python": "Boolean RPR_ThemeLayout_SetLayout(String section, String layout)",
      "eel": "bool ThemeLayout_SetLayout(\"section\", \" layout\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "string" },
          { "identifier": "layout", "type": "string" }
        ],
        "method_name": "reaper.ThemeLayout_SetLayout",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.972" },
    "chapers": ["Theme management"],
    "tags": ["theme management", "set", "layout", "theme", "parameter"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. \n\nnote that the caller should update layouts via ??? to make changes visible.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer wp", "description": "" },
        { "identifier": "integer value", "description": "" },
        { "identifier": "boolean persist", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "ThemeLayout_SetParameter",
    "functioncall": {
      "lua": "boolean retval = reaper.ThemeLayout_SetParameter(integer wp, integer value, boolean persist)",
      "cpp": "bool ThemeLayout_SetParameter(int wp, int value, bool persist)",
      "python": "Boolean RPR_ThemeLayout_SetParameter(Int wp, Int value, Boolean persist)",
      "eel": "bool ThemeLayout_SetParameter(int wp, int value, bool persist)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "wp", "type": "integer" },
          { "identifier": "value", "type": "integer" },
          { "identifier": "persist", "type": "boolean" }
        ],
        "method_name": "reaper.ThemeLayout_SetParameter",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "time", "precise"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets a precise system timestamp in seconds.\n\nFor EEL-programming, see [eel\\_time\\_precise](#eel_time_precise).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "time_precise",
    "functioncall": {
      "lua": "number = reaper.time_precise()",
      "cpp": "double time_precise()",
      "python": "Float RPR_time_precise()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number",
          "description": "the system-timestamp in seconds with a precision of 7 digits"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.time_precise",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "tpos", "description": "" },
        { "identifier": "measuresIn", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_beatsToTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional number measuresIn)",
      "cpp": "double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)",
      "python": "Float RPR_TimeMap2_beatsToTime(ReaProject proj, Float tpos, const int measuresInOptional)",
      "eel": "double TimeMap2_beatsToTime(ReaProject proj, tpos, optional int measuresIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "tpos", "type": "number" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.TimeMap2_beatsToTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_GetDividedBpmAtTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)",
      "cpp": "double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)",
      "python": "Float RPR_TimeMap2_GetDividedBpmAtTime(ReaProject proj, Float time)",
      "eel": "double TimeMap2_GetDividedBpmAtTime(ReaProject proj, time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.TimeMap2_GetDividedBpmAtTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "when does the next time map (tempo or time sig) change occur",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_GetNextChangeTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)",
      "cpp": "double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)",
      "python": "Float RPR_TimeMap2_GetNextChangeTime(ReaProject proj, Float time)",
      "eel": "double TimeMap2_GetNextChangeTime(ReaProject proj, time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.TimeMap2_GetNextChangeTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "converts project QN position to time.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "qn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_QNToTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap2_QNToTime(ReaProject proj, number qn)",
      "cpp": "double TimeMap2_QNToTime(ReaProject* proj, double qn)",
      "python": "Float RPR_TimeMap2_QNToTime(ReaProject proj, Float qn)",
      "eel": "double TimeMap2_QNToTime(ReaProject proj, qn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "qn", "type": "number" }
        ],
        "method_name": "reaper.TimeMap2_QNToTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "tpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_timeToBeats",
    "functioncall": {
      "lua": "number retval, optional number measures, optional number cml, optional number fullbeats, optional number cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)",
      "cpp": "double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)",
      "python": "(Float retval, ReaProject proj, Float tpos, Int measuresOutOptional, Int cmlOutOptional, Float fullbeatsOutOptional, Int cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)",
      "eel": "double TimeMap2_timeToBeats(ReaProject proj, tpos, optional int &amp;measures, optional int &amp;cml, optional &amp;fullbeats, optional int &amp;cdenom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "measures", "description": "" },
        { "identifier": "cml", "description": "" },
        { "identifier": "fullbeats", "description": "" },
        { "identifier": "cdenom", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "tpos", "type": "number" }
        ],
        "method_name": "reaper.TimeMap2_timeToBeats",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "converts project time position to QN position.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "tpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap2_timeToQN",
    "functioncall": {
      "lua": "number = reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)",
      "cpp": "double TimeMap2_timeToQN(ReaProject* proj, double tpos)",
      "python": "Float RPR_TimeMap2_timeToQN(ReaProject proj, Float tpos)",
      "eel": "double TimeMap2_timeToQN(ReaProject proj, tpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "tpos", "type": "number" }
        ],
        "method_name": "reaper.TimeMap2_timeToQN",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets project framerate, and optionally whether it is drop-frame timecode",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "TimeMap_curFrameRate",
    "functioncall": {
      "lua": "number retval, optional boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)",
      "cpp": "double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOutOptional)",
      "python": "(Float retval, ReaProject proj, Boolean dropFrameOutOptional) = RPR_TimeMap_curFrameRate(proj, dropFrameOutOptional)",
      "eel": "double TimeMap_curFrameRate(ReaProject proj, optional bool &amp;dropFrame)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "dropFrame", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.TimeMap_curFrameRate",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "boolean", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "time", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TimeMap_GetDividedBpmAtTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap_GetDividedBpmAtTime(number time)",
      "cpp": "double TimeMap_GetDividedBpmAtTime(double time)",
      "python": "Float RPR_TimeMap_GetDividedBpmAtTime(Float time)",
      "eel": "double TimeMap_GetDividedBpmAtTime(time)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "time", "type": "number" }],
        "method_name": "reaper.TimeMap_GetDividedBpmAtTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "measure", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_GetMeasureInfo",
    "functioncall": {
      "lua": "number retval, number qn_start, number qn_end, number timesig_num, number timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)",
      "cpp": "double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)",
      "python": "(Float retval, ReaProject proj, Int measure, Float qn_startOut, Float qn_endOut, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)",
      "eel": "double TimeMap_GetMeasureInfo(ReaProject proj, int measure, &amp;qn_start, &amp;qn_end, int &amp;timesig_num, int &amp;timesig_denom, &amp;tempo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "qn_start", "description": "" },
        { "identifier": "qn_end", "description": "" },
        { "identifier": "timesig_num", "description": "" },
        { "identifier": "timesig_denom", "description": "" },
        { "identifier": "tempo", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "measure", "type": "integer" }
        ],
        "method_name": "reaper.TimeMap_GetMeasureInfo",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "qn_start", "type": "number" },
          { "identifier": "qn_end", "type": "number" },
          { "identifier": "timesig_num", "type": "number" },
          { "identifier": "timesig_denom", "type": "number" },
          { "identifier": "tempo", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_GetMetronomePattern",
    "functioncall": {
      "lua": "integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)",
      "cpp": "int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)",
      "python": "(Int retval, ReaProject proj, Float time, String pattern, Int pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)",
      "eel": "int TimeMap_GetMetronomePattern(ReaProject proj, time, #pattern)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "pattern", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" },
          { "identifier": "pattern", "type": "string" }
        ],
        "method_name": "reaper.TimeMap_GetMetronomePattern",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "pattern", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "get the effective time signature and tempo",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "time", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_GetTimeSigAtTime",
    "functioncall": {
      "lua": "number timesig_num retval, number timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)",
      "cpp": "void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)",
      "python": "(ReaProject proj, Float time, Int timesig_numOut, Int timesig_denomOut, Float tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)",
      "eel": "TimeMap_GetTimeSigAtTime(ReaProject proj, time, int &amp;timesig_num, int &amp;timesig_denom, &amp;tempo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "timesig_num retval", "description": "" },
        { "identifier": "timesig_denom", "description": "" },
        { "identifier": "tempo", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "time", "type": "number" }
        ],
        "method_name": "reaper.TimeMap_GetTimeSigAtTime",
        "return_values": [
          { "identifier": "timesig_num", "type": "number" },
          { "identifier": "timesig_denom", "type": "number" },
          { "identifier": "tempo", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Find which measure the given QN position falls in.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "qn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_QNToMeasures",
    "functioncall": {
      "lua": "integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)",
      "cpp": "int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)",
      "python": "(Int retval, ReaProject proj, Float qn, Float qnMeasureStartOutOptional, Float qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)",
      "eel": "int TimeMap_QNToMeasures(ReaProject proj, qn, optional &amp;qnMeasureStart, optional &amp;qnMeasureEnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "qnMeasureStart", "description": "" },
        { "identifier": "qnMeasureEnd", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "qn", "type": "number" }
        ],
        "method_name": "reaper.TimeMap_QNToMeasures",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "converts project QN position to time.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "qn", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TimeMap_QNToTime",
    "functioncall": {
      "lua": "number = reaper.TimeMap_QNToTime(number qn)",
      "cpp": "double TimeMap_QNToTime(double qn)",
      "python": "Float RPR_TimeMap_QNToTime(Float qn)",
      "eel": "double TimeMap_QNToTime(qn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "qn", "type": "number" }],
        "method_name": "reaper.TimeMap_QNToTime",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\\_QNToTime](#TimeMap2_QNToTime)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "qn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_QNToTime_abs",
    "functioncall": {
      "lua": "number = reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)",
      "cpp": "double TimeMap_QNToTime_abs(ReaProject* proj, double qn)",
      "python": "Float RPR_TimeMap_QNToTime_abs(ReaProject proj, Float qn)",
      "eel": "double TimeMap_QNToTime_abs(ReaProject proj, qn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "qn", "type": "number" }
        ],
        "method_name": "reaper.TimeMap_QNToTime_abs",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "converts project QN position to time.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "tpos", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TimeMap_timeToQN",
    "functioncall": {
      "lua": "number = reaper.TimeMap_timeToQN(number tpos)",
      "cpp": "double TimeMap_timeToQN(double tpos)",
      "python": "Float RPR_TimeMap_timeToQN(Float tpos)",
      "eel": "double TimeMap_timeToQN(tpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "tpos", "type": "number" }],
        "method_name": "reaper.TimeMap_timeToQN",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See [TimeMap2\\_timeToQN](#TimeMap2_timeToQN)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "tpos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "TimeMap_timeToQN_abs",
    "functioncall": {
      "lua": "number = reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)",
      "cpp": "double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)",
      "python": "Float RPR_TimeMap_timeToQN_abs(ReaProject proj, Float tpos)",
      "eel": "double TimeMap_timeToQN_abs(ReaProject proj, tpos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "tpos", "type": "number" }
        ],
        "method_name": "reaper.TimeMap_timeToQN_abs",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "send_idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ToggleTrackSendUIMute",
    "functioncall": {
      "lua": "boolean = reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)",
      "cpp": "bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)",
      "python": "Boolean RPR_ToggleTrackSendUIMute(MediaTrack track, Int send_idx)",
      "eel": "bool ToggleTrackSendUIMute(MediaTrack track, int send_idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "send_idx", "type": "integer" }
        ],
        "method_name": "reaper.ToggleTrackSendUIMute",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "channel", "description": "" },
        { "identifier": "clear", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "Track_GetPeakHoldDB",
    "functioncall": {
      "lua": "number = reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)",
      "cpp": "double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)",
      "python": "Float RPR_Track_GetPeakHoldDB(MediaTrack track, Int channel, Boolean clear)",
      "eel": "double Track_GetPeakHoldDB(MediaTrack track, int channel, bool clear)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "channel", "type": "integer" },
          { "identifier": "clear", "type": "boolean" }
        ],
        "method_name": "reaper.Track_GetPeakHoldDB",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "channel", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Track_GetPeakInfo",
    "functioncall": {
      "lua": "number = reaper.Track_GetPeakInfo(MediaTrack track, integer channel)",
      "cpp": "double Track_GetPeakInfo(MediaTrack* track, int channel)",
      "python": "Float RPR_Track_GetPeakInfo(MediaTrack track, Int channel)",
      "eel": "double Track_GetPeakInfo(MediaTrack track, int channel)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "channel", "type": "integer" }
        ],
        "method_name": "reaper.Track_GetPeakInfo",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "tooltip", "message", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Displays tooltip at location, or removes if empty string.\n\nOnly one tooltip can be shown, means, a new tooltip removes the previous one.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "fmt",
          "description": "the message, to be shown as tooltip; empty string removes tooltip"
        },
        { "identifier": "xpos", "description": "horizontal position in pixels" },
        { "identifier": "ypos", "description": "vertical position in pixels" },
        { "identifier": "topmost", "description": "unknown" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackCtl_SetToolTip",
    "functioncall": {
      "lua": "reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)",
      "cpp": "void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)",
      "python": "RPR_TrackCtl_SetToolTip(String fmt, Int xpos, Int ypos, Boolean topmost)",
      "eel": "TrackCtl_SetToolTip(\"fmt\", int xpos, int ypos, bool topmost)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fmt", "type": "string" },
          { "identifier": "xpos", "type": "integer" },
          { "identifier": "ypos", "type": "integer" },
          { "identifier": "topmost", "type": "boolean" }
        ],
        "method_name": "reaper.TrackCtl_SetToolTip",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.92" },
    "chapers": ["FX Management"],
    "tags": ["fxmanagement", "add", "track fx", "input fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). \n\nSpecify a negative value for instantiate to always create a new effect, \n0 to only query the first instance of an effect, or a positive value to add an instance if one is not found.             \n\nReturns -1 on failure or the new position in chain on success.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, into whose FXChain you want to add a new FX; for inputFX(monitoring FX), this must be the master track + recFX==true"
        },
        { "identifier": "string fxname", "description": "the name of the fx/instrument-plugin" },
        {
          "identifier": "boolean recFX",
          "description": "true, add the fx to the inputFX(only when track=master track); false, add it to track"
        },
        {
          "identifier": "integer instantiate",
          "description": "negative, always create this new fx; positive, create the fx, if it does not yet exist; 0, query position of the first fx with that name"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_AddByName",
    "functioncall": {
      "lua": "integer retval = reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)",
      "cpp": "int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)",
      "python": "Int RPR_TrackFX_AddByName(MediaTrack track, String fxname, Boolean recFX, Int instantiate)",
      "eel": "int TrackFX_AddByName(MediaTrack track, \"fxname\", bool recFX, int instantiate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "the index of the position of the new fx; -1, in case of an error"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxname", "type": "string" },
          { "identifier": "recFX", "type": "boolean" },
          { "identifier": "instantiate", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_AddByName",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack src_track",
          "description": "the source-track, whose fx you want to copy; use master-track to address inputfx"
        },
        {
          "identifier": "Int src_fx",
          "description": "the index of the fx(0-based); add 0x1000000 to use it for inputfx(needs src_track=mastertrack)"
        },
        {
          "identifier": "MediaTrack dest_track",
          "description": "the destination-track, into which you want to paste/insert the fx; use master-track to address inputfx"
        },
        {
          "identifier": "Int dest_fx",
          "description": "the index of the fx(0-based); add 0x1000000 to use it for inputfx(needs dest_track=mastertrack)"
        },
        {
          "identifier": "Boolean is_move",
          "description": "true, move the fx; false, just copy the fx as new fx to the new position"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_CopyToTrack",
    "functioncall": {
      "lua": "reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)",
      "cpp": "void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)",
      "python": "RPR_TrackFX_CopyToTrack(MediaTrack src_track, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)",
      "eel": "TrackFX_CopyToTrack(MediaTrack src_track, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_track", "type": "MediaTrack" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_track", "type": "MediaTrack" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_CopyToTrack",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack src_track",
          "description": "the source-track, whose fx you want to copy; use master-track to address inputfx"
        },
        {
          "identifier": "Int src_fx",
          "description": "the index of the fx(0-based); add 0x1000000 to use it for inputfx(needs src_track=mastertrack)"
        },
        {
          "identifier": "MediaItem_Take dest_take",
          "description": "the destination-take, into which you want to paste/insert the fx"
        },
        { "identifier": "Int dest_fx", "description": "the index of the fx(0-based)" },
        {
          "identifier": "Boolean is_move",
          "description": "true, move the fx; false, just copy the fx as new fx to the new position"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_CopyToTake",
    "functioncall": {
      "lua": "reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)",
      "cpp": "void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)",
      "python": "RPR_TrackFX_CopyToTake(MediaTrack src_track, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)",
      "eel": "TrackFX_CopyToTake(MediaTrack src_track, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_track", "type": "MediaTrack" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_take", "type": "MediaItem_Take" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_CopyToTake",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer fx", "description": "" },
        { "identifier": "integer param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_EndParamEdit",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)",
      "cpp": "bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)",
      "python": "Boolean RPR_TrackFX_EndParamEdit(MediaTrack track, Int fx, Int param)",
      "eel": "bool TrackFX_EndParamEdit(MediaTrack track, int fx, int param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_EndParamEdit",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns a formatted version of the currently set parameter-value.\n\nNote: only works with FX that support Cockos VST extensions.\n\nreturns false in case of an error",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, which contains the fx; use master-track if you want to address input-fx(see fx)"
        },
        {
          "identifier": "integer fx",
          "description": "the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)"
        },
        {
          "identifier": "integer param",
          "description": "the parameter, whose format you want to apply to the value"
        },
        {
          "identifier": "number val",
          "description": "a value, which shall be formatted accordingly"
        },
        { "identifier": "string buf", "description": "simply set this to \"\"" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_FormatParamValue",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val, string buf)",
      "cpp": "bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, Int param, Float val, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, buf, buf_sz)",
      "eel": "bool TrackFX_FormatParamValue(MediaTrack track, int fx, int param, val, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, parameter can be retrieved; false, an error occured(e.g. no such fx)"
        },
        { "identifier": "string buf", "description": "the formatted parameter value" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "val", "type": "number" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_FormatParamValue",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns a formatted version of the currently set parameter-value and normalizes it.\n        \nNote: only works with FX that support Cockos VST extensions.\n\nreturns false in case of an error",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, which contains the fx; use master-track if you want to address input-fx(see fx)"
        },
        {
          "identifier": "integer fx",
          "description": "the index of the fx(0-based); add 0x1000000 to use inputFX(only with track=mastertrack)"
        },
        {
          "identifier": "integer param",
          "description": "the parameter, whose format you want to apply to the value"
        },
        {
          "identifier": "number val",
          "description": "a value, which shall be formatted accordingly"
        },
        { "identifier": "string buf", "description": "simply set this to \"\"" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_FormatParamValueNormalized",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)",
      "cpp": "bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, Int param, Float value, String buf, Int buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)",
      "eel": "bool TrackFX_FormatParamValueNormalized(MediaTrack track, int fx, int param, value, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, parameter can be retrieved; false, an error occured(e.g. no such fx)"
        },
        { "identifier": "string buf", "description": "the formatted parameter value" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "value", "type": "number" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_FormatParamValueNormalized",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See [TrackFX\\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\\_GetEQ](#TrackFX_GetEQ). Deprecated in favor of TrackFX_AddByName.\n\nreturns -1 in case of an error",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the MediaTrack, which may hold the fx"
        },
        {
          "identifier": "string fxname",
          "description": "the name of the fx, whose first index-position you want to query"
        },
        {
          "identifier": "boolean instantiate",
          "description": "true, add the fx, is it's not existing; false, just query"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetByName",
    "functioncall": {
      "lua": "integer retval = reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)",
      "cpp": "int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)",
      "python": "Int RPR_TrackFX_GetByName(MediaTrack track, String fxname, Boolean instantiate)",
      "eel": "int TrackFX_GetByName(MediaTrack track, \"fxname\", bool instantiate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "the index of the first track FX with fxname"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxname", "type": "string" },
          { "identifier": "instantiate", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_GetByName",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose FXChain-visibility you want to query"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetChainVisible",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetChainVisible(MediaTrack track)",
      "cpp": "int TrackFX_GetChainVisible(MediaTrack* track)",
      "python": "Int RPR_TrackFX_GetChainVisible(MediaTrack track)",
      "eel": "int TrackFX_GetChainVisible(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the current visibility/selected state of the FXChain:\npositive, the index of the selected fx(0-based)\n-1, hidden\n-2, visible but no effect inserted"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.TrackFX_GetChainVisible",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns the number of trackfx in the FXChain of track",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose number of fx in the FXChain you want to count"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetCount",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetCount(MediaTrack track)",
      "cpp": "int TrackFX_GetCount(MediaTrack* track)",
      "python": "Int RPR_TrackFX_GetCount(MediaTrack track)",
      "eel": "int TrackFX_GetCount(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer", "description": "the number of fx in the FXChain of track" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.TrackFX_GetCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns, if a certain FX in track is enabled\n\nSee [TrackFX\\_SetEnabled](#TrackFX_SetEnabled)\n\nreturns false in case of an error",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose fx-enabled-state you want to query; use master-track to query inputFX(see fx)"
        },
        {
          "identifier": "integer fx",
          "description": "the index of the fx, whose enabled-state you want to query(0-based); add 0x1000000 to query inputFX"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetEnabled",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)",
      "cpp": "bool TrackFX_GetEnabled(MediaTrack* track, int fx)",
      "python": "Boolean RPR_TrackFX_GetEnabled(MediaTrack track, Int fx)",
      "eel": "bool TrackFX_GetEnabled(MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, fx is enabled; false, fx is disabled or not existing"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetEnabled",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See [TrackFX\\_GetInstrument](#TrackFX_GetInstrument), [TrackFX\\_GetByName](#TrackFX_GetByName).\n\nreturns -1 if no ReaEQ is available.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose first ReaEQ-instance-index you want to query"
        },
        {
          "identifier": "boolean instantiate",
          "description": "true, add ReaEQ if not existing yet; false, just query its position"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetEQ",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)",
      "cpp": "int TrackFX_GetEQ(MediaTrack* track, bool instantiate)",
      "python": "Int RPR_TrackFX_GetEQ(MediaTrack track, Boolean instantiate)",
      "eel": "int TrackFX_GetEQ(MediaTrack track, bool instantiate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the index of first ReaEQ in the FXChain; -1, if no ReaEQ is available"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "instantiate", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_GetEQ",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\n\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose ReaEQ-instance-enabledstate you want to query"
        },
        {
          "identifier": "integer fxidx",
          "description": "the index of the fx in the FXChain, that is the ReaEQ-instance in question"
        },
        {
          "identifier": "integer bandtype",
          "description": "0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass."
        },
        {
          "identifier": "integer bandidx",
          "description": "0=first band matching bandtype, 1=2nd band matching bandtype, etc."
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetEQBandEnabled",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx)",
      "cpp": "bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx)",
      "python": "Boolean RPR_TrackFX_GetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx)",
      "eel": "bool TrackFX_GetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if the EQ band is enabled; false, if the EQ band is disabled"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxidx", "type": "integer" },
          { "identifier": "bandtype", "type": "integer" },
          { "identifier": "bandidx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetEQBandEnabled",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\nBandidx (ignored for master gain): 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fxidx", "description": "" },
        { "identifier": "paramidx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetEQParam",
    "functioncall": {
      "lua": "boolean retval, number bandtype, number bandidx, number paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fxidx, integer paramidx)",
      "cpp": "bool TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)",
      "python": "(Boolean retval, MediaTrack track, Int fxidx, Int paramidx, Int bandtypeOut, Int bandidxOut, Int paramtypeOut, Float normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)",
      "eel": "bool TrackFX_GetEQParam(MediaTrack track, int fxidx, int paramidx, int &amp;bandtype, int &amp;bandidx, int &amp;paramtype, &amp;normval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "bandtype", "description": "" },
        { "identifier": "bandidx", "description": "" },
        { "identifier": "paramtype", "description": "" },
        { "identifier": "normval", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxidx", "type": "integer" },
          { "identifier": "paramidx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetEQParam",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "bandtype", "type": "number" },
          { "identifier": "bandidx", "type": "number" },
          { "identifier": "paramtype", "type": "number" },
          { "identifier": "normval", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns HWND of floating window for effect index, if any",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetFloatingWindow",
    "functioncall": {
      "lua": "HWND = reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer index)",
      "cpp": "HWND TrackFX_GetFloatingWindow(MediaTrack* track, int index)",
      "python": "HWND RPR_TrackFX_GetFloatingWindow(MediaTrack track, Int index)",
      "eel": "HWND TrackFX_GetFloatingWindow(MediaTrack track, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetFloatingWindow",
        "return_values": [{ "type": "HWND" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetFormattedParamValue",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param, string buf)",
      "cpp": "bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, buf, buf_sz)",
      "eel": "bool TrackFX_GetFormattedParamValue(MediaTrack track, int fx, int param, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetFormattedParamValue",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetFXGUID",
    "functioncall": {
      "lua": "string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)",
      "cpp": "GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)",
      "python": "GUID RPR_TrackFX_GetFXGUID(MediaTrack track, Int fx)",
      "eel": "bool TrackFX_GetFXGUID(#retguid, MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "GUID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetFXGUID",
        "return_values": [{ "identifier": "GUID", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetFXName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx, string buf)",
      "cpp": "bool TrackFX_GetFXName(MediaTrack* track, int fx, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, String buf, Int buf_sz) = RPR_TrackFX_GetFXName(track, fx, buf, buf_sz)",
      "eel": "bool TrackFX_GetFXName(MediaTrack track, int fx, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetFXName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetByName](#TrackFX_GetByName).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetInstrument",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetInstrument(MediaTrack track)",
      "cpp": "int TrackFX_GetInstrument(MediaTrack* track)",
      "python": "Int RPR_TrackFX_GetInstrument(MediaTrack track)",
      "eel": "int TrackFX_GetInstrument(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.TrackFX_GetInstrument",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets the number of input/output pins for FX if available, returns plug-in type or -1 on error",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetIOSize",
    "functioncall": {
      "lua": "integer retval, optional number inputPins, optional number outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)",
      "cpp": "int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)",
      "python": "(Int retval, MediaTrack track, Int fx, Int inputPinsOutOptional, Int outputPinsOutOptional) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOutOptional, outputPinsOutOptional)",
      "eel": "int TrackFX_GetIOSize(MediaTrack track, int fx, optional int &amp;inputPins, optional int &amp;outputPins)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "inputPins", "description": "" },
        { "identifier": "outputPins", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetIOSize",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets plug-in specific named configuration value (returns true on success). Special values: 'pdc' returns PDC latency. 'in_pin_0' returns name of first input pin (if available), 'out_pin_0' returns name of first output pin (if available), etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "parmname", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetNamedConfigParm",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)",
      "cpp": "bool TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOut, int bufOut_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, String parmname, String bufOut, Int bufOut_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOut, bufOut_sz)",
      "eel": "bool TrackFX_GetNamedConfigParm(MediaTrack track, int fx, \"parmname\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "parmname", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetNamedConfigParm",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetNumParams",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)",
      "cpp": "int TrackFX_GetNumParams(MediaTrack* track, int fx)",
      "python": "Int RPR_TrackFX_GetNumParams(MediaTrack track, Int fx)",
      "eel": "int TrackFX_GetNumParams(MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetNumParams",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "check", "open", "get", "ui", "fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See [TrackFX\\_SetOpen](#TrackFX_SetOpen)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the MediaTrack, in which the fx to check is located"
        },
        { "identifier": "fx", "description": "the id of the fx in the fx-chain" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetOpen",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_GetOpen(MediaTrack track, integer fx)",
      "cpp": "bool TrackFX_GetOpen(MediaTrack* track, int fx)",
      "python": "Boolean RPR_TrackFX_GetOpen(MediaTrack track, Int fx)",
      "eel": "bool TrackFX_GetOpen(MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, TrackFX is open; false, TrackFX is closed"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetOpen",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetParam",
    "functioncall": {
      "lua": "number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)",
      "cpp": "double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)",
      "python": "(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)",
      "eel": "double TrackFX_GetParam(MediaTrack track, int fx, int param, &amp;minval, &amp;maxval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "minval", "description": "" },
        { "identifier": "maxval", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetParam",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "minval", "type": "number" },
          { "identifier": "maxval", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetParameterStepSizes",
    "functioncall": {
      "lua": "boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)",
      "cpp": "bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)",
      "python": "(Boolean retval, MediaTrack track, Int fx, Int param, Float stepOut, Float smallstepOut, Float largestepOut, Boolean istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)",
      "eel": "bool TrackFX_GetParameterStepSizes(MediaTrack track, int fx, int param, &amp;step, &amp;smallstep, &amp;largestep, bool &amp;istoggle)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "step", "description": "" },
        { "identifier": "smallstep", "description": "" },
        { "identifier": "largestep", "description": "" },
        { "identifier": "istoggle", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetParameterStepSizes",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "step", "type": "number" },
          { "identifier": "smallstep", "type": "number" },
          { "identifier": "largestep", "type": "number" },
          { "identifier": "istoggle", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetParamEx",
    "functioncall": {
      "lua": "number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)",
      "cpp": "double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)",
      "python": "(Float retval, MediaTrack track, Int fx, Int param, Float minvalOut, Float maxvalOut, Float midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)",
      "eel": "double TrackFX_GetParamEx(MediaTrack track, int fx, int param, &amp;minval, &amp;maxval, &amp;midval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "minval", "description": "" },
        { "identifier": "maxval", "description": "" },
        { "identifier": "midval", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetParamEx",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "minval", "type": "number" },
          { "identifier": "maxval", "type": "number" },
          { "identifier": "midval", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetParamName",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param, string buf)",
      "cpp": "bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* buf, int buf_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, Int param, String buf, Int buf_sz) = RPR_TrackFX_GetParamName(track, fx, param, buf, buf_sz)",
      "eel": "bool TrackFX_GetParamName(MediaTrack track, int fx, int param, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetParamName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetParamNormalized",
    "functioncall": {
      "lua": "number = reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)",
      "cpp": "double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)",
      "python": "Float RPR_TrackFX_GetParamNormalized(MediaTrack track, Int fx, Int param)",
      "eel": "double TrackFX_GetParamNormalized(MediaTrack track, int fx, int param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetParamNormalized",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "gets the effective channel mapping bitmask for a particular pin. high32OutOptional will be set to the high 32 bits",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "is", "description": "" },
        { "identifier": "pin", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetPinMappings",
    "functioncall": {
      "lua": "integer retval, optional number high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer is, integer pin)",
      "cpp": "int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int* high32OutOptional)",
      "python": "(Int retval, MediaTrack tr, Int fx, Int isOutput, Int pin, Int high32OutOptional) = RPR_TrackFX_GetPinMappings(tr, fx, isOutput, pin, high32OutOptional)",
      "eel": "int TrackFX_GetPinMappings(MediaTrack tr, int fx, int is, int pin, optional int &amp;high32)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "high32", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "is", "type": "integer" },
          { "identifier": "pin", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetPinMappings",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See [TrackFX\\_SetPreset](#TrackFX_SetPreset).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetPreset",
    "functioncall": {
      "lua": "boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx, string presetname)",
      "cpp": "bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetname, int presetname_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, String presetname, Int presetname_sz) = RPR_TrackFX_GetPreset(track, fx, presetname, presetname_sz)",
      "eel": "bool TrackFX_GetPreset(MediaTrack track, int fx, #presetname)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "presetname", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetname", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetPreset",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "presetname", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See [TrackFX\\_SetPresetByIndex](#TrackFX_SetPresetByIndex)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetPresetIndex",
    "functioncall": {
      "lua": "integer retval, number numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)",
      "cpp": "int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)",
      "python": "(Int retval, MediaTrack track, Int fx, Int numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)",
      "eel": "int TrackFX_GetPresetIndex(MediaTrack track, int fx, int &amp;numberOfPresets)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "numberOfPresets", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetPresetIndex",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "numberOfPresets", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetRecChainVisible",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetRecChainVisible(MediaTrack track)",
      "cpp": "int TrackFX_GetRecChainVisible(MediaTrack* track)",
      "python": "Int RPR_TrackFX_GetRecChainVisible(MediaTrack track)",
      "eel": "int TrackFX_GetRecChainVisible(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.TrackFX_GetRecChainVisible",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetRecCount",
    "functioncall": {
      "lua": "integer = reaper.TrackFX_GetRecCount(MediaTrack track)",
      "cpp": "int TrackFX_GetRecCount(MediaTrack* track)",
      "python": "Int RPR_TrackFX_GetRecCount(MediaTrack track)",
      "eel": "int TrackFX_GetRecCount(MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.TrackFX_GetRecCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetUserPresetFilename",
    "functioncall": {
      "lua": "string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx, string fn)",
      "cpp": "void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fn, int fn_sz)",
      "python": "(MediaTrack track, Int fx, String fn, Int fn_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fn, fn_sz)",
      "eel": "TrackFX_GetUserPresetFilename(MediaTrack track, int fx, #fn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fn", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "fn", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_GetUserPresetFilename",
        "return_values": [{ "identifier": "fn", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "presetmove", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_NavigatePresets",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)",
      "cpp": "bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)",
      "python": "Boolean RPR_TrackFX_NavigatePresets(MediaTrack track, Int fx, Int presetmove)",
      "eel": "bool TrackFX_NavigatePresets(MediaTrack track, int fx, int presetmove)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetmove", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_NavigatePresets",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TrackFX\\_GetEnabled](#TrackFX_GetEnabled)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "enabled", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetEnabled",
    "functioncall": {
      "lua": "reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)",
      "cpp": "void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)",
      "python": "RPR_TrackFX_SetEnabled(MediaTrack track, Int fx, Boolean enabled)",
      "eel": "TrackFX_SetEnabled(MediaTrack track, int fx, bool enabled)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "enabled", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_SetEnabled",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\nBandidx: 0=first band matching bandtype, 1=2nd band matching bandtype, etc.\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_SetEQParam](#TrackFX_SetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fxidx", "description": "" },
        { "identifier": "bandtype", "description": "" },
        { "identifier": "bandidx", "description": "" },
        { "identifier": "enable", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetEQBandEnabled",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)",
      "cpp": "bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)",
      "python": "Boolean RPR_TrackFX_SetEQBandEnabled(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Boolean enable)",
      "eel": "bool TrackFX_SetEQBandEnabled(MediaTrack track, int fxidx, int bandtype, int bandidx, bool enable)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxidx", "type": "integer" },
          { "identifier": "bandtype", "type": "integer" },
          { "identifier": "bandidx", "type": "integer" },
          { "identifier": "enable", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_SetEQBandEnabled",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=lhipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee [TrackFX\\_GetEQ](#TrackFX_GetEQ), [TrackFX\\_GetEQParam](#TrackFX_GetEQParam), [TrackFX\\_GetEQBandEnabled](#TrackFX_GetEQBandEnabled), [TrackFX\\_SetEQBandEnabled](#TrackFX_SetEQBandEnabled).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fxidx", "description": "" },
        { "identifier": "bandtype", "description": "" },
        { "identifier": "bandidx", "description": "" },
        { "identifier": "paramtype", "description": "" },
        { "identifier": "val", "description": "" },
        { "identifier": "isnorm", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetEQParam",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetEQParam(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)",
      "cpp": "bool TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)",
      "python": "Boolean RPR_TrackFX_SetEQParam(MediaTrack track, Int fxidx, Int bandtype, Int bandidx, Int paramtype, Float val, Boolean isnorm)",
      "eel": "bool TrackFX_SetEQParam(MediaTrack track, int fxidx, int bandtype, int bandidx, int paramtype, val, bool isnorm)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fxidx", "type": "integer" },
          { "identifier": "bandtype", "type": "integer" },
          { "identifier": "bandidx", "type": "integer" },
          { "identifier": "paramtype", "type": "integer" },
          { "identifier": "val", "type": "number" },
          { "identifier": "isnorm", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_SetEQParam",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets plug-in specific named configuration value (returns true on success)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetNamedConfigParm",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)",
      "cpp": "bool TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)",
      "python": "Boolean RPR_TrackFX_SetNamedConfigParm(MediaTrack track, Int fx, String parmname, String value)",
      "eel": "bool TrackFX_SetNamedConfigParm(MediaTrack track, int fx, \"parmname\", \"value\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "value", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_SetNamedConfigParm",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TrackFX\\_GetOffline](#TrackFX_GetOffline)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer fx", "description": "" },
        { "identifier": "boolean offline", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetOffline",
    "functioncall": {
      "lua": "reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)",
      "cpp": "void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)",
      "python": "RPR_TrackFX_SetOffline(MediaTrack track, Int fx, Boolean offline)",
      "eel": "TrackFX_SetOffline(MediaTrack track, int fx, bool offline)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "offline", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_SetOffline",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TakeFX\\_GetOffline](#TakeFX_GetOffline)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer fx", "description": "" },
        { "identifier": "boolean offline", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_SetOffline",
    "functioncall": {
      "lua": "reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)",
      "cpp": "void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)",
      "python": "RPR_TakeFX_SetOffline(MediaItem_Take take, Int fx, Boolean offline)",
      "eel": "TakeFX_SetOffline(MediaItem_Take take, int fx, bool offline)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "offline", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_SetOffline",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TakeFX\\_SetOffline](#TakeFX_SetOffline)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_GetOffline",
    "functioncall": {
      "lua": "boolean retval = reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)",
      "cpp": "bool TakeFX_GetOffline(MediaItem_Take* take, int fx)",
      "python": "Boolean RPR_TakeFX_GetOffline(MediaItem_Take take, Int fx)",
      "eel": "bool TakeFX_GetOffline(MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_GetOffline",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Remove a FX from take chain (returns true on success)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take take", "description": "" },
        { "identifier": "integer fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_Delete",
    "functioncall": {
      "lua": "boolean retval = reaper.TakeFX_Delete(MediaItem_Take take, integer fx)",
      "cpp": "bool TakeFX_Delete(MediaItem_Take* take, int fx)",
      "python": " Boolean RPR_TakeFX_Delete(MediaItem_Take take, Int fx)",
      "eel": "bool TakeFX_Delete(MediaItem_Take take, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TakeFX_Delete",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take src_take", "description": "" },
        { "identifier": "integer src_fx", "description": "" },
        { "identifier": "MediaItem_Take dest_take", "description": "" },
        { "identifier": "integer dest_fx", "description": "" },
        { "identifier": "boolean is_move", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_CopyToTake",
    "functioncall": {
      "lua": "reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)",
      "cpp": "void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)",
      "python": "RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)",
      "eel": "TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_take", "type": "MediaItem_Take" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_take", "type": "MediaItem_Take" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_CopyToTake",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take src_take", "description": "" },
        { "identifier": "integer src_fx", "description": "" },
        { "identifier": "MediaTrack dest_track", "description": "" },
        { "identifier": "integer dest_fx", "description": "" },
        { "identifier": "boolean is_move", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_CopyToTrack",
    "functioncall": {
      "lua": "reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)",
      "cpp": "void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)",
      "python": " RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)",
      "eel": "TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_take", "type": "MediaItem_Take" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_track", "type": "MediaTrack" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_CopyToTrack",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "See [TrackFX\\_SetOffline](#TrackFX_SetOffline)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer fx", "description": "" },
        { "identifier": "boolean offline", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_GetOffline",
    "functioncall": {
      "lua": "boolean retval = reaper.TrackFX_GetOffline(MediaTrack track, integer fx)",
      "cpp": "bool TrackFX_GetOffline(MediaTrack* track, int fx)",
      "python": "Boolean RPR_TrackFX_GetOffline(MediaTrack track, Int fx)",
      "eel": "bool TrackFX_GetOffline(MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_GetOffline",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_track=dest_track to reorder. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take src_take", "description": "" },
        { "identifier": "integer src_fx", "description": "" },
        { "identifier": "MediaItem_Take dest_take", "description": "" },
        { "identifier": "integer dest_fx", "description": "" },
        { "identifier": "boolean is_move", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_CopyToTake",
    "functioncall": {
      "lua": "reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)",
      "cpp": "void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)",
      "python": "RPR_TakeFX_CopyToTake(MediaItem_Take src_take, Int src_fx, MediaItem_Take dest_take, Int dest_fx, Boolean is_move)",
      "eel": "TakeFX_CopyToTake(MediaItem_Take src_take, int src_fx, MediaItem_Take dest_take, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_take", "type": "MediaItem_Take" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_take", "type": "MediaItem_Take" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_CopyToTake",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem_Take src_take", "description": "" },
        { "identifier": "integer src_fx", "description": "" },
        { "identifier": "MediaTrack dest_track", "description": "" },
        { "identifier": "integer dest_fx", "description": "" },
        { "identifier": "boolean is_move", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "TakeFX_CopyToTrack",
    "functioncall": {
      "lua": "reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)",
      "cpp": "void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)",
      "python": "RPR_TakeFX_CopyToTrack(MediaItem_Take src_take, Int src_fx, MediaTrack dest_track, Int dest_fx, Boolean is_move)",
      "eel": "TakeFX_CopyToTrack(MediaItem_Take src_take, int src_fx, MediaTrack dest_track, int dest_fx, bool is_move)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src_take", "type": "MediaItem_Take" },
          { "identifier": "src_fx", "type": "integer" },
          { "identifier": "dest_track", "type": "MediaTrack" },
          { "identifier": "dest_fx", "type": "integer" },
          { "identifier": "is_move", "type": "boolean" }
        ],
        "method_name": "reaper.TakeFX_CopyToTrack",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Remove a FX from track chain (returns true on success).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "integer fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_Delete",
    "functioncall": {
      "lua": "boolean retval = reaper.TrackFX_Delete(MediaTrack track, integer fx)",
      "cpp": "bool TrackFX_Delete(MediaTrack* track, int fx)",
      "python": "Boolean RPR_TrackFX_Delete(MediaTrack track, Int fx)",
      "eel": "bool TrackFX_Delete(MediaTrack track, int fx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_Delete",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "set", "open", "ui", "fx"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Open this FX UI. See [TrackFX\\_GetOpen](#TrackFX_GetOpen)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "the track, in which the FX to be opened is located"
        },
        { "identifier": "fx", "description": "the fx-id within the fxchain" },
        { "identifier": "open", "description": "true, open FX-UI; false, close FX-UI" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetOpen",
    "functioncall": {
      "lua": "reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)",
      "cpp": "void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)",
      "python": "RPR_TrackFX_SetOpen(MediaTrack track, Int fx, Boolean open)",
      "eel": "TrackFX_SetOpen(MediaTrack track, int fx, bool open)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "open", "type": "boolean" }
        ],
        "method_name": "reaper.TrackFX_SetOpen",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetParam",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)",
      "cpp": "bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)",
      "python": "Boolean RPR_TrackFX_SetParam(MediaTrack track, Int fx, Int param, Float val)",
      "eel": "bool TrackFX_SetParam(MediaTrack track, int fx, int param, val)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "val", "type": "number" }
        ],
        "method_name": "reaper.TrackFX_SetParam",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "param", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetParamNormalized",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)",
      "cpp": "bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)",
      "python": "Boolean RPR_TrackFX_SetParamNormalized(MediaTrack track, Int fx, Int param, Float value)",
      "eel": "bool TrackFX_SetParamNormalized(MediaTrack track, int fx, int param, value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "param", "type": "integer" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.TrackFX_SetParamNormalized",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "is", "description": "" },
        { "identifier": "pin", "description": "" },
        { "identifier": "low32bits", "description": "" },
        { "identifier": "hi32bits", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetPinMappings",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer is, integer pin, integer low32bits, integer hi32bits)",
      "cpp": "bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isOutput, int pin, int low32bits, int hi32bits)",
      "python": "Boolean RPR_TrackFX_SetPinMappings(MediaTrack tr, Int fx, Int isOutput, Int pin, Int low32bits, Int hi32bits)",
      "eel": "bool TrackFX_SetPinMappings(MediaTrack tr, int fx, int is, int pin, int low32bits, int hi32bits)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "is", "type": "integer" },
          { "identifier": "pin", "type": "integer" },
          { "identifier": "low32bits", "type": "integer" },
          { "identifier": "hi32bits", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_SetPinMappings",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See [TrackFX\\_GetPreset](#TrackFX_GetPreset).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "presetname", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetPreset",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)",
      "cpp": "bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)",
      "python": "Boolean RPR_TrackFX_SetPreset(MediaTrack track, Int fx, String presetname)",
      "eel": "bool TrackFX_SetPreset(MediaTrack track, int fx, \"presetname\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "presetname", "type": "string" }
        ],
        "method_name": "reaper.TrackFX_SetPreset",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See [TrackFX\\_GetPresetIndex](#TrackFX_GetPresetIndex).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" },
        { "identifier": "idx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_SetPresetByIndex",
    "functioncall": {
      "lua": "boolean = reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)",
      "cpp": "bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)",
      "python": "Boolean RPR_TrackFX_SetPresetByIndex(MediaTrack track, Int fx, Int idx)",
      "eel": "bool TrackFX_SetPresetByIndex(MediaTrack track, int fx, int idx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" },
          { "identifier": "idx", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_SetPresetByIndex",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "show", "fx", "window"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Shows a track-FX-window.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "the MediaTrack, whose TrackFX you want to show" },
        { "identifier": "index", "description": "the id of the track within the fxchain" },
        {
          "identifier": "showFlag",
          "description": "how to show the FX-window\n0, for hidechain\n1, for show chain(index valid)\n2, for hide floating window(index valid)\n3, for show floating window(index valid)"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "TrackFX_Show",
    "functioncall": {
      "lua": "reaper.TrackFX_Show(MediaTrack track, integer index, integer showFlag)",
      "cpp": "void TrackFX_Show(MediaTrack* track, int index, int showFlag)",
      "python": "RPR_TrackFX_Show(MediaTrack track, Int index, Int showFlag)",
      "eel": "TrackFX_Show(MediaTrack track, int index, int showFlag)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "showFlag", "type": "integer" }
        ],
        "method_name": "reaper.TrackFX_Show",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Updates the TCP and optionally the MCP. Helpful, when setting a new trackheight using I\\_HEIGHTOVERRIDE in [SetMediaTrackInfo\\_Value](#SetMediaTrackInfo_Value).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "isMinor",
          "description": "false, updates only TCP; true, updates TCP and MCP"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "TrackList_AdjustWindows",
    "functioncall": {
      "lua": "reaper.TrackList_AdjustWindows(boolean isMinor)",
      "cpp": "void TrackList_AdjustWindows(bool isMinor)",
      "python": "RPR_TrackList_AdjustWindows(Boolean isMinor)",
      "eel": "TrackList_AdjustWindows(bool isMinor)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "isMinor", "type": "boolean" }],
        "method_name": "reaper.TrackList_AdjustWindows",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "TrackList_UpdateAllExternalSurfaces",
    "functioncall": {
      "lua": "reaper.TrackList_UpdateAllExternalSurfaces()",
      "cpp": "void TrackList_UpdateAllExternalSurfaces()",
      "python": "RPR_TrackList_UpdateAllExternalSurfaces()",
      "eel": "TrackList_UpdateAllExternalSurfaces()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.TrackList_UpdateAllExternalSurfaces",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call to start a new block",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Undo_BeginBlock",
    "functioncall": {
      "lua": "reaper.Undo_BeginBlock()",
      "cpp": "void Undo_BeginBlock()",
      "python": "RPR_Undo_BeginBlock()",
      "eel": "Undo_BeginBlock()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.Undo_BeginBlock", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": ["projectmanagement", "start", "undo", "block"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call to start a new undo block. Code after that and before [Undo\\_EndBlock](#Undo_EndBlock) can be undone.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Undo_BeginBlock2",
    "functioncall": {
      "lua": "reaper.Undo_BeginBlock2(ReaProject proj)",
      "cpp": "void Undo_BeginBlock2(ReaProject* proj)",
      "python": "RPR_Undo_BeginBlock2(ReaProject proj)",
      "eel": "Undo_BeginBlock2(ReaProject proj)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.Undo_BeginBlock2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns string of next action,if able,NULL if not",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Undo_CanRedo2",
    "functioncall": {
      "lua": "string = reaper.Undo_CanRedo2(ReaProject proj)",
      "cpp": "const char* Undo_CanRedo2(ReaProject* proj)",
      "python": "String RPR_Undo_CanRedo2(ReaProject proj)",
      "eel": "bool Undo_CanRedo2(#retval, ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.Undo_CanRedo2",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "returns string of last action,if able,NULL if not",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Undo_CanUndo2",
    "functioncall": {
      "lua": "string = reaper.Undo_CanUndo2(ReaProject proj)",
      "cpp": "const char* Undo_CanUndo2(ReaProject* proj)",
      "python": "String RPR_Undo_CanUndo2(ReaProject proj)",
      "eel": "bool Undo_CanUndo2(#retval, ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.Undo_CanUndo2",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "nonzero if success",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Undo_DoRedo2",
    "functioncall": {
      "lua": "integer = reaper.Undo_DoRedo2(ReaProject proj)",
      "cpp": "int Undo_DoRedo2(ReaProject* proj)",
      "python": "Int RPR_Undo_DoRedo2(ReaProject proj)",
      "eel": "int Undo_DoRedo2(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.Undo_DoRedo2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "nonzero if success",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "Undo_DoUndo2",
    "functioncall": {
      "lua": "integer = reaper.Undo_DoUndo2(ReaProject proj)",
      "cpp": "int Undo_DoUndo2(ReaProject* proj)",
      "python": "Int RPR_Undo_DoUndo2(ReaProject proj)",
      "eel": "int Undo_DoUndo2(ReaProject proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.Undo_DoUndo2",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call to end the block,with extra flags if any,and a description",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "descchange",
          "description": "a string that describes the changes of the undo-block"
        },
        {
          "identifier": "extraflags",
          "description": "-1, all undo states\n1, track/master vol/pan/routing, routing/hwout envelopes too\n2, track/master fx\n4, track items\n8, loop selection, markers, regions, extensions\n16, freeze state\n32, non-FX envelopes only\n64, FX envelopes, implied by UNDO_STATE_FX too\n128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state\n256, ARA state"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Undo_EndBlock",
    "functioncall": {
      "lua": "reaper.Undo_EndBlock(string descchange, integer extraflags)",
      "cpp": "void Undo_EndBlock(const char* descchange, int extraflags)",
      "python": "RPR_Undo_EndBlock(String descchange, Int extraflags)",
      "eel": "Undo_EndBlock(\"descchange\", int extraflags)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "descchange", "type": "string" },
          { "identifier": "extraflags", "type": "integer" }
        ],
        "method_name": "reaper.Undo_EndBlock",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.979" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "call to end the block,with extra flags if any,and a description",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "descchange",
          "description": "a string that describes the changes of the undo-block"
        },
        {
          "identifier": "extraflags",
          "description": "-1, all undo states\n1, track/master vol/pan/routing, routing/hwout envelopes too\n2, track/master fx\n4, track items\n8, loop selection, markers, regions, extensions\n16, freeze state\n32, non-FX envelopes only\n64, FX envelopes, implied by UNDO\\_STATE\\_FX too\n128, contents of automation items -- not position, length, rate etc of automation items, which is part of envelope state\n256, ARA state"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "Undo_EndBlock2",
    "functioncall": {
      "lua": "reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)",
      "cpp": "void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)",
      "python": "RPR_Undo_EndBlock2(ReaProject proj, String descchange, Int extraflags)",
      "eel": "Undo_EndBlock2(ReaProject proj, \"descchange\", int extraflags)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "descchange", "type": "string" },
          { "identifier": "extraflags", "type": "integer" }
        ],
        "method_name": "reaper.Undo_EndBlock2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "limited state change to items",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "descchange", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Undo_OnStateChange",
    "functioncall": {
      "lua": "reaper.Undo_OnStateChange(string descchange)",
      "cpp": "void Undo_OnStateChange(const char* descchange)",
      "python": "RPR_Undo_OnStateChange(String descchange)",
      "eel": "Undo_OnStateChange(\"descchange\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "descchange", "type": "string" }],
        "method_name": "reaper.Undo_OnStateChange",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "limited state change to items",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "descchange", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "Undo_OnStateChange2",
    "functioncall": {
      "lua": "reaper.Undo_OnStateChange2(ReaProject proj, string descchange)",
      "cpp": "void Undo_OnStateChange2(ReaProject* proj, const char* descchange)",
      "python": "RPR_Undo_OnStateChange2(ReaProject proj, String descchange)",
      "eel": "Undo_OnStateChange2(ReaProject proj, \"descchange\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "descchange", "type": "string" }
        ],
        "method_name": "reaper.Undo_OnStateChange2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "name", "description": "" },
        { "identifier": "item", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "Undo_OnStateChange_Item",
    "functioncall": {
      "lua": "reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)",
      "cpp": "void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)",
      "python": "RPR_Undo_OnStateChange_Item(ReaProject proj, String name, MediaItem item)",
      "eel": "Undo_OnStateChange_Item(ReaProject proj, \"name\", MediaItem item)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "name", "type": "string" },
          { "identifier": "item", "type": "MediaItem" }
        ],
        "method_name": "reaper.Undo_OnStateChange_Item",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "descchange", "description": "" },
        { "identifier": "whichStates", "description": "" },
        { "identifier": "trackparm", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "Undo_OnStateChangeEx",
    "functioncall": {
      "lua": "reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)",
      "cpp": "void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)",
      "python": "RPR_Undo_OnStateChangeEx(String descchange, Int whichStates, Int trackparm)",
      "eel": "Undo_OnStateChangeEx(\"descchange\", int whichStates, int trackparm)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "descchange", "type": "string" },
          { "identifier": "whichStates", "type": "integer" },
          { "identifier": "trackparm", "type": "integer" }
        ],
        "method_name": "reaper.Undo_OnStateChangeEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "descchange", "description": "" },
        { "identifier": "whichStates", "description": "" },
        { "identifier": "trackparm", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "Undo_OnStateChangeEx2",
    "functioncall": {
      "lua": "reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)",
      "cpp": "void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)",
      "python": "RPR_Undo_OnStateChangeEx2(ReaProject proj, String descchange, Int whichStates, Int trackparm)",
      "eel": "Undo_OnStateChangeEx2(ReaProject proj, \"descchange\", int whichStates, int trackparm)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "descchange", "type": "string" },
          { "identifier": "whichStates", "type": "integer" },
          { "identifier": "trackparm", "type": "integer" }
        ],
        "method_name": "reaper.Undo_OnStateChangeEx2",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "update", "arrangeview"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Redraw the arrange view",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "UpdateArrange",
    "functioncall": {
      "lua": "reaper.UpdateArrange()",
      "cpp": "void UpdateArrange()",
      "python": "RPR_UpdateArrange()",
      "eel": "UpdateArrange()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.UpdateArrange", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "UpdateItemInProject",
    "functioncall": {
      "lua": "reaper.UpdateItemInProject(MediaItem item)",
      "cpp": "void UpdateItemInProject(MediaItem* item)",
      "python": "RPR_UpdateItemInProject(MediaItem item)",
      "eel": "UpdateItemInProject(MediaItem item)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.UpdateItemInProject",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "update", "timeline"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Redraw the arrange view and ruler",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "UpdateTimeline",
    "functioncall": {
      "lua": "reaper.UpdateTimeline()",
      "cpp": "void UpdateTimeline()",
      "python": "RPR_UpdateTimeline()",
      "eel": "UpdateTimeline()"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.UpdateTimeline", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [
      "helperfunctions",
      "validate",
      "objects",
      "project",
      "track",
      "item",
      "take",
      "envelope",
      "pcmsource"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject\\*, MediaTrack\\*, MediaItem\\*, MediaItem\\_Take\\*, TrackEnvelope\\* and PCM\\_source\\*.\n\nsee [ValidatePtr2](#ValidatePtr2)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "pointer",
          "description": "a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter."
        },
        {
          "identifier": "ctypename",
          "description": "the type of project to check for(given as a pointer)"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ValidatePtr",
    "functioncall": {
      "lua": "boolean = reaper.ValidatePtr(identifier pointer, string ctypename)",
      "cpp": "bool ValidatePtr(void* pointer, const char* ctypename)",
      "python": "Boolean RPR_ValidatePtr(void pointer, String ctypename)",
      "eel": "bool ValidatePtr(void* pointer, \"ctypename\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, the object/pointer is of ctypename; false, it is not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "pointer", "type": "identifier" },
          { "identifier": "ctypename", "type": "string" }
        ],
        "method_name": "reaper.ValidatePtr",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [
      "helperfunctions",
      "validate",
      "objects",
      "project",
      "track",
      "item",
      "take",
      "envelope",
      "pcmsource"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "pointer",
          "description": "a pointer to the object to check for. In Lua or Python, you just give the object to check as this parameter."
        },
        {
          "identifier": "ctypename",
          "description": "the type of project to check for(given as a pointer)"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "ValidatePtr2",
    "functioncall": {
      "lua": "boolean = reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)",
      "cpp": "bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)",
      "python": "Boolean RPR_ValidatePtr2(ReaProject proj, void pointer, String ctypename)",
      "eel": "bool ValidatePtr2(ReaProject proj, void* pointer, \"ctypename\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, the object/pointer is of ctypename; false, it is not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "pointer", "type": "identifier" },
          { "identifier": "ctypename", "type": "string" }
        ],
        "method_name": "reaper.ValidatePtr2",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Opens the prefs to a page, use pageByName if page is 0.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "page",
          "description": "the idx of the preferences-page. The following are valid:\n139, General \n474, Paths \n219, Keyboard/Multitouch \n212, Project \n178, Track/Send Defaults \n477, Media Item Defaults \n156, Audio \n118, Device \n153, MIDI Devices \n203, Buffering \n584, Mute/Solo \n136, Playback \n517, Seeking \n137, Recording \n518, Loop Recording \n478, Rendering \n213, Appearance \n236, Media(Appearance) \n459, Peaks/Waveforms \n524, Fades/Crossfades \n458, Track Control Panels \n172, Editing Behavior \n447, Envelope Display \n519, Automation \n215, Mouse \n466, Mouse Modifiers \n490, MIDI Editor \n138, Media \n257, MIDI \n449, Video/REX/Misc \n154, Plug-ins\n505, Compatibility \n210, VST \n209, ReWire/DX \n515, ReaScript \n227, ReaMote \n257, Control/OSC/web \n160, External Editors "
        },
        { "identifier": "pageByName", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ViewPrefs",
    "functioncall": {
      "lua": "reaper.ViewPrefs(integer page, string pageByName)",
      "cpp": "void ViewPrefs(int page, const char* pageByName)",
      "python": "RPR_ViewPrefs(Int page, String pageByName)",
      "eel": "ViewPrefs(int page, \"pageByName\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "page", "type": "integer" },
          { "identifier": "pageByName", "type": "string" }
        ],
        "method_name": "reaper.ViewPrefs",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.12" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\n\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "groupname", "description": "" },
        { "identifier": "setmask", "description": "" },
        { "identifier": "setvalue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackGroupMembershipHigh",
    "functioncall": {
      "lua": "integer groupstate = reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)",
      "cpp": "unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)",
      "python": "Int RPR_GetSetTrackGroupMembershipHigh(MediaTrack tr, String groupname, Int setmask, Int setvalue)",
      "eel": "uint GetSetTrackGroupMembershipHigh(MediaTrack tr, \"groupname\", uint setmask, uint setvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "groupstate", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "groupname", "type": "string" },
          { "identifier": "setmask", "type": "integer" },
          { "identifier": "setvalue", "type": "integer" }
        ],
        "method_name": "reaper.GetSetTrackGroupMembershipHigh",
        "return_values": [{ "identifier": "groupstate", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.975" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Gets/sets a send attribute string:\n    P_EXT:xyz : char * : extension-specific persistent data\n    \nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack tr", "description": "" },
        { "identifier": "integer category", "description": "" },
        { "identifier": "integer sendidx", "description": "" },
        { "identifier": "string parmname", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" },
        { "identifier": "boolean setNewValue", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackSendInfo_String",
    "functioncall": {
      "lua": "boolean retval, string stringNeedBig = reaper.GetSetTrackSendInfo_String(MediaTrack tr, integer category, integer sendidx, string parmname, string stringNeedBig, boolean setNewValue)",
      "cpp": "bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)",
      "python": "(Boolean retval, MediaTrack tr, Int category, Int sendidx, String parmname, String stringNeedBig, Boolean setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)",
      "eel": "bool GetSetTrackSendInfo_String(MediaTrack tr, int category, int sendidx, \"parmname\", #stringNeedBig, bool setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string stringNeedBig", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "stringNeedBig", "type": "string" },
          { "identifier": "setNewValue", "type": "boolean" }
        ],
        "method_name": "reaper.GetSetTrackSendInfo_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "stringNeedBig", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [
      "envelopemanagement",
      "br",
      "br_envelope",
      "create",
      "get",
      "envelope",
      "allocate",
      "sws"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Create a BR\\_Envelope-object from a track-envelope pointer or take-envelope pointer. \nTo apply changes to a BR\\_Envelope-object, always call [BR\\_EnvFree](#BR_EnvFree) to release the object and commit changes if needed.\nA BR_Envelope is not a TrackEnvelope-object and therefore can't be used as TrackEnvelope-object!\n            \nFor manipulation see [BR\\_EnvCountPoints](#BR_EnvCountPoints), [BR\\_EnvDeletePoint](#BR_EnvDeletePoint), [BR\\_EnvFind](#BR_EnvFind), [BR\\_EnvFindNext](#BR_EnvFindNext), [BR\\_EnvFindPrevious](#BR_EnvFindPrevious), [BR\\_EnvGetParentTake](#BR_EnvGetParentTake), [BR\\_EnvGetParentTrack](#BR_EnvGetParentTrack), [BR\\_EnvGetPoint](#BR_EnvGetPoint), [BR\\_EnvGetProperties](#BR_EnvGetProperties), [BR\\_EnvSetPoint](#BR_EnvSetPoint), [BR\\_EnvSetProperties](#BR_EnvSetProperties), [BR\\_EnvValueAtPos](#BR_EnvValueAtPos).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "a TrackEnvelope-object of the envelope, that you want to have as a BR_Envelope"
        },
        {
          "identifier": "takeEnvelopesUseProjectTime",
          "description": "false, take envelope points' positions are counted from take position, not project start time; true, work with project time instead"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvAlloc(SWS)",
    "functioncall": {
      "lua": "BR_Envelope = reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)",
      "cpp": "BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)",
      "python": "BR_Envelope BR_EnvAlloc(TrackEnvelope envelope, Boolean takeEnvelopesUseProjectTime)",
      "eel": "BR_Envelope extension_api(\"BR_EnvAlloc\", TrackEnvelope envelope, bool takeEnvelopesUseProjectTime)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "BR_Envelope",
          "description": "the requested Envelope as a BR_Envelope-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "TrackEnvelope" },
          { "identifier": "takeEnvelopesUseProjectTime", "type": "boolean" }
        ],
        "method_name": "reaper.BR_EnvAlloc",
        "return_values": [{ "type": "BR_Envelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "br", "br_envelope", "sws", "envelope", "count", "point"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Count envelope points in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object, whose points you want to count"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvCountPoints(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_EnvCountPoints(BR_Envelope envelope)",
      "cpp": "int BR_EnvCountPoints(BR_Envelope* envelope)",
      "python": "Int BR_EnvCountPoints(BR_Envelope envelope)",
      "eel": "int extension_api(\"BR_EnvCountPoints\", BR_Envelope envelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer",
          "description": "the number of envelope-points in the BR_Envelope-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "BR_Envelope" }],
        "method_name": "reaper.BR_EnvCountPoints",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "br", "br_envelope", "sws", "envelope", "delete", "point"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Delete envelope point by index (zero-based) in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object, where you want to delete an envelope-point"
        },
        {
          "identifier": "id",
          "description": "the envelope-point-idx, that you want to delete. 0, first envelope-point; 1, second envelope-point, etc"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvDeletePoint(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)",
      "cpp": "bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)",
      "python": "Boolean BR_EnvDeletePoint(BR_Envelope envelope, Int id)",
      "eel": "bool extension_api(\"BR_EnvDeletePoint\", BR_Envelope envelope, int id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, deleting was successful; false, deleting was unsuccessful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "id", "type": "integer" }
        ],
        "method_name": "reaper.BR_EnvDeletePoint",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [
      "envelopemanagement",
      "br",
      "br_envelope",
      "sws",
      "envelope",
      "find",
      "point",
      "delta"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Find envelope point at time position in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). Pass delta &gt; 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object, in which you want to find an envelope-point"
        },
        {
          "identifier": "position",
          "description": "the position in seconds, where you want to find from"
        },
        { "identifier": "delta", "description": "delta &gt; 0 to search surrounding range" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvFind(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)",
      "cpp": "int BR_EnvFind(BR_Envelope* envelope, double position, double delta)",
      "python": "Int BR_EnvFind(BR_Envelope envelope, Float position, Float delta)",
      "eel": "int extension_api(\"BR_EnvFind\", BR_Envelope envelope, position, delta)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "envelope-point-id or -1 on failure" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "position", "type": "number" },
          { "identifier": "delta", "type": "number" }
        ],
        "method_name": "reaper.BR_EnvFind",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "br", "br_envelope", "sws", "envelope", "find", "point", "next"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Find next envelope point after time position in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). Returns envelope point id (zero-based) on success or -1 on failure.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object, in which you want to find the next envelope-point"
        },
        {
          "identifier": "position",
          "description": "the position in seconds, where you want to find the next envelope-point from"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvFindNext(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_EnvFindNext(BR_Envelope envelope, number position)",
      "cpp": "int BR_EnvFindNext(BR_Envelope* envelope, double position)",
      "python": "Int BR_EnvFindNext(BR_Envelope envelope, Float position)",
      "eel": "int extension_api(\"BR_EnvFindNext\", BR_Envelope envelope, position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "envelope-point-id or -1 on failure" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "position", "type": "number" }
        ],
        "method_name": "reaper.BR_EnvFindNext",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [
      "envelopemanagement",
      "br",
      "br_envelope",
      "sws",
      "envelope",
      "find",
      "point",
      "previous"
    ],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Find previous envelope point before time position in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). Returns envelope point id (zero-based) on success or -1 on failure.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object, in which you want to find the previous envelope-point"
        },
        {
          "identifier": "position",
          "description": "the position in seconds, where you want to find the previous envelope-point from"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvFindPrevious(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)",
      "cpp": "int BR_EnvFindPrevious(BR_Envelope* envelope, double position)",
      "python": "Int BR_EnvFindPrevious(BR_Envelope envelope, Float position)",
      "eel": "int extension_api(\"BR_EnvFindPrevious\", BR_Envelope envelope, position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "envelope-point-id or -1 on failure" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "position", "type": "number" }
        ],
        "method_name": "reaper.BR_EnvFindPrevious",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": ["envelopemanagement", "br", "br_envelope", "sws", "envelope", "free"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Free envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc) and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "envelope",
          "description": "the BR_Envelope-object that you want to commit and be freed"
        },
        {
          "identifier": "commit",
          "description": "true, commit changes when freeing the BR\\_Envelope-object; false, don't commit changes when freeing the BR\\_Envelope-object"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvFree(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)",
      "cpp": "bool BR_EnvFree(BR_Envelope* envelope, bool commit)",
      "python": "Boolean BR_EnvFree(BR_Envelope envelope, Boolean commit)",
      "eel": "bool extension_api(\"BR_EnvFree\", BR_Envelope envelope, bool commit)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, committing was successful; false, committing was unsuccessful or no committing was necessary"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "commit", "type": "boolean" }
        ],
        "method_name": "reaper.BR_EnvFree",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] If envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc) is take envelope, returns parent media item take, otherwise NULL.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "envelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvGetParentTake(SWS)",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.BR_EnvGetParentTake(BR_Envelope envelope)",
      "cpp": "MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)",
      "python": "MediaItem_Take BR_EnvGetParentTake(BR_Envelope envelope)",
      "eel": "MediaItem_Take extension_api(\"BR_EnvGetParentTake\", BR_Envelope envelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "BR_Envelope" }],
        "method_name": "reaper.BR_EnvGetParentTake",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get parent track of envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). If take envelope, returns NULL.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "envelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvGetParentTrack(SWS)",
    "functioncall": {
      "lua": "MediaItem = reaper.BR_EnvGetParentTrack(BR_Envelope envelope)",
      "cpp": "MediaItem* BR_EnvGetParentTrack(BR_Envelope* envelope)",
      "python": "MediaItem BR_EnvGetParentTrack(BR_Envelope envelope)",
      "eel": "MediaItem extension_api(\"BR_EnvGetParentTrack\", BR_Envelope envelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "BR_Envelope" }],
        "method_name": "reaper.BR_EnvGetParentTrack",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get envelope point by id (zero-based) from the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). Returns true on success.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "id", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvGetPoint(SWS)",
    "functioncall": {
      "lua": "boolean retval, number position, number value, number shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)",
      "cpp": "bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)",
      "python": "(Boolean retval, BR_Envelope envelope, Int id, Float positionOut, Float valueOut, Int shapeOut, Boolean selectedOut, Float bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)",
      "eel": "bool extension_api(\"BR_EnvGetPoint\", BR_Envelope envelope, int id, &amp;position, &amp;value, int &amp;shape, bool &amp;selected, &amp;bezier)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "position", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "shape", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "bezier", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "id", "type": "integer" }
        ],
        "method_name": "reaper.BR_EnvGetPoint",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "position", "type": "number" },
          { "identifier": "value", "type": "number" },
          { "identifier": "shape", "type": "number" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "bezier", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get envelope properties for the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc).\n\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0-&gt;Linear, 1-&gt;Square, 2-&gt;Slow start/end, 3-&gt;Fast start, 4-&gt;Fast end, 5-&gt;Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0-&gt;Volume, 1-&gt;Volume (Pre-FX), 2-&gt;Pan, 3-&gt;Pan (Pre-FX), 4-&gt;Width, 5-&gt;Width (Pre-FX), 6-&gt;Mute, 7-&gt;Pitch, 8-&gt;Playrate, 9-&gt;Tempo map, 10-&gt;Parameter\nfaderScaling: true if envelope uses fader scaling\n\t\t\tautomationItemsOptions: -1-&gt;project default, &amp;1=0-&gt;don't attach to underl. env., &amp;1-&gt;attach to underl. env. on right side, &amp;2-&gt;attach to underl. env. on both sides, &amp;4: bypass underl. env.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "envelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvGetProperties(SWS)",
    "functioncall": {
      "lua": "boolean active, boolean visible, boolean armed, boolean inLane, number laneHeight, number defaultShape, number minValue, number maxValue, number centerValue, number type, boolean faderScaling, optional number automationItemsOptions = reaper.BR_EnvGetProperties(BR_Envelope envelope)",
      "cpp": "void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut, int* automationItemsOptionsOutOptional)",
      "python": "(BR_Envelope envelope, Boolean activeOut, Boolean visibleOut, Boolean armedOut, Boolean inLaneOut, Int laneHeightOut, Int defaultShapeOut, Float minValueOut, Float maxValueOut, Float centerValueOut, Int typeOut, Boolean faderScalingOut, Int automationItemsOptionsOutOptional) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut, automationItemsOptionsOutOptional)",
      "eel": "extension_api(\"BR_EnvGetProperties\", BR_Envelope envelope, bool &active, bool &visible, bool &armed, bool &inLane, int &laneHeight, int &defaultShape, &minValue, &maxValue, &centerValue, int &type, bool &faderScaling, optional int &automationItemsOptions)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "active retval", "description": "" },
        { "identifier": "visible", "description": "" },
        { "identifier": "armed", "description": "" },
        { "identifier": "inLane", "description": "" },
        { "identifier": "laneHeight", "description": "" },
        { "identifier": "defaultShape", "description": "" },
        { "identifier": "minValue", "description": "" },
        { "identifier": "maxValue", "description": "" },
        { "identifier": "centerValue", "description": "" },
        { "identifier": "type", "description": "" },
        { "identifier": "faderScaling", "description": "" }
      ],
      "param_count": 11,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "BR_Envelope" }],
        "method_name": "reaper.BR_EnvGetProperties",
        "return_values": [
          { "identifier": "active", "type": "boolean" },
          { "identifier": "visible", "type": "boolean" },
          { "identifier": "armed", "type": "boolean" },
          { "identifier": "inLane", "type": "boolean" },
          { "identifier": "laneHeight", "type": "number" },
          { "identifier": "defaultShape", "type": "number" },
          { "identifier": "minValue", "type": "number" },
          { "identifier": "maxValue", "type": "number" },
          { "identifier": "centerValue", "type": "number" },
          { "identifier": "type", "type": "number" },
          { "identifier": "faderScaling", "type": "boolean" },
          { "identifier": "number", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Set envelope point by id (zero-based) in the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see [BR\\_EnvSortPoints](#BR_EnvSortPoints).\nReturns true on success.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "id", "description": "" },
        { "identifier": "position", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "shape", "description": "" },
        { "identifier": "selected", "description": "" },
        { "identifier": "bezier", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvSetPoint(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)",
      "cpp": "bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)",
      "python": "Boolean BR_EnvSetPoint(BR_Envelope envelope, Int id, Float position, Float value, Int shape, Boolean selected, Float bezier)",
      "eel": "bool extension_api(\"BR_EnvSetPoint\", BR_Envelope envelope, int id, position, value, int shape, bool selected, bezier)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "id", "type": "integer" },
          { "identifier": "position", "type": "number" },
          { "identifier": "value", "type": "number" },
          { "identifier": "shape", "type": "integer" },
          { "identifier": "selected", "type": "boolean" },
          { "identifier": "bezier", "type": "number" }
        ],
        "method_name": "reaper.BR_EnvSetPoint",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.979" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Set envelope properties for the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc). For parameter description see [BR\\_EnvGetProperties](#BR_EnvGetProperties).\n\t\t\tSetting automationItemsOptions requires REAPER 5.979+.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "active", "description": "" },
        { "identifier": "visible", "description": "" },
        { "identifier": "armed", "description": "" },
        { "identifier": "inLane", "description": "" },
        { "identifier": "laneHeight", "description": "" },
        { "identifier": "defaultShape", "description": "" },
        { "identifier": "faderScaling", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvSetProperties(SWS)",
    "functioncall": {
      "lua": " reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling, optional number automationItemsOptionsIn)",
      "cpp": "void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, int* automationItemsOptionsInOptional)",
      "python": "(BR_Envelope envelope, Boolean active, Boolean visible, Boolean armed, Boolean inLane, Int laneHeight, Int defaultShape, Boolean faderScaling, Int automationItemsOptionsInOptional) = BR_EnvSetProperties(envelope, active, visible, armed, inLane, laneHeight, defaultShape, faderScaling, automationItemsOptionsInOptional)",
      "eel": "extension_api(\"BR_EnvSetProperties\", BR_Envelope envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, optional int automationItemsOptionsIn)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "active", "type": "boolean" },
          { "identifier": "visible", "type": "boolean" },
          { "identifier": "armed", "type": "boolean" },
          { "identifier": "inLane", "type": "boolean" },
          { "identifier": "laneHeight", "type": "integer" },
          { "identifier": "defaultShape", "type": "integer" },
          { "identifier": "faderScaling", "type": "boolean" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.BR_EnvSetProperties",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with [BR\\_EnvSetPoint](#BR_EnvSetPoint). Note that you do not have to call this before doing [BR\\_EnvFree](#BR_EnvFree) since it does handle unsorted points too.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "envelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvSortPoints(SWS)",
    "functioncall": {
      "lua": "reaper.BR_EnvSortPoints(BR_Envelope envelope)",
      "cpp": "void BR_EnvSortPoints(BR_Envelope* envelope)",
      "python": "BR_EnvSortPoints(BR_Envelope envelope)",
      "eel": "extension_api(\"BR_EnvSortPoints\", BR_Envelope envelope)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "envelope", "type": "BR_Envelope" }],
        "method_name": "reaper.BR_EnvSortPoints",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Envelope Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get envelope value at time position for the envelope object allocated with [BR\\_EnvAlloc](#BR_EnvAlloc).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "envelope", "description": "" },
        { "identifier": "position", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_EnvValueAtPos(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)",
      "cpp": "double BR_EnvValueAtPos(BR_Envelope* envelope, double position)",
      "python": "Float BR_EnvValueAtPos(BR_Envelope envelope, Float position)",
      "eel": "double extension_api(\"BR_EnvValueAtPos\", BR_Envelope envelope, position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "envelope", "type": "BR_Envelope" },
          { "identifier": "position", "type": "number" }
        ],
        "method_name": "reaper.BR_EnvValueAtPos",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "get", "start", "end", "seconds", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Deprecated, see [GetSet\\_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see [BR\\_SetArrangeView](#BR_SetArrangeView).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "BR_GetArrangeView(SWS)",
    "functioncall": {
      "lua": "number startTime retval, number endTime = reaper.BR_GetArrangeView(ReaProject proj)",
      "cpp": "void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)",
      "python": "(ReaProject proj, Float startTimeOut, Float endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)",
      "eel": "extension_api(\"BR_GetArrangeView\", ReaProject proj, &amp;startTime, &amp;endTime)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "startTime retval",
          "description": "the current starttime in the arrangeview in seconds"
        },
        {
          "identifier": "endTime",
          "description": "the current endtime in the arrangeview in seconds"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "proj", "type": "ReaProject" }],
        "method_name": "reaper.BR_GetArrangeView",
        "return_values": [
          { "identifier": "startTime", "type": "number" },
          { "identifier": "endTime", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get closest grid division to position. Note that this functions is different from [SnapToGrid](#SnapToGrid) in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see [BR\\_GetNextGridDivision](#BR_GetNextGridDivision) and [BR\\_GetPrevGridDivision](#BR_GetPrevGridDivision).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "position", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetClosestGridDivision(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetClosestGridDivision(number position)",
      "cpp": "double BR_GetClosestGridDivision(double position)",
      "python": "Float BR_GetClosestGridDivision(Float position)",
      "eel": "double extension_api(\"BR_GetClosestGridDivision\", position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "position", "type": "number" }],
        "method_name": "reaper.BR_GetClosestGridDivision",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetCurrentTheme(SWS)",
    "functioncall": {
      "lua": "string themePath retval, string themeName = reaper.BR_GetCurrentTheme()",
      "cpp": "void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)",
      "python": "(String themePathOut, Int themePathOut_sz, String themeNameOut, Int themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)",
      "eel": "extension_api(\"BR_GetCurrentTheme\", #themePath, #themeName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "themePath retval", "description": "" },
        { "identifier": "themeName", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetCurrentTheme",
        "return_values": [
          { "identifier": "themePath", "type": "string" },
          { "identifier": "themeName", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "guid", "project"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see [BR\\_GetMediaItemGUID](#BR_GetMediaItemGUID).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "guidStringIn",
          "description": "the guid of the MediaItem you want to request."
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "BR_GetMediaItemByGUID(SWS)",
    "functioncall": {
      "lua": "MediaItem = reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)",
      "cpp": "MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)",
      "python": "MediaItem BR_GetMediaItemByGUID(ReaProject proj, String guidStringIn)",
      "eel": "MediaItem extension_api(\"BR_GetMediaItemByGUID\", ReaProject proj, \"guidStringIn\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem",
          "description": "the requested MediaItem as a MediaItem-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "guidStringIn", "type": "string" }
        ],
        "method_name": "reaper.BR_GetMediaItemByGUID",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "get", "guid", "item"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see [BR\\_GetMediaItemByGUID](#BR_GetMediaItemByGUID).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "the MediaItem, whose guid you want to request" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaItemGUID(SWS)",
    "functioncall": {
      "lua": "string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)",
      "cpp": "void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)",
      "python": "(MediaItem item, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)",
      "eel": "extension_api(\"BR_GetMediaItemGUID\", MediaItem item, #guidString)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "guidString", "description": "the requested guid of the MediaItem" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.BR_GetMediaItemGUID",
        "return_values": [{ "identifier": "guidString", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see [BR\\_SetMediaItemImageResource](#BR_SetMediaItemImageResource).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaItemImageResource(SWS)",
    "functioncall": {
      "lua": "boolean retval, string image, number imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)",
      "cpp": "bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)",
      "python": "(Boolean retval, MediaItem item, String imageOut, Int imageOut_sz, Int imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)",
      "eel": "bool extension_api(\"BR_GetMediaItemImageResource\", MediaItem item, #image, int &amp;imageFlags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "image", "description": "" },
        { "identifier": "imageFlags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.BR_GetMediaItemImageResource",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "image", "type": "string" },
          { "identifier": "imageFlags", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see [SNM\\_GetMediaItemTakeByGUID](#SNM_GetMediaItemTakeByGUID).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaItemTakeGUID(SWS)",
    "functioncall": {
      "lua": "string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)",
      "cpp": "void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)",
      "python": "(MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)",
      "eel": "extension_api(\"BR_GetMediaItemTakeGUID\", MediaItem_Take take, #guidString)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "guidString", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetMediaItemTakeGUID",
        "return_values": [{ "identifier": "guidString", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see [BR\\_SetMediaSourceProperties](#BR_SetMediaSourceProperties).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaSourceProperties(SWS)",
    "functioncall": {
      "lua": "boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)",
      "cpp": "bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean sectionOut, Float startOut, Float lengthOut, Float fadeOut, Boolean reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)",
      "eel": "bool extension_api(\"BR_GetMediaSourceProperties\", MediaItem_Take take, bool &amp;section, &amp;start, &amp;length, &amp;fade, bool &amp;reverse)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "section", "description": "" },
        { "identifier": "start", "description": "" },
        { "identifier": "length", "description": "" },
        { "identifier": "fade", "description": "" },
        { "identifier": "reverse", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetMediaSourceProperties",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "section", "type": "boolean" },
          { "identifier": "start", "type": "number" },
          { "identifier": "length", "type": "number" },
          { "identifier": "fade", "type": "number" },
          { "identifier": "reverse", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": ["trackmanagement", "get", "guid", "track"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see [BR\\_GetMediaTrackGUID](#BR_GetMediaTrackGUID).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "guidStringIn", "description": "the guid of the track you want to request" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "BR_GetMediaTrackByGUID(SWS)",
    "functioncall": {
      "lua": "MediaTrack = reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)",
      "cpp": "MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)",
      "python": "MediaTrack BR_GetMediaTrackByGUID(ReaProject proj, String guidStringIn)",
      "eel": "MediaTrack extension_api(\"BR_GetMediaTrackByGUID\", ReaProject proj, \"guidStringIn\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack",
          "description": "the MediaTrack requested, as MediaTrack-object"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "guidStringIn", "type": "string" }
        ],
        "method_name": "reaper.BR_GetMediaTrackByGUID",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaTrackFreezeCount(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)",
      "cpp": "int BR_GetMediaTrackFreezeCount(MediaTrack* track)",
      "python": "Int BR_GetMediaTrackFreezeCount(MediaTrack track)",
      "eel": "int extension_api(\"BR_GetMediaTrackFreezeCount\", MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.BR_GetMediaTrackFreezeCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see [BR\\_GetMediaTrackByGUID](#BR_GetMediaTrackByGUID).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaTrackGUID(SWS)",
    "functioncall": {
      "lua": "string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)",
      "cpp": "void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)",
      "python": "(MediaTrack track, String guidStringOut, Int guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)",
      "eel": "extension_api(\"BR_GetMediaTrackGUID\", MediaTrack track, #guidString)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "guidString", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.BR_GetMediaTrackGUID",
        "return_values": [{ "identifier": "guidString", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see [BR\\_SetMediaTrackLayouts](#BR_SetMediaTrackLayouts).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaTrackLayouts(SWS)",
    "functioncall": {
      "lua": "string mcpLayoutName retval, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)",
      "cpp": "void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)",
      "python": "(MediaTrack track, String mcpLayoutNameOut, Int mcpLayoutNameOut_sz, String tcpLayoutNameOut, Int tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)",
      "eel": "extension_api(\"BR_GetMediaTrackLayouts\", MediaTrack track, #mcpLayoutName, #tcpLayoutName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mcpLayoutName retval", "description": "" },
        { "identifier": "tcpLayoutName", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "track", "type": "MediaTrack" }],
        "method_name": "reaper.BR_GetMediaTrackLayouts",
        "return_values": [
          { "identifier": "mcpLayoutName", "type": "string" },
          { "identifier": "tcpLayoutName", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get track envelope for send/receive/hardware output.\n\ncategory is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs\nsendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\n\nNote: To get or set other send attributes, see [BR\\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\\_GetMediaTrackSendInfo\\_Track](#BR_GetMediaTrackSendInfo_Track).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "category", "description": "" },
        { "identifier": "sendidx", "description": "" },
        { "identifier": "envelopeType", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaTrackSendInfo_Envelope(SWS)",
    "functioncall": {
      "lua": "TrackEnvelope = reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)",
      "cpp": "TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)",
      "python": "TrackEnvelope BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, Int category, Int sendidx, Int envelopeType)",
      "eel": "TrackEnvelope extension_api(\"BR_GetMediaTrackSendInfo_Envelope\", MediaTrack track, int category, int sendidx, int envelopeType)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "TrackEnvelope", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "envelopeType", "type": "integer" }
        ],
        "method_name": "reaper.BR_GetMediaTrackSendInfo_Envelope",
        "return_values": [{ "type": "TrackEnvelope" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get source or destination media track for send/receive.\n\ncategory is &lt;0 for receives, 0=sends\nsendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\n\nNote: To get or set other send attributes, see [BR\\_GetSetTrackSendInfo](#BR_GetSetTrackSendInfo) and [BR\\_GetMediaTrackSendInfo_Envelope](#BR_GetMediaTrackSendInfo_Envelope).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "category", "description": "" },
        { "identifier": "sendidx", "description": "" },
        { "identifier": "trackType", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMediaTrackSendInfo_Track(SWS)",
    "functioncall": {
      "lua": "MediaTrack = reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)",
      "cpp": "MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)",
      "python": "MediaTrack BR_GetMediaTrackSendInfo_Track(MediaTrack track, Int category, Int sendidx, Int trackType)",
      "eel": "MediaTrack extension_api(\"BR_GetMediaTrackSendInfo_Track\", MediaTrack track, int category, int sendidx, int trackType)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "trackType", "type": "integer" }
        ],
        "method_name": "reaper.BR_GetMediaTrackSendInfo_Track",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMidiSourceLenPPQ(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)",
      "cpp": "double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)",
      "python": "Float BR_GetMidiSourceLenPPQ(MediaItem_Take take)",
      "eel": "double extension_api(\"BR_GetMidiSourceLenPPQ\", MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetMidiSourceLenPPQ",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMidiTakePoolGUID(SWS)",
    "functioncall": {
      "lua": "boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)",
      "cpp": "bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)",
      "python": "(Boolean retval, MediaItem_Take take, String guidStringOut, Int guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)",
      "eel": "bool extension_api(\"BR_GetMidiTakePoolGUID\", MediaItem_Take take, #guidString)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "guidString", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetMidiTakePoolGUID",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "guidString", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetMidiTakeTempoInfo(SWS)",
    "functioncall": {
      "lua": "boolean retval, boolean ignoreProjTempo, number bpm, number num, number den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)",
      "cpp": "bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean ignoreProjTempoOut, Float bpmOut, Int numOut, Int denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)",
      "eel": "bool extension_api(\"BR_GetMidiTakeTempoInfo\", MediaItem_Take take, bool &amp;ignoreProjTempo, &amp;bpm, int &amp;num, int &amp;den)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "ignoreProjTempo", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "num", "description": "" },
        { "identifier": "den", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetMidiTakeTempoInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "ignoreProjTempo", "type": "boolean" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "num", "type": "number" },
          { "identifier": "den", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "get", "mouse", "cursor", "context"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\n\nTo get more info on stuff that was found under mouse cursor see [BR\\_GetMouseCursorContext\\_Envelope](#BR_GetMouseCursorContext_Envelope), [BR\\_GetMouseCursorContext\\_Item](#BR_GetMouseCursorContext_Item), [BR\\_GetMouseCursorContext\\_MIDI](#BR_GetMouseCursorContext_MIDI), [BR\\_GetMouseCursorContext\\_Position](#BR_GetMouseCursorContext_Position), [BR\\_GetMouseCursorContext\\_Take](#BR_GetMouseCursorContext_Take), [BR\\_GetMouseCursorContext\\_Track](#BR_GetMouseCursorContext_Track)\n<table border='2'>\n<tr><th style='width:100px'>Window</th><th style='width:100px'>Segment</th><th style='width:300px'>Details</th></tr>\n<tr><th rowspan='1' align = 'center'>unknown</th><td>\"\"</td><td>\"\"</td></tr>\n<tr><th rowspan='4' align = 'center'>ruler</th><td>region\\_lane </td><td>\"\"</td></tr>\n<tr><td>marker\\_lane </td><td>\"\"</td></tr>\n<tr><td>tempo\\_lane </td><td>\"\"</td></tr>\n<tr><td>timeline</td><td>\"\"</td></tr>\n<tr><th rowspan='1' align = 'center'>transport</th><td>\"\"</td><td>\"\"</td></tr>\n<tr><th rowspan='3' align = 'center'>tcp </th><td>track</td><td>\"\"</td></tr>\n<tr><td>envelope</td><td>\"\"</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='2' align = 'center'>mcp </th><td>track</td><td>\"\"</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='3' align = 'center'>arrange</th><td>track</td><td>empty,item, item\\_stretch\\_marker,env\\_point, env\\_segment </td></tr>\n<tr><td>envelope</td><td>empty, env\\_point, env\\_segment</td></tr>\n<tr><td>empty</td><td>\"\"</td></tr>\n<tr><th rowspan='5' align = 'center'>midi\\_editor </th><td>unknown</td><td>\"\"</td></tr>\n<tr><td>ruler</td><td>\"\"</td></tr>\n<tr><td>piano</td><td>\"\"</td></tr>\n<tr><td>notes</td><td>\"\"</td></tr>\n<tr><td>cc\\_lane</td><td>cc\\_selector, cc\\_lane</td></tr>\n</table>",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext(SWS)",
    "functioncall": {
      "lua": "string window retval, string segment, string details = reaper.BR_GetMouseCursorContext()",
      "cpp": "void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)",
      "python": "(String windowOut, Int windowOut_sz, String segmentOut, Int segmentOut_sz, String detailsOut, Int detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)",
      "eel": "extension_api(\"BR_GetMouseCursorContext\", #window, #segment, #details)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "window retval",
          "description": "the window, in which the mouse-cursor was, at time of calling BR_GetMouseCursorContext"
        },
        { "identifier": "segment", "description": "the segment within the window                " },
        { "identifier": "details", "description": "details with the segment of the window" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext",
        "return_values": [
          { "identifier": "window", "type": "string" },
          { "identifier": "segment", "type": "string" },
          { "identifier": "details", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns envelope that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext). In case the envelope belongs to take, takeEnvelope will be true.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_Envelope(SWS)",
    "functioncall": {
      "lua": "TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()",
      "cpp": "TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)",
      "python": "(TrackEnvelope retval, Boolean takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)",
      "eel": "TrackEnvelope extension_api(\"BR_GetMouseCursorContext_Envelope\", bool &amp;takeEnvelope)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "takeEnvelope", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_Envelope",
        "return_values": [
          { "identifier": "retval", "type": "TrackEnvelope" },
          { "identifier": "takeEnvelope", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns item under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext). Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_Item(SWS)",
    "functioncall": {
      "lua": "MediaItem = reaper.BR_GetMouseCursorContext_Item()",
      "cpp": "MediaItem* BR_GetMouseCursorContext_Item()",
      "python": "MediaItem BR_GetMouseCursorContext_Item()",
      "eel": "MediaItem extension_api(\"BR_GetMouseCursorContext_Item\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_Item",
        "return_values": [{ "type": "MediaItem" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns midi editor under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).\n\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\n\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_MIDI(SWS)",
    "functioncall": {
      "lua": "identifier retval, boolean inlineEditor, number noteRow, number ccLane, number ccLaneVal, number ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()",
      "cpp": "void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)",
      "python": "(void retval, Boolean inlineEditorOut, Int noteRowOut, Int ccLaneOut, Int ccLaneValOut, Int ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)",
      "eel": "void* extension_api(\"BR_GetMouseCursorContext_MIDI\", bool &amp;inlineEditor, int &amp;noteRow, int &amp;ccLane, int &amp;ccLaneVal, int &amp;ccLaneId)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "inlineEditor", "description": "" },
        { "identifier": "noteRow", "description": "" },
        { "identifier": "ccLane", "description": "" },
        { "identifier": "ccLaneVal", "description": "" },
        { "identifier": "ccLaneId", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_MIDI",
        "return_values": [
          { "identifier": "retval", "type": "identifier" },
          { "identifier": "inlineEditor", "type": "boolean" },
          { "identifier": "noteRow", "type": "number" },
          { "identifier": "ccLane", "type": "number" },
          { "identifier": "ccLaneVal", "type": "number" },
          { "identifier": "ccLaneId", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns project time position in arrange/ruler/midi editor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_Position(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetMouseCursorContext_Position()",
      "cpp": "double BR_GetMouseCursorContext_Position()",
      "python": "Float BR_GetMouseCursorContext_Position()",
      "eel": "double extension_api(\"BR_GetMouseCursorContext_Position\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_Position",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns id of a stretch marker under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_StretchMarker(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_GetMouseCursorContext_StretchMarker()",
      "cpp": "int BR_GetMouseCursorContext_StretchMarker()",
      "python": "Int BR_GetMouseCursorContext_StretchMarker()",
      "eel": "int extension_api(\"BR_GetMouseCursorContext_StretchMarker\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_StretchMarker",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns take under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_Take(SWS)",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.BR_GetMouseCursorContext_Take()",
      "cpp": "MediaItem_Take* BR_GetMouseCursorContext_Take()",
      "python": "MediaItem_Take BR_GetMouseCursorContext_Take()",
      "eel": "MediaItem_Take extension_api(\"BR_GetMouseCursorContext_Take\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_Take",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Returns track under mouse cursor that was captured with the last call to [BR\\_GetMouseCursorContext](#BR_GetMouseCursorContext).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_GetMouseCursorContext_Track(SWS)",
    "functioncall": {
      "lua": "MediaTrack = reaper.BR_GetMouseCursorContext_Track()",
      "cpp": "MediaTrack* BR_GetMouseCursorContext_Track()",
      "python": "MediaTrack BR_GetMouseCursorContext_Track()",
      "eel": "MediaTrack extension_api(\"BR_GetMouseCursorContext_Track\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_GetMouseCursorContext_Track",
        "return_values": [{ "type": "MediaTrack" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get next grid division after the time position. For more grid divisions function, see [BR\\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\\_GetPrevGridDivision](#BR_GetPrevGridDivision).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "position", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetNextGridDivision(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetNextGridDivision(number position)",
      "cpp": "double BR_GetNextGridDivision(double position)",
      "python": "Float BR_GetNextGridDivision(Float position)",
      "eel": "double extension_api(\"BR_GetNextGridDivision\", position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "position", "type": "number" }],
        "method_name": "reaper.BR_GetNextGridDivision",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Project Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get previous grid division before the time position. For more grid division functions, see [BR\\_GetClosestGridDivision](#BR_GetClosestGridDivision) and [BR\\_GetNextGridDivision](#BR_GetNextGridDivision).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "position", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetPrevGridDivision(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetPrevGridDivision(number position)",
      "cpp": "double BR_GetPrevGridDivision(double position)",
      "python": "Float BR_GetPrevGridDivision(Float position)",
      "eel": "double extension_api(\"BR_GetPrevGridDivision\", position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "position", "type": "number" }],
        "method_name": "reaper.BR_GetPrevGridDivision",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Get or set send attributes.\n\ncategory is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs\nsendidx is zero-based (see [GetTrackNumSends](#GetTrackNumSends) to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\n\nList of possible parameters:\n\n    B\\_MUTE : send mute state (1.0 if muted, otherwise 0.0)\n    B\\_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\n    B\\_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\n    D\\_VOL : send volume (1.0=+0dB etc...)\n    D\\_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\n    D\\_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\n    I\\_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\n    I\\_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&amp;1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\n    I\\_DSTCHAN : audio destination starting channel index (&amp;1024=mono (and in case of hardware output &amp;512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\n    I\\_MIDI\\_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\n    I\\_MIDI\\_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\n    I\\_MIDI\\_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n    I\\_MIDI\\_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\n    I\\_MIDI\\_LINK\\_VOLPAN : link volume/pan controls to MIDI\n\nNote: To get or set other send attributes, see [BR\\_GetMediaTrackSendInfo\\_Envelope](#BR_GetMediaTrackSendInfo_Envelope) and [BR\\_GetMediaTrackSendInfo\\_Track](#BR_GetMediaTrackSendInfo_Track).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "category", "description": "" },
        { "identifier": "sendidx", "description": "" },
        { "identifier": "parmname", "description": "" },
        { "identifier": "setNewValue", "description": "" },
        { "identifier": "newValue", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "BR_GetSetTrackSendInfo(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)",
      "cpp": "double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)",
      "python": "Float BR_GetSetTrackSendInfo(MediaTrack track, Int category, Int sendidx, String parmname, Boolean setNewValue, Float newValue)",
      "eel": "double extension_api(\"BR_GetSetTrackSendInfo\", MediaTrack track, int category, int sendidx, \"parmname\", bool setNewValue, newValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "category", "type": "integer" },
          { "identifier": "sendidx", "type": "integer" },
          { "identifier": "parmname", "type": "string" },
          { "identifier": "setNewValue", "type": "boolean" },
          { "identifier": "newValue", "type": "number" }
        ],
        "method_name": "reaper.BR_GetSetTrackSendInfo",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Returns FX count for supplied take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_GetTakeFXCount(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_GetTakeFXCount(MediaItem_Take take)",
      "cpp": "int BR_GetTakeFXCount(MediaItem_Take* take)",
      "python": "Int BR_GetTakeFXCount(MediaItem_Take take)",
      "eel": "int extension_api(\"BR_GetTakeFXCount\", MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_GetTakeFXCount",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[SWS] Check if take has MIDI inline editor open and returns true or false.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_IsMidiOpenInInlineEditor(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)",
      "cpp": "bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)",
      "python": "Boolean BR_IsMidiOpenInInlineEditor(MediaItem_Take take)",
      "eel": "bool extension_api(\"BR_IsMidiOpenInInlineEditor\", MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_IsMidiOpenInInlineEditor",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_IsTakeMidi(SWS)",
    "functioncall": {
      "lua": "boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)",
      "cpp": "bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)",
      "eel": "bool extension_api(\"BR_IsTakeMidi\", MediaItem_Take take, bool &amp;inProjectMidi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "inProjectMidi", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.BR_IsTakeMidi",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "inProjectMidi", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_ItemAtMouseCursor(SWS)",
    "functioncall": {
      "lua": "MediaItem retval, number position = reaper.BR_ItemAtMouseCursor()",
      "cpp": "MediaItem* BR_ItemAtMouseCursor(double* positionOut)",
      "python": "(MediaItem retval, Float positionOut) = BR_ItemAtMouseCursor(positionOut)",
      "eel": "MediaItem extension_api(\"BR_ItemAtMouseCursor\", &amp;position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "position", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_ItemAtMouseCursor",
        "return_values": [
          { "identifier": "retval", "type": "MediaItem" },
          { "identifier": "position", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midiEditor", "description": "" },
        { "identifier": "laneId", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_MIDI_CCLaneRemove(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_MIDI_CCLaneRemove(identifier midiEditor, integer laneId)",
      "cpp": "bool BR_MIDI_CCLaneRemove(vpid* midiEditor, int laneId)",
      "python": "Boolean BR_MIDI_CCLaneRemove(void midiEditor, Int laneId)",
      "eel": "bool extension_api(\"BR_MIDI_CCLaneRemove\", void* midiEditor, int laneId)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midiEditor", "type": "identifier" },
          { "identifier": "laneId", "type": "integer" }
        ],
        "method_name": "reaper.BR_MIDI_CCLaneRemove",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midiEditor", "description": "" },
        { "identifier": "laneId", "description": "" },
        { "identifier": "newCC", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_MIDI_CCLaneReplace(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_MIDI_CCLaneReplace(identifier midiEditor, integer laneId, integer newCC)",
      "cpp": "bool BR_MIDI_CCLaneReplace(void* midiEditor, int laneId, int newCC)",
      "python": "Boolean BR_MIDI_CCLaneReplace(void midiEditor, Int laneId, Int newCC)",
      "eel": "bool extension_api(\"BR_MIDI_CCLaneReplace\", void* midiEditor, int laneId, int newCC)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midiEditor", "type": "identifier" },
          { "identifier": "laneId", "type": "integer" },
          { "identifier": "newCC", "type": "integer" }
        ],
        "method_name": "reaper.BR_MIDI_CCLaneReplace",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "checkRuler", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_PositionAtMouseCursor(SWS)",
    "functioncall": {
      "lua": "number = reaper.BR_PositionAtMouseCursor(boolean checkRuler)",
      "cpp": "double BR_PositionAtMouseCursor(bool checkRuler)",
      "python": "Float BR_PositionAtMouseCursor(Boolean checkRuler)",
      "eel": "double extension_api(\"BR_PositionAtMouseCursor\", bool checkRuler)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "checkRuler", "type": "boolean" }],
        "method_name": "reaper.BR_PositionAtMouseCursor",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Arrangeview Management"],
    "tags": ["arrangeviewmanagement", "set", "starttime", "endtime", "arrangeview", "seconds"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Deprecated, see [GetSet\\_ArrangeView2](#GetSet_ArrangeView2) (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see [BR\\_GetArrangeView](#BR_GetArrangeView).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "startTime",
          "description": "the new starttime of the arrangewview in seconds"
        },
        { "identifier": "endTime", "description": "the new endtime of the arrangewview in seconds" }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "BR_SetArrangeView(SWS)",
    "functioncall": {
      "lua": "reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)",
      "cpp": "void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)",
      "python": "BR_SetArrangeView(ReaProject proj, Float startTime, Float endTime)",
      "eel": "extension_api(\"BR_SetArrangeView\", ReaProject proj, startTime, endTime)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "startTime", "type": "number" },
          { "identifier": "endTime", "type": "number" }
        ],
        "method_name": "reaper.BR_SetArrangeView",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Set item start and end edges' position - returns true in case of any changes",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "startTime", "description": "" },
        { "identifier": "endTime", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_SetItemEdges(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)",
      "cpp": "bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)",
      "python": "Boolean BR_SetItemEdges(MediaItem item, Float startTime, Float endTime)",
      "eel": "bool extension_api(\"BR_SetItemEdges\", MediaItem item, startTime, endTime)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "startTime", "type": "number" },
          { "identifier": "endTime", "type": "number" }
        ],
        "method_name": "reaper.BR_SetItemEdges",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.974" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as \"\".\n\t\t\timageFlags: &amp;1=0: don't display image, &amp;1: center / tile, &amp;3: stretch, &amp;5: full height (REAPER 5.974+).\n\t\t\tTo get image resource, see [BR\\_GetMediaItemImageResource](#BR_GetMediaItemImageResource).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "imageIn", "description": "" },
        { "identifier": "imageFlags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_SetMediaItemImageResource(SWS)",
    "functioncall": {
      "lua": "reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)",
      "cpp": "void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)",
      "python": "BR_SetMediaItemImageResource(MediaItem item, String imageIn, Int imageFlags)",
      "eel": "extension_api(\"BR_SetMediaItemImageResource\", MediaItem item, \"imageIn\", int imageFlags)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "imageIn", "type": "string" },
          { "identifier": "imageFlags", "type": "integer" }
        ],
        "method_name": "reaper.BR_SetMediaItemImageResource",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see [BR\\_GetMediaSourceProperties](#BR_GetMediaSourceProperties).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "section", "description": "" },
        { "identifier": "start", "description": "" },
        { "identifier": "length", "description": "" },
        { "identifier": "fade", "description": "" },
        { "identifier": "reverse", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "BR_SetMediaSourceProperties(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)",
      "cpp": "bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)",
      "python": "Boolean BR_SetMediaSourceProperties(MediaItem_Take take, Boolean section, Float start, Float length, Float fade, Boolean reverse)",
      "eel": "bool extension_api(\"BR_SetMediaSourceProperties\", MediaItem_Take take, bool section, start, length, fade, bool reverse)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "section", "type": "boolean" },
          { "identifier": "start", "type": "number" },
          { "identifier": "length", "type": "number" },
          { "identifier": "fade", "type": "number" },
          { "identifier": "reverse", "type": "boolean" }
        ],
        "method_name": "reaper.BR_SetMediaSourceProperties",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Deprecated, see [GetSetMediaTrackInfo](#GetSetMediaTrackInfo) (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see [BR\\_GetMediaTrackLayouts](#BR_GetMediaTrackLayouts).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "mcpLayoutNameIn", "description": "" },
        { "identifier": "tcpLayoutNameIn", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_SetMediaTrackLayouts(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)",
      "cpp": "bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)",
      "python": "Boolean BR_SetMediaTrackLayouts(MediaTrack track, String mcpLayoutNameIn, String tcpLayoutNameIn)",
      "eel": "bool extension_api(\"BR_SetMediaTrackLayouts\", MediaTrack track, \"mcpLayoutNameIn\", \"tcpLayoutNameIn\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "mcpLayoutNameIn", "type": "string" },
          { "identifier": "tcpLayoutNameIn", "type": "string" }
        ],
        "method_name": "reaper.BR_SetMediaTrackLayouts",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "ignoreProjTempo", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "num", "description": "" },
        { "identifier": "den", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "BR_SetMidiTakeTempoInfo(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)",
      "cpp": "bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)",
      "python": "Boolean BR_SetMidiTakeTempoInfo(MediaItem_Take take, Boolean ignoreProjTempo, Float bpm, Int num, Int den)",
      "eel": "bool extension_api(\"BR_SetMidiTakeTempoInfo\", MediaItem_Take take, bool ignoreProjTempo, bpm, int num, int den)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "ignoreProjTempo", "type": "boolean" },
          { "identifier": "bpm", "type": "number" },
          { "identifier": "num", "type": "integer" },
          { "identifier": "den", "type": "integer" }
        ],
        "method_name": "reaper.BR_SetMidiTakeTempoInfo",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see [BR\\_SetTakeSourceFromFile2](#BR_SetTakeSourceFromFile2).\nNote: To set source from existing take, see [SNM\\_GetSetSourceState2](#SNM_GetSetSourceState2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "filenameIn", "description": "" },
        { "identifier": "inProjectData", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_SetTakeSourceFromFile(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)",
      "cpp": "bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)",
      "python": "Boolean BR_SetTakeSourceFromFile(MediaItem_Take take, String filenameIn, Boolean inProjectData)",
      "eel": "bool extension_api(\"BR_SetTakeSourceFromFile\", MediaItem_Take take, \"filenameIn\", bool inProjectData)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "filenameIn", "type": "string" },
          { "identifier": "inProjectData", "type": "boolean" }
        ],
        "method_name": "reaper.BR_SetTakeSourceFromFile",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Differs from [BR\\_SetTakeSourceFromFile](#BR_SetTakeSourceFromFile) only that it can also preserve existing take media source properties.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "filenameIn", "description": "" },
        { "identifier": "inProjectData", "description": "" },
        { "identifier": "keepSourceProperties", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_SetTakeSourceFromFile2(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)",
      "cpp": "bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)",
      "python": "Boolean BR_SetTakeSourceFromFile2(MediaItem_Take take, String filenameIn, Boolean inProjectData, Boolean keepSourceProperties)",
      "eel": "bool extension_api(\"BR_SetTakeSourceFromFile2\", MediaItem_Take take, \"filenameIn\", bool inProjectData, bool keepSourceProperties)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "filenameIn", "type": "string" },
          { "identifier": "inProjectData", "type": "boolean" },
          { "identifier": "keepSourceProperties", "type": "boolean" }
        ],
        "method_name": "reaper.BR_SetTakeSourceFromFile2",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_TakeAtMouseCursor(SWS)",
    "functioncall": {
      "lua": "MediaItem_Take retval, number position = reaper.BR_TakeAtMouseCursor()",
      "cpp": "MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)",
      "python": "(MediaItem_Take retval, Float positionOut) = BR_TakeAtMouseCursor(positionOut)",
      "eel": "MediaItem_Take extension_api(\"BR_TakeAtMouseCursor\", &amp;position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "position", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_TakeAtMouseCursor",
        "return_values": [
          { "identifier": "retval", "type": "MediaItem_Take" },
          { "identifier": "position", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_TrackAtMouseCursor(SWS)",
    "functioncall": {
      "lua": "MediaTrack retval, number context, number position = reaper.BR_TrackAtMouseCursor()",
      "cpp": "MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)",
      "python": "(MediaTrack retval, Int contextOut, Float positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)",
      "eel": "MediaTrack extension_api(\"BR_TrackAtMouseCursor\", int &amp;context, &amp;position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "context", "description": "" },
        { "identifier": "position", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_TrackAtMouseCursor",
        "return_values": [
          { "identifier": "retval", "type": "MediaTrack" },
          { "identifier": "context", "type": "number" },
          { "identifier": "position", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "track", "description": "" },
        { "identifier": "fx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_TrackFX_GetFXModuleName(SWS)",
    "functioncall": {
      "lua": "boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)",
      "cpp": "bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOut_sz)",
      "python": "(Boolean retval, MediaTrack track, Int fx, String nameOut, Int nameOut_sz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOut_sz)",
      "eel": "bool extension_api(\"BR_TrackFX_GetFXModuleName\", MediaTrack track, int fx, #name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "name", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.BR_TrackFX_GetFXModuleName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "ini", "get", "value", "section", "key"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini\n\nIf you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.\nIf you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.\nYou can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or get\\_ini\\_file for the path+filename of the Reaper.ini-file.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "sectionName",
          "description": "the [section] in which the key is stored, you'd like to get"
        },
        {
          "identifier": "keyName",
          "description": "the key from the [section], whose value you'd like to get"
        },
        {
          "identifier": "defaultString",
          "description": "a default value that will be returned, if the [section] and/or key does not exist in the ini-file yet."
        },
        {
          "identifier": "filePath",
          "description": "the path+filename, where the [section] and key are stored"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetPrivateProfileString(SWS)",
    "functioncall": {
      "lua": "integer retval, string string = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)",
      "cpp": "int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)",
      "python": "(Int retval, String sectionName, String keyName, String defaultString, String filePath, String stringOut, Int stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)",
      "eel": "int extension_api(\"BR_Win32_GetPrivateProfileString\", \"sectionName\", \"keyName\", \"defaultString\", \"filePath\", #string)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "number of characters of the value" },
        { "identifier": "string", "description": "the value of that key" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "sectionName", "type": "string" },
          { "identifier": "keyName", "type": "string" },
          { "identifier": "defaultString", "type": "string" },
          { "identifier": "filePath", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_GetPrivateProfileString",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "string", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "operation", "description": "" },
        { "identifier": "file", "description": "" },
        { "identifier": "parameters", "description": "" },
        { "identifier": "directory", "description": "" },
        { "identifier": "showFlags", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_ShellExecute(SWS)",
    "functioncall": {
      "lua": "integer = reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)",
      "cpp": "int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)",
      "python": "Int BR_Win32_ShellExecute(String operation, String file, String parameters, String directory, Int showFlags)",
      "eel": "int extension_api(\"BR_Win32_ShellExecute\", \"operation\", \"file\", \"parameters\", \"directory\", int showFlags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "operation", "type": "string" },
          { "identifier": "file", "type": "string" },
          { "identifier": "parameters", "type": "string" },
          { "identifier": "directory", "type": "string" },
          { "identifier": "showFlags", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_ShellExecute",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "ini", "write", "value", "section", "key"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[BR\\] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini\n\nIf you have multiple sections in that file with the same name, only the first one will be used, the rest will be ignored by Reaper.\nIf you have multiple keys with the same name within a section, only the first one will be used, the rest will be ignored by Reaper.\nYou can get the paths using [GetExePath](#GetExePath) for the Reaper-application-folder, [GetResourcePath](#GetResourcePath) for the ressources-folder or [get\\_ini\\_file](#get_ini_file) for the path+filename of the Reaper.ini-file.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "sectionName",
          "description": "the [section] in which the key is stored, you'd like to set"
        },
        {
          "identifier": "keyName",
          "description": "the key from the [section], whose value you'd like to set"
        },
        { "identifier": "value", "description": "the value you want to have set to the key" },
        {
          "identifier": "filePath",
          "description": "the path+filename, where the [section] and key are going to be stored"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_WritePrivateProfileString(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)",
      "cpp": "bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)",
      "python": "Boolean BR_Win32_WritePrivateProfileString(String sectionName, String keyName, String value, String filePath)",
      "eel": "bool extension_api(\"BR_Win32_WritePrivateProfileString\", \"sectionName\", \"keyName\", \"value\", \"filePath\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "true, if it worked" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "sectionName", "type": "string" },
          { "identifier": "keyName", "type": "string" },
          { "identifier": "value", "type": "string" },
          { "identifier": "filePath", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_WritePrivateProfileString",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.979" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "clipboard", "get"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Read the contents of the system clipboard.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CF_GetClipboard(SWS)",
    "functioncall": {
      "lua": "string text = reaper.CF_GetClipboard()",
      "cpp": "void CF_GetClipboard(char* textOutNeedBig, int textOutNeedBig_sz)",
      "python": "(String textOutNeedBig, Int textOutNeedBig_sz) = CF_GetClipboard(textOutNeedBig, textOutNeedBig_sz)",
      "eel": "extension_api(\"CF_GetClipboard\", #text)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string text", "description": "the content of the clipboard" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.CF_GetClipboard",
        "return_values": [{ "identifier": "text", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "clipboard", "get", "faststring", "big"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[DEPRECATED: Use [CF\\_GetClipboard](#CF_GetClipboard)\\] Read the contents of the system clipboard. See [SNM\\_CreateFastString](#SNM_CreateFastString) and [SNM\\_DeleteFastString](#SNM_DeleteFastString).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "output", "description": "a faststring used by this " }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_GetClipboardBig(SWS)",
    "functioncall": {
      "lua": "string = reaper.CF_GetClipboardBig(WDL_FastString output)",
      "cpp": "const char* CF_GetClipboardBig(WDL_FastString* output)",
      "python": "String CF_GetClipboardBig(WDL_FastString output)",
      "eel": "bool extension_api(\"CF_GetClipboardBig\", #retval, WDL_FastString output)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "the content of the clipboard" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "output", "type": "WDL_FastString" }],
        "method_name": "reaper.CF_GetClipboardBig",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["helperfunctions", "clipboard", "put", "set"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Write the given string into the system clipboard.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "the string to put into the clipboard" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_SetClipboard(SWS)",
    "functioncall": {
      "lua": "reaper.CF_SetClipboard(string str)",
      "cpp": "void CF_SetClipboard(const char* str)",
      "python": "CF_SetClipboard(String str)",
      "eel": "extension_api(\"CF_SetClipboard\", \"str\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "string" }],
        "method_name": "reaper.CF_SetClipboard",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Add MIDI note to MIDI take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midiTake", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "FNG_AddMidiNote(SWS)",
    "functioncall": {
      "lua": "RprMidiNote = reaper.FNG_AddMidiNote(RprMidiTake midiTake)",
      "cpp": "RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)",
      "python": "RprMidiNote FNG_AddMidiNote(RprMidiTake midiTake)",
      "eel": "RprMidiNote extension_api(\"FNG_AddMidiNote\", RprMidiTake midiTake)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "RprMidiNote", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "midiTake", "type": "RprMidiTake" }],
        "method_name": "reaper.FNG_AddMidiNote",
        "return_values": [{ "type": "RprMidiNote" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "FNG_AllocMidiTake(SWS)",
    "functioncall": {
      "lua": "RprMidiTake = reaper.FNG_AllocMidiTake(MediaItem_Take take)",
      "cpp": "RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)",
      "python": "RprMidiTake FNG_AllocMidiTake(MediaItem_Take take)",
      "eel": "RprMidiTake extension_api(\"FNG_AllocMidiTake\", MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "RprMidiTake", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.FNG_AllocMidiTake",
        "return_values": [{ "type": "RprMidiTake" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Count of how many MIDI notes are in the MIDI take",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midiTake", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "FNG_CountMidiNotes(SWS)",
    "functioncall": {
      "lua": "integer = reaper.FNG_CountMidiNotes(RprMidiTake midiTake)",
      "cpp": "int FNG_CountMidiNotes(RprMidiTake* midiTake)",
      "python": "Int FNG_CountMidiNotes(RprMidiTake midiTake)",
      "eel": "int extension_api(\"FNG_CountMidiNotes\", RprMidiTake midiTake)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "midiTake", "type": "RprMidiTake" }],
        "method_name": "reaper.FNG_CountMidiNotes",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Commit changes to MIDI take and free allocated memory",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midiTake", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "FNG_FreeMidiTake(SWS)",
    "functioncall": {
      "lua": "reaper.FNG_FreeMidiTake(RprMidiTake midiTake)",
      "cpp": "void FNG_FreeMidiTake(RprMidiTake* midiTake)",
      "python": "FNG_FreeMidiTake(RprMidiTake midiTake)",
      "eel": "extension_api(\"FNG_FreeMidiTake\", RprMidiTake midiTake)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "midiTake", "type": "RprMidiTake" }],
        "method_name": "reaper.FNG_FreeMidiTake",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Get a MIDI note from a MIDI take at specified index",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midiTake", "description": "" },
        { "identifier": "index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "FNG_GetMidiNote(SWS)",
    "functioncall": {
      "lua": "RprMidiNote = reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)",
      "cpp": "RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)",
      "python": "RprMidiNote FNG_GetMidiNote(RprMidiTake midiTake, Int index)",
      "eel": "RprMidiNote extension_api(\"FNG_GetMidiNote\", RprMidiTake midiTake, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "RprMidiNote", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midiTake", "type": "RprMidiTake" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.FNG_GetMidiNote",
        "return_values": [{ "type": "RprMidiNote" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Get MIDI note property",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midiNote", "description": "" },
        { "identifier": "property", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "FNG_GetMidiNoteIntProperty(SWS)",
    "functioncall": {
      "lua": "integer = reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)",
      "cpp": "int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)",
      "python": "Int FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, String property)",
      "eel": "int extension_api(\"FNG_GetMidiNoteIntProperty\", RprMidiNote midiNote, \"property\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midiNote", "type": "RprMidiNote" },
          { "identifier": "property", "type": "string" }
        ],
        "method_name": "reaper.FNG_GetMidiNoteIntProperty",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["MIDI Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[FNG]Set MIDI note property",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "midiNote", "description": "" },
        { "identifier": "property", "description": "" },
        { "identifier": "value", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "FNG_SetMidiNoteIntProperty(SWS)",
    "functioncall": {
      "lua": "reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)",
      "cpp": "void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)",
      "python": "FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, String property, Int value)",
      "eel": "extension_api(\"FNG_SetMidiNoteIntProperty\", RprMidiNote midiNote, \"property\", int value)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "midiNote", "type": "RprMidiNote" },
          { "identifier": "property", "type": "string" },
          { "identifier": "value", "type": "integer" }
        ],
        "method_name": "reaper.FNG_SetMidiNoteIntProperty",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "analyzeTruePeak", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_AnalyzeTakeLoudness(SWS)",
    "functioncall": {
      "lua": "boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)",
      "cpp": "bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)",
      "eel": "bool extension_api(\"NF_AnalyzeTakeLoudness\", MediaItem_Take take, bool analyzeTruePeak, &amp;lufsIntegrated, &amp;range, &amp; truePeak, &amp;truePeakPos, &amp;shortTermMax, &amp;momentaryMax)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "lufsIntegrated", "description": "" },
        { "identifier": "range", "description": "" },
        { "identifier": "truePeak", "description": "" },
        { "identifier": "truePeakPos", "description": "" },
        { "identifier": "shortTermMax", "description": "" },
        { "identifier": "momentaryMax", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "analyzeTruePeak", "type": "boolean" }
        ],
        "method_name": "reaper.NF_AnalyzeTakeLoudness",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "lufsIntegrated", "type": "number" },
          { "identifier": "range", "type": "number" },
          { "identifier": "truePeak", "type": "number" },
          { "identifier": "truePeakPos", "type": "number" },
          { "identifier": "shortTermMax", "type": "number" },
          { "identifier": "momentaryMax", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Same as [NF\\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness) but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actually indicate the beginning of time *intervalls*, (3 sec. and 0.4 sec. resp.). ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "analyzeTruePeak", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_AnalyzeTakeLoudness2(SWS)",
    "functioncall": {
      "lua": "boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)",
      "cpp": "bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double* truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)",
      "python": "(Boolean retval, MediaItem_Take take, Boolean analyzeTruePeak, Float lufsIntegratedOut, Float rangeOut, Float truePeakOut, Float truePeakPosOut, Float shortTermMaxOut, Float momentaryMaxOut, Float shortTermMaxPosOut, Float momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut, truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)",
      "eel": "bool extension_api(\"NF_AnalyzeTakeLoudness2\", MediaItem_Take take, bool analyzeTruePeak, &amp;lufsIntegrated, &amp;range, &amp; truePeak, &amp;truePeakPos, &amp;shortTermMax, &amp;momentaryMax, &amp;shortTermMaxPos, &amp;momentaryMaxPos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "lufsIntegrated", "description": "" },
        { "identifier": "range", "description": "" },
        { "identifier": "truePeak", "description": "" },
        { "identifier": "truePeakPos", "description": "" },
        { "identifier": "shortTermMax", "description": "" },
        { "identifier": "momentaryMax", "description": "" },
        { "identifier": "shortTermMaxPos", "description": "" },
        { "identifier": "momentaryMaxPos", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "take", "type": "MediaItem_Take" },
          { "identifier": "analyzeTruePeak", "type": "boolean" }
        ],
        "method_name": "reaper.NF_AnalyzeTakeLoudness2",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "lufsIntegrated", "type": "number" },
          { "identifier": "range", "type": "number" },
          { "identifier": "truePeak", "type": "number" },
          { "identifier": "truePeakPos", "type": "number" },
          { "identifier": "shortTermMax", "type": "number" },
          { "identifier": "momentaryMax", "type": "number" },
          { "identifier": "shortTermMaxPos", "type": "number" },
          { "identifier": "momentaryMaxPos", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Does LUFS integrated analysis only. Faster than full loudness analysis ([NF\\_AnalyzeTakeLoudness](#NF_AnalyzeTakeLoudness)) . Use this if only LUFS integrated is required.\nTake vol. env. is taken into account. \n\nSee: [Signal flow](http://wiki.cockos.com/wiki/index.php/Measure_and_normalize_loudness_with_SWS).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_AnalyzeTakeLoudness_IntegratedOnly(SWS)",
    "functioncall": {
      "lua": "boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)",
      "cpp": "bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)",
      "python": "(Boolean retval, MediaItem_Take take, Float lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)",
      "eel": "bool extension_api(\"NF_AnalyzeTakeLoudness_IntegratedOnly\", MediaItem_Take take, &amp;lufsIntegrated)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "retval", "description": "" },
        { "identifier": "lufsIntegrated", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "take", "type": "MediaItem_Take" }],
        "method_name": "reaper.NF_AnalyzeTakeLoudness_IntegratedOnly",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "lufsIntegrated", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetMediaItemAverageRMS(SWS)",
    "functioncall": {
      "lua": "number = reaper.NF_GetMediaItemAverageRMS(MediaItem item)",
      "cpp": "double NF_GetMediaItemAverageRMS(MediaItem* item)",
      "python": "Float NF_GetMediaItemAverageRMS(MediaItem item)",
      "eel": "double extension_api(\"NF_GetMediaItemAverageRMS\", MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.NF_GetMediaItemAverageRMS",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetMediaItemMaxPeak(SWS)",
    "functioncall": {
      "lua": "number = reaper.NF_GetMediaItemMaxPeak(MediaItem item)",
      "cpp": "double NF_GetMediaItemMaxPeak(MediaItem* item)",
      "python": "Float NF_GetMediaItemMaxPeak(MediaItem item)",
      "eel": "double extension_api(\"NF_GetMediaItemMaxPeak\", MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.NF_GetMediaItemMaxPeak",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetMediaItemPeakRMS_NonWindowed(SWS)",
    "functioncall": {
      "lua": "number = reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)",
      "cpp": "double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)",
      "python": "Float NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)",
      "eel": "double extension_api(\"NF_GetMediaItemPeakRMS_NonWindowed\", MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.NF_GetMediaItemPeakRMS_NonWindowed",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetMediaItemPeakRMS_Windowed(SWS)",
    "functioncall": {
      "lua": "number = reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)",
      "cpp": "double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)",
      "python": "Float NF_GetMediaItemPeakRMS_Windowed(MediaItem item)",
      "eel": "double extension_api(\"NF_GetMediaItemPeakRMS_Windowed\", MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.NF_GetMediaItemPeakRMS_Windowed",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Deprecated, see [CreateTrackSend](#CreateTrackSend) (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc..",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "dest", "description": "" },
        { "identifier": "type", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SNM_AddReceive(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)",
      "cpp": "bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)",
      "python": "Boolean SNM_AddReceive(MediaTrack src, MediaTrack dest, Int type)",
      "eel": "bool extension_api(\"SNM_AddReceive\", MediaTrack src, MediaTrack dest, int type)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src", "type": "MediaTrack" },
          { "identifier": "dest", "type": "MediaTrack" },
          { "identifier": "type", "type": "integer" }
        ],
        "method_name": "reaper.SNM_AddReceive",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fxId", "description": "" },
        { "identifier": "prmId", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SNM_AddTCPFXParm(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)",
      "cpp": "bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)",
      "python": "Boolean SNM_AddTCPFXParm(MediaTrack tr, Int fxId, Int prmId)",
      "eel": "bool extension_api(\"SNM_AddTCPFXParm\", MediaTrack tr, int fxId, int prmId)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "fxId", "type": "integer" },
          { "identifier": "prmId", "type": "integer" }
        ],
        "method_name": "reaper.SNM_AddTCPFXParm",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Instantiates a new \"fast string\". You must delete this string, see [SNM\\_DeleteFastString](#SNM_DeleteFastString).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_CreateFastString(SWS)",
    "functioncall": {
      "lua": "WDL_FastString = reaper.SNM_CreateFastString(string str)",
      "cpp": "WDL_FastString* SNM_CreateFastString(const char* str)",
      "python": "WDL_FastString SNM_CreateFastString(String str)",
      "eel": "WDL_FastString extension_api(\"SNM_CreateFastString\", \"str\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "WDL_FastString", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "string" }],
        "method_name": "reaper.SNM_CreateFastString",
        "return_values": [{ "type": "WDL_FastString" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Deletes a \"fast string\" instance.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_DeleteFastString(SWS)",
    "functioncall": {
      "lua": "reaper.SNM_DeleteFastString(WDL_FastString str)",
      "cpp": "void SNM_DeleteFastString(WDL_FastString* str)",
      "python": "SNM_DeleteFastString(WDL_FastString str)",
      "eel": "extension_api(\"SNM_DeleteFastString\", WDL_FastString str)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "WDL_FastString" }],
        "method_name": "reaper.SNM_DeleteFastString",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "get", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.            ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper Config Variables](Reaper_Config_Variables.html) for valid config-vars"
        },
        {
          "identifier": "number errvalue",
          "description": "the errorvalue that will be returned, if varname isn't a valid one"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SNM_GetDoubleConfigVar(SWS)",
    "functioncall": {
      "lua": "number = reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)",
      "cpp": "double SNM_GetDoubleConfigVar(const char* varname, double errvalue)",
      "python": "Float SNM_GetDoubleConfigVar(String varname, Float errvalue)",
      "eel": "double extension_api(\"SNM_GetDoubleConfigVar\", \"varname\", errvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number",
          "description": "the returned number/doublefloat-value of varname"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "varname", "type": "string" },
          { "identifier": "errvalue", "type": "number" }
        ],
        "method_name": "reaper.SNM_GetDoubleConfigVar",
        "return_values": [{ "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Gets the \"fast string\" content.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetFastString(SWS)",
    "functioncall": {
      "lua": "string = reaper.SNM_GetFastString(WDL_FastString str)",
      "cpp": "const char* SNM_GetFastString(WDL_FastString* str)",
      "python": "String SNM_GetFastString(WDL_FastString str)",
      "eel": "bool extension_api(\"SNM_GetFastString\", #retval, WDL_FastString str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "WDL_FastString" }],
        "method_name": "reaper.SNM_GetFastString",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Gets the \"fast string\" length.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetFastStringLength(SWS)",
    "functioncall": {
      "lua": "integer = reaper.SNM_GetFastStringLength(WDL_FastString str)",
      "cpp": "int SNM_GetFastStringLength(WDL_FastString* str)",
      "python": "Int SNM_GetFastStringLength(WDL_FastString str)",
      "eel": "int extension_api(\"SNM_GetFastStringLength\", WDL_FastString str)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "WDL_FastString" }],
        "method_name": "reaper.SNM_GetFastStringLength",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.80" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "get", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars"
        },
        {
          "identifier": "integer errvalue",
          "description": "the errorvalue that will be returned, if varname isn't a valid one"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SNM_GetIntConfigVar(SWS)",
    "functioncall": {
      "lua": "integer retval = reaper.SNM_GetIntConfigVar(string varname, integer errvalue)",
      "cpp": "int SNM_GetIntConfigVar(const char* varname, int errvalue)",
      "python": "Int SNM_GetIntConfigVar(String varname, Int errvalue)",
      "eel": "int extension_api(\"SNM_GetIntConfigVar\", \"varname\", int errvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "the returned integer-value of varname" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "varname", "type": "string" },
          { "identifier": "errvalue", "type": "integer" }
        ],
        "method_name": "reaper.SNM_GetIntConfigVar",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.80" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "get", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "SNM_GetLongConfigVar(SWS)",
    "functioncall": {
      "lua": "boolean retval, number high, number low = reaper.SNM_GetLongConfigVar(string varname)",
      "cpp": "bool SNM_GetLongConfigVar(const char* varname, int* highOut, int* lowOut)",
      "python": "(Boolean retval, String varname, Int highOut, Int lowOut) = SNM_GetLongConfigVar(varname, highOut, lowOut)",
      "eel": "bool extension_api(\"SNM_GetLongConfigVar\", \"varname\", int &high, int &low)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, varname was found; false, varname wasn't found"
        },
        { "identifier": "number high", "description": "the high-32bits of the value" },
        { "identifier": "number low", "description": "the low-32bits of the value" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "varname", "type": "string" }],
        "method_name": "reaper.SNM_GetLongConfigVar",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "high", "type": "number" },
          { "identifier": "low", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see [BR\\_GetMediaItemTakeGUID](#BR_GetMediaItemTakeGUID)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "project",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "guid", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SNM_GetMediaItemTakeByGUID(SWS)",
    "functioncall": {
      "lua": "MediaItem_Take = reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)",
      "cpp": "MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)",
      "python": "MediaItem_Take SNM_GetMediaItemTakeByGUID(ReaProject project, String guid)",
      "eel": "MediaItem_Take extension_api(\"SNM_GetMediaItemTakeByGUID\", ReaProject project, \"guid\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "project", "type": "ReaProject" },
          { "identifier": "guid", "type": "string" }
        ],
        "method_name": "reaper.SNM_GetMediaItemTakeByGUID",
        "return_values": [{ "type": "MediaItem_Take" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Gets a marker/region name. Returns true if marker/region found.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "ReaProject proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "integer num", "description": "" },
        { "identifier": "boolean isrgn", "description": "" },
        { "identifier": "WDL_FastString name", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "SNM_GetProjectMarkerName(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgn, WDL_FastString name)",
      "cpp": "bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)",
      "python": "Boolean SNM_GetProjectMarkerName(ReaProject proj, Int num, Boolean isrgn, WDL_FastString name)",
      "eel": "bool extension_api(\"SNM_GetProjectMarkerName\", ReaProject proj, int num, bool isrgn, WDL_FastString name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "num", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "name", "type": "WDL_FastString" }
        ],
        "method_name": "reaper.SNM_GetProjectMarkerName",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "obj", "description": "" },
        { "identifier": "WDL_FastString state", "description": "" },
        { "identifier": "setnewvalue", "description": "" },
        { "identifier": "wantminimalstate", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetSetObjectState(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_GetSetObjectState(identifier obj, WDL_FastString state, boolean setnewvalue, boolean wantminimalstate)",
      "cpp": "bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)",
      "python": "Boolean SNM_GetSetObjectState(void obj, WDL_FastString state, Boolean setnewvalue, Boolean wantminimalstate)",
      "eel": "bool extension_api(\"SNM_GetSetObjectState\", void* obj, WDL_FastString state, bool setnewvalue, bool wantminimalstate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "obj", "type": "identifier" },
          { "identifier": "state", "type": "WDL_FastString" },
          { "identifier": "setnewvalue", "type": "boolean" },
          { "identifier": "wantminimalstate", "type": "boolean" }
        ],
        "method_name": "reaper.SNM_GetSetObjectState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem\\_Take\\* param in order to manage empty takes (i.e. takes with MediaItem\\_Take\\*==NULL), see [SNM\\_GetSetSourceState2](#SNM_GetSetSourceState2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "" },
        { "identifier": "takeidx", "description": "" },
        { "identifier": "WDL_FastString state", "description": "" },
        { "identifier": "setnewvalue", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetSetSourceState(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_GetSetSourceState(MediaItem item, integer takeidxWDL_FastString state, boolean setnewvalue)",
      "cpp": "bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)",
      "python": "Boolean SNM_GetSetSourceState(MediaItem item, Int takeidx, WDL_FastString state, Boolean setnewvalue)",
      "eel": "bool extension_api(\"SNM_GetSetSourceState\", MediaItem item, int takeidx, WDL_FastString state, bool setnewvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "takeidxWDL_FastString", "type": "integer" },
          { "identifier": "setnewvalue", "type": "boolean" }
        ],
        "method_name": "reaper.SNM_GetSetSourceState",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see [SNM\\_GetSetSourceState](#SNM_GetSetSourceState).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "take", "description": "" },
        { "identifier": "WDL_FastString state", "description": "" },
        { "identifier": "setnewvalue", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetSetSourceState2(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_GetSetSourceState2(MediaItem_Take takeWDL_FastString state, boolean setnewvalue)",
      "cpp": "bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)",
      "python": "Boolean SNM_GetSetSourceState2(MediaItem_Take take, WDL_FastString state, Boolean setnewvalue)",
      "eel": "bool extension_api(\"SNM_GetSetSourceState2\", MediaItem_Take take, WDL_FastString state, bool setnewvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "takeWDL_FastString", "type": "MediaItem_Take" },
          { "identifier": "setnewvalue", "type": "boolean" }
        ],
        "method_name": "reaper.SNM_GetSetSourceState2",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Deprecated, see [GetMediaSourceType](#GetMediaSourceType). Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "takeWDL_FastString type", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_GetSourceType(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)",
      "cpp": "bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)",
      "python": "Boolean SNM_GetSourceType(MediaItem_Take take, WDL_FastString type)",
      "eel": "bool extension_api(\"SNM_GetSourceType\", MediaItem_Take take, WDL_FastString type)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "takeWDL_FastString", "type": "MediaItem_Take" }],
        "method_name": "reaper.SNM_GetSourceType",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "fxId", "description": "" },
        { "identifier": "what", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SNM_MoveOrRemoveTrackFX(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)",
      "cpp": "bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)",
      "python": "Boolean SNM_MoveOrRemoveTrackFX(MediaTrack tr, Int fxId, Int what)",
      "eel": "bool extension_api(\"SNM_MoveOrRemoveTrackFX\", MediaTrack tr, int fxId, int what)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "fxId", "type": "integer" },
          { "identifier": "what", "type": "integer" }
        ],
        "method_name": "reaper.SNM_MoveOrRemoveTrackFX",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Returns false if tag was not found. See [SNM\\_TagMediaFile](#SNM_TagMediaFile).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string fn", "description": "the filename+path of the mediafile" },
        {
          "identifier": "string tag",
          "description": "the tag you want to request; \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\", \"year\""
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SNM_ReadMediaFileTag(SWS)",
    "functioncall": {
      "lua": "boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag)",
      "cpp": "bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagvalOut, int tagvalOut_sz)",
      "python": "(Boolean retval, String fn, String tag, String tagvalOut, Int tagvalOut_sz) = SNM_ReadMediaFileTag(fn, tag, tagvalOut, tagvalOut_sz)",
      "eel": "bool extension_api(\"SNM_ReadMediaFileTag\", \"fn\", \"tag\", #tagval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, value could be read; false, value could not be read"
        },
        { "identifier": "string tagval", "description": "the value of the requested tag" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "tag", "type": "string" }
        ],
        "method_name": "reaper.SNM_ReadMediaFileTag",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "tagval", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Deprecated, see [RemoveTrackSend](#RemoveTrackSend) (v5.15pre1+). Removes a receive. Returns false if nothing updated.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "rcvidx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SNM_RemoveReceive(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)",
      "cpp": "bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)",
      "python": "Boolean SNM_RemoveReceive(MediaTrack tr, Int rcvidx)",
      "eel": "bool extension_api(\"SNM_RemoveReceive\", MediaTrack tr, int rcvidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "rcvidx", "type": "integer" }
        ],
        "method_name": "reaper.SNM_RemoveReceive",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Removes all receives from srctr. Returns false if nothing updated.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "" },
        { "identifier": "srctr", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SNM_RemoveReceivesFrom(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)",
      "cpp": "bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)",
      "python": "Boolean SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)",
      "eel": "bool extension_api(\"SNM_RemoveReceivesFrom\", MediaTrack tr, MediaTrack srctr)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tr", "type": "MediaTrack" },
          { "identifier": "srctr", "type": "MediaTrack" }
        ],
        "method_name": "reaper.SNM_RemoveReceivesFrom",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "name", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_SelectResourceBookmark(SWS)",
    "functioncall": {
      "lua": "integer = reaper.SNM_SelectResourceBookmark(string name)",
      "cpp": "int SNM_SelectResourceBookmark(const char* name)",
      "python": "Int SNM_SelectResourceBookmark(String name)",
      "eel": "int extension_api(\"SNM_SelectResourceBookmark\", \"name\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "name", "type": "string" }],
        "method_name": "reaper.SNM_SelectResourceBookmark",
        "return_values": [{ "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "set", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n        \nThe settings can be from the Preferences, Project settings and Render-dialog, as well as numerous other settings, as e.g. set in the context menu of the transport-area.\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\n\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars"
        },
        { "identifier": "number newvalue", "description": "the new value to be set into varname" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SNM_SetDoubleConfigVar(SWS)",
    "functioncall": {
      "lua": "boolean retval = reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)",
      "cpp": "bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)",
      "python": "Boolean SNM_SetDoubleConfigVar(String varname, Float newvalue)",
      "eel": "bool extension_api(\"SNM_SetDoubleConfigVar\", \"varname\", newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if setting was successful; false, if not "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "varname", "type": "string" },
          { "identifier": "newvalue", "type": "number" }
        ],
        "method_name": "reaper.SNM_SetDoubleConfigVar",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Sets the \"fast string\" content. Returns str for facility.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "newstr", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "SNM_SetFastString(SWS)",
    "functioncall": {
      "lua": "WDL_FastString = reaper.SNM_SetFastString(WDL_FastString str, string newstr)",
      "cpp": "WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)",
      "python": "WDL_FastString SNM_SetFastString(WDL_FastString str, String newstr)",
      "eel": "WDL_FastString extension_api(\"SNM_SetFastString\", WDL_FastString str, \"newstr\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "WDL_FastString", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "str", "type": "WDL_FastString" },
          { "identifier": "newstr", "type": "string" }
        ],
        "method_name": "reaper.SNM_SetFastString",
        "return_values": [{ "type": "WDL_FastString" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "set", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars"
        },
        { "identifier": "integer newvalue", "description": "the newly set value for varname" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "SNM_SetIntConfigVar(SWS)",
    "functioncall": {
      "lua": "boolean retval = reaper.SNM_SetIntConfigVar(string varname, integer newvalue)",
      "cpp": "bool SNM_SetIntConfigVar(const char* varname, int newvalue)",
      "python": "Boolean SNM_SetIntConfigVar(String varname, Int newvalue)",
      "eel": "bool extension_api(\"SNM_SetIntConfigVar\", \"varname\", int newvalue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if setting was successful, false if not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "varname", "type": "string" },
          { "identifier": "newvalue", "type": "integer" }
        ],
        "method_name": "reaper.SNM_SetIntConfigVar",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.1", "Reaper": "5.62" },
    "chapers": ["Api-Helper-Functions"],
    "tags": ["reaper", "project", "config", "preferences", "variables", "set", "internal"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\nSome variables are bitfields, where each bit represents e.g a checkbox in the preferences.\nThe changed settings are usually only changed within the running Reaper, but not stored in the config-files, so you need to do it manually or they get lost after Reaper is closed!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string varname",
          "description": "the name of the config-variable to be read; not case sensitive\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars"
        },
        {
          "identifier": "integer newHighValue",
          "description": "the newly set value for varname of the high-32bits"
        },
        {
          "identifier": "integer newLowValue",
          "description": "the newly set value for varname of the low-32bits"
        }
      ],
      "param_count": 3,
      "markup_type": "markdown"
    },
    "title": "SNM_SetLongConfigVar(SWS)",
    "functioncall": {
      "lua": "boolean reaper.SNM_SetLongConfigVar(string varname, integer newHighValue, integer newLowValue)",
      "cpp": "bool SNM_SetLongConfigVar(const char* varname, int newHighValue, int newLowValue)",
      "python": "Boolean SNM_SetLongConfigVar(String varname, Int newHighValue, Int newLowValue)",
      "eel": "bool extension_api(\"SNM_SetLongConfigVar\", \"varname\", int newHighValue, int newLowValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if setting was successful, false if not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "varname", "type": "string" },
          { "identifier": "newHighValue", "type": "integer" },
          { "identifier": "newLowValue", "type": "integer" }
        ],
        "method_name": "reaper.SNM_SetLongConfigVar",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Deprecated, see [SetProjectMarker4](#SetProjectMarker4) -- Same function as SetProjectMarker3() except it can set empty names \"\".",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "num", "description": "" },
        { "identifier": "isrgn", "description": "" },
        { "identifier": "pos", "description": "" },
        { "identifier": "rgnend", "description": "" },
        { "identifier": "name", "description": "" },
        { "identifier": "color", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "markdown"
    },
    "title": "SNM_SetProjectMarker(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)",
      "cpp": "bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)",
      "python": "Boolean SNM_SetProjectMarker(ReaProject proj, Int num, Boolean isrgn, Float pos, Float rgnend, String name, Int color)",
      "eel": "bool extension_api(\"SNM_SetProjectMarker\", ReaProject proj, int num, bool isrgn, pos, rgnend, \"name\", int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "proj", "type": "ReaProject" },
          { "identifier": "num", "type": "integer" },
          { "identifier": "isrgn", "type": "boolean" },
          { "identifier": "pos", "type": "number" },
          { "identifier": "rgnend", "type": "number" },
          { "identifier": "name", "type": "string" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.SNM_SetProjectMarker",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.62" },
    "chapers": ["File Management"],
    "tags": ["filemanagement", "tag", "id3", "add"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[S&amp;M\\] Tags a media file thanks to [TagLib](https://taglib.github.io). Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See [SNM\\_ReadMediaFileTag](#SNM_ReadMediaFileTag).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string fn", "description": "the mediafilename, in which to add the tag" },
        {
          "identifier": "string tag",
          "description": "\"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" or \"year\""
        },
        { "identifier": "string tagval", "description": "the new value to be added" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SNM_TagMediaFile(SWS)",
    "functioncall": {
      "lua": "boolean = reaper.SNM_TagMediaFile(string fn, string tag, string tagval)",
      "cpp": "bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)",
      "python": "Boolean SNM_TagMediaFile(String fn, String tag, String tagval)",
      "eel": "bool extension_api(\"SNM_TagMediaFile\", \"fn\", \"tag\", \"tagval\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, if adding the tag worked; false, if adding didn't work."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "tag", "type": "string" },
          { "identifier": "tagval", "type": "string" }
        ],
        "method_name": "reaper.SNM_TagMediaFile",
        "return_values": [{ "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Miscellaneous"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[S&amp;M] Attach Resources slot actions to a given bookmark.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bookmarkId", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SNM_TieResourceSlotActions(SWS)",
    "functioncall": {
      "lua": "reaper.SNM_TieResourceSlotActions(integer bookmarkId)",
      "cpp": "void SNM_TieResourceSlotActions(int bookmarkId)",
      "python": "SNM_TieResourceSlotActions(Int bookmarkId)",
      "eel": "extension_api(\"SNM_TieResourceSlotActions\", int bookmarkId)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "bookmarkId", "type": "integer" }],
        "method_name": "reaper.SNM_TieResourceSlotActions",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["User Interface"],
    "tags": ["userinterface", "midi", "editor", "open", "active"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Focuses the active/open MIDI editor.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "SN_FocusMIDIEditor(SWS)",
    "functioncall": {
      "lua": "reaper.SN_FocusMIDIEditor()",
      "cpp": "void SN_FocusMIDIEditor()",
      "python": "SN_FocusMIDIEditor()",
      "eel": "extension_api(\"SN_FocusMIDIEditor\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.SN_FocusMIDIEditor", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["trackmanagement", "get", "notes", "sws", "mediaitem"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[ULT\\]Get item notes.\n\nGets the information from the NOTES-tag, as stored by [ULT\\_SetMediaItemNote](#ULT_SetMediaItemNote).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "the MediaItem from which to get the notes from" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ULT_GetMediaItemNote(SWS)",
    "functioncall": {
      "lua": "string = reaper.ULT_GetMediaItemNote(MediaItem item)",
      "cpp": "const char* ULT_GetMediaItemNote(MediaItem* item)",
      "python": "String ULT_GetMediaItemNote(MediaItem item)",
      "eel": "bool extension_api(\"ULT_GetMediaItemNote\", #retval, MediaItem item)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string",
          "description": "the notes, as stored in the MediaItem. If no notes exist, it will return \"\""
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.ULT_GetMediaItemNote",
        "return_values": [{ "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.9.7", "Reaper": "5.62" },
    "chapers": ["Mediaitem Management"],
    "tags": ["mediaitemmanagement", "set", "mediaitem", "notes", "sws"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "\\[ULT\\]Set item notes.\n\nWill be added as new tag NOTES in the MediaItem-StateChunk. Can be read again with [ULT\\_GetMediaItemNote](#ULT_GetMediaItemNote)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "the MediaItem in which to add the Notes" },
        {
          "identifier": "note",
          "description": "the notes to be added. Newlines are allowed. Long strings may slow down Reaper!"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ULT_SetMediaItemNote(SWS)",
    "functioncall": {
      "lua": "reaper.ULT_SetMediaItemNote(MediaItem item, string note)",
      "cpp": "void ULT_SetMediaItemNote(MediaItem* item, const char* note)",
      "python": "ULT_SetMediaItemNote(MediaItem item, String note)",
      "eel": "extension_api(\"ULT_SetMediaItemNote\", MediaItem item, \"note\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "note", "type": "string" }
        ],
        "method_name": "reaper.ULT_SetMediaItemNote",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier address", "description": "" },
        { "identifier": "integer offset", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Byte(JS)",
    "functioncall": {
      "lua": "number byte = reaper.JS_Byte(identifier pointer, integer offset)",
      "cpp": "void JS_Byte(void* pointer, int offset, int* byteOut)",
      "python": "(void pointer, Int offset, Int byteOut) = JS_Byte(pointer, offset, byteOut)",
      "eel": "extension_api(\"JS_Byte\", void* pointer, int offset, int &amp;byte)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number byte  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "pointer", "type": "identifier" },
          { "identifier": "offset", "type": "integer" }
        ],
        "method_name": "reaper.JS_Byte",
        "return_values": [{ "identifier": "byte", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Composites a LICE bitmap with a REAPER window. Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n\n\\* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n\n\\* autoUpdate is an optional parameter that is false by default. If true, JS\\_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call [JS\\_Window\\_InvalidateRect](#JS_Window_InvalidateRect) explicitly once all bitmaps have been moved.)\n\n\\* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n\n\\* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second. (Also refer to the [JS\\_Composite\\_Delay](#JS_Composite_Delay) function.)\n\n\\* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved. However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area.\n\n\\* This function should not be applied directly to top-level windows, but rather to child windows.\n\n\\* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n\n\\* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either [LICE\\_Blit](#LICE_Blit) or [LICE\\_ProcessRect](#LICE_ProcessRect).\n\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "integer dstw", "description": "" },
        { "identifier": "integer dsth", "description": "" },
        { "identifier": "identifier sysBitmap", "description": "" },
        { "identifier": "integer srcx", "description": "" },
        { "identifier": "integer srcy", "description": "" },
        { "identifier": "integer srcw", "description": "" },
        { "identifier": "integer srch", "description": "" },
        { "identifier": "optional boolean autoUpdate", "description": "" }
      ],
      "param_count": 11,
      "markup_type": "plaintext"
    },
    "title": "JS_Composite(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_Composite(identifier windowHWND, integer dstx, integer dsty, integer dstw, integer dsth, identifier sysBitmap, integer srcx, integer srcy, integer srcw, integer srch, optional boolean autoUpdate)",
      "cpp": "int JS_Composite(void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, bool* autoUpdateOptional)",
      "python": "(Int retval, void windowHWND, Int dstx, Int dsty, Int dstw, Int dsth, void sysBitmap, Int srcx, Int srcy, Int srcw, Int srch, Boolean autoUpdateOptional) = JS_Composite(windowHWND, dstx, dsty, dstw, dsth, sysBitmap, srcx, srcy, srcw, srch, autoUpdateOptional)",
      "eel": "int extension_api(\"JS_Composite\", void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, optional boolean autoUpdateOptional)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "1 if successful\n-1 = windowHWND is not a window\n-3 = Could not obtain the original window process\n-4 = sysBitmap is not a LICE bitmap\n-5 = sysBitmap is not a system bitmap\n-6 = Could not obtain the window HDC\n-7 = Error when subclassing to new window process."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "dstw", "type": "integer" },
          { "identifier": "dsth", "type": "integer" },
          { "identifier": "sysBitmap", "type": "identifier" },
          { "identifier": "srcx", "type": "integer" },
          { "identifier": "srcy", "type": "integer" },
          { "identifier": "srcw", "type": "integer" },
          { "identifier": "srch", "type": "integer" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.JS_Composite",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.010", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window. The optimal refresh rate may depend on the number of composited bitmaps.\n\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window. The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\n\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\n\nReturns:\n\\* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime &lt; minTime, or maxBitmaps &lt; 1).\n\\* If delay times have not previously been set for this window, prev time values are 0.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "number minTime", "description": "" },
        { "identifier": "number maxTime", "description": "" },
        { "identifier": "integer numBitmapsWhenMax", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_Composite_Delay(JS)",
    "functioncall": {
      "lua": "integer retval, number prevMinTime, number prevMaxTime, number prevBitmaps = reaper.JS_Composite_Delay(identifier windowHWND, number minTime, number maxTime, integer numBitmapsWhenMax)",
      "cpp": "int JS_Composite_Delay(void* windowHWND, double minTime, double maxTime, int numBitmapsWhenMax, double* prevMinTimeOut, double* prevMaxTimeOut, int* prevBitmapsOut)",
      "python": "(Int retval, void windowHWND, Float minTime, Float maxTime, Int numBitmapsWhenMax, Float prevMinTimeOut, Float prevMaxTimeOut, Int prevBitmapsOut) = JS_Composite_Delay(windowHWND, minTime, maxTime, numBitmapsWhenMax, prevMinTimeOut, prevMaxTimeOut, prevBitmapsOut)",
      "eel": "int extension_api(\"JS_Composite_Delay\", void* windowHWND, minTime, maxTime, int numBitmapsWhenMax, &prevMinTime, &prevMaxTime, int &prevBitmaps)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "number prevMinTime", "description": "" },
        { "identifier": "number prevMaxTime", "description": "" },
        { "identifier": "number prevBitmaps", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "minTime", "type": "number" },
          { "identifier": "maxTime", "type": "number" },
          { "identifier": "numBitmapsWhenMax", "type": "integer" }
        ],
        "method_name": "reaper.JS_Composite_Delay",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "prevMinTime", "type": "number" },
          { "identifier": "prevMaxTime", "type": "number" },
          { "identifier": "prevBitmaps", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns all bitmaps composited to the given window.\n\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap\\* pointer.\n\nretval is the number of linked bitmaps found, or negative if an error occured.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Composite_ListBitmaps(JS)",
    "functioncall": {
      "lua": "integer retval, string list = reaper.JS_Composite_ListBitmaps(identifier windowHWND)",
      "cpp": "int JS_Composite_ListBitmaps(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)",
      "python": "(Int retval, void windowHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Composite_ListBitmaps(windowHWND, listOutNeedBig, listOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Composite_ListBitmaps\", void* windowHWND, #list)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string list", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Composite_ListBitmaps",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "list", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.002", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Unlinks the window and bitmap.\n\n\t\t\t\\* autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\n\n\t\t\tIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "identifier bitmap", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Composite_Unlink(JS)",
    "functioncall": {
      "lua": "reaper.JS_Composite_Unlink(identifier windowHWND, identifier bitmap, unsupported autoUpdate)",
      "cpp": "void JS_Composite_Unlink(void* windowHWND, void* bitmapOptional, bool* autoUpdateOptional)",
      "python": "(void windowHWND, void bitmapOptional, Boolean autoUpdateOptional) = JS_Composite_Unlink(windowHWND, bitmapOptional, autoUpdateOptional)",
      "eel": "extension_api(\"JS_Composite_Unlink\", void* windowHWND, void* bitmap, unsupported autoUpdateOptional)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "autoUpdate", "type": "unsupported" }
        ],
        "method_name": "reaper.JS_Composite_Unlink",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier address", "description": "" },
        { "identifier": "integer offset", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Double(JS)",
    "functioncall": {
      "lua": "number double = reaper.JS_Double(identifier address, integer pointer)",
      "cpp": "void JS_Double(void* pointer, int offset, double* doubleOut)",
      "python": "(void pointer, Int offset, Float doubleOut) = JS_Double(pointer, offset, doubleOut)",
      "eel": "extension_api(\"JS_Double\", void* pointer, int offset, &amp;double)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number double  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "address", "type": "identifier" },
          { "identifier": "pointer", "type": "integer" }
        ],
        "method_name": "reaper.JS_Double",
        "return_values": [{ "identifier": "double", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns information about a file.\n\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\n\nretval is 0 if successful, negative if not.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string filePath",
          "description": "the file, whose file-stats you want to get"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_File_Stat(JS)",
    "functioncall": {
      "lua": "integer retval, number size, string accessedTime, string modifiedTime, string cTime, number deviceID, number deviceSpecialID, number inode, number mode, number numLinks, number ownerUserID, number ownerGroupID = reaper.JS_File_Stat(string filePath)",
      "cpp": "int JS_File_Stat(const char* filePath, double* sizeOut, char* accessedTimeOut, char* modifiedTimeOut, char* cTimeOut, int* deviceIDOut, int* deviceSpecialIDOut, int* inodeOut, int* modeOut, int* numLinksOut, int* ownerUserIDOut, int* ownerGroupIDOut)",
      "python": "(Int retval, String filePath, Float sizeOut, String accessedTimeOut, String modifiedTimeOut, String cTimeOut, Int deviceIDOut, Int deviceSpecialIDOut, Int inodeOut, Int modeOut, Int numLinksOut, Int ownerUserIDOut, Int ownerGroupIDOut) = JS_File_Stat(filePath, sizeOut, accessedTimeOut, modifiedTimeOut, cTimeOut, deviceIDOut, deviceSpecialIDOut, inodeOut, modeOut, numLinksOut, ownerUserIDOut, ownerGroupIDOut)",
      "eel": "int extension_api(\"JS_File_Stat\", \"filePath\", &size, #accessedTime, #modifiedTime, #cTime, int &deviceID, int &deviceSpecialID, int &inode, int &mode, int &numLinks, int &ownerUserID, int &ownerGroupID)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "negative, if not retrievable; 0, if retrieving was successful"
        },
        { "identifier": "number size", "description": "the size of the file in bytes" },
        {
          "identifier": "string accessedTime",
          "description": "the last time the file was accessed"
        },
        {
          "identifier": "string modifiedTime",
          "description": "the last time the file was modified"
        },
        {
          "identifier": "string cTime",
          "description": "the time the file was created(Windows) or the last time its status had changed(Mac and Linux)"
        },
        { "identifier": "number deviceID", "description": "the ID of the device" },
        { "identifier": "number deviceSpecialID", "description": "the special ID of the file" },
        { "identifier": "number inode", "description": "the inode" },
        { "identifier": "number mode", "description": "the attributes set" },
        { "identifier": "number numLinks", "description": "the number of links" },
        { "identifier": "number ownerUserID", "description": "ID of the user the file belongs to" },
        {
          "identifier": "number ownerGroupID",
          "description": "ID of the group the file belongs to"
        }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "filePath", "type": "string" }],
        "method_name": "reaper.JS_File_Stat",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "size", "type": "number" },
          { "identifier": "accessedTime", "type": "string" },
          { "identifier": "modifiedTime", "type": "string" },
          { "identifier": "cTime", "type": "string" },
          { "identifier": "deviceID", "type": "number" },
          { "identifier": "deviceSpecialID", "type": "number" },
          { "identifier": "inode", "type": "number" },
          { "identifier": "mode", "type": "number" },
          { "identifier": "numLinks", "type": "number" },
          { "identifier": "ownerUserID", "type": "number" },
          { "identifier": "ownerGroupID", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.002", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits between two device contexts, which may include LICE \"system bitmaps\".\n\n\t\t\tmode: Optional parameter. \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\n\n\t\t\tWARNING: On WindowsOS, GDI\\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\\_Blit or LICE\\_ProcessRect.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier destHDC", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "identifier sourceHDC", "description": "" },
        { "identifier": "integer srcx", "description": "" },
        { "identifier": "integer srxy", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" },
        { "identifier": "optional string mode", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_Blit(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height, optional string mode)",
      "cpp": "void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, const char* modeOptional)",
      "python": "JS_GDI_Blit(void destHDC, Int dstx, Int dsty, void sourceHDC, Int srcx, Int srxy, Int width, Int height, String modeOptional)",
      "eel": "extension_api(\"JS_GDI_Blit\", void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, optional \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "destHDC", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "sourceHDC", "type": "identifier" },
          { "identifier": "srcx", "type": "integer" },
          { "identifier": "srxy", "type": "integer" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" },
          { "identifier": "string", "type": "optional" }
        ],
        "method_name": "reaper.JS_GDI_Blit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer color", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_CreateFillBrush(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_CreateFillBrush(integer color)",
      "cpp": "void* JS_GDI_CreateFillBrush(int color)",
      "python": "void  JS_GDI_CreateFillBrush(Int color)",
      "eel": "void*  extension_api(\"JS_GDI_CreateFillBrush\", int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_CreateFillBrush",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Parameters:\n           \n\\* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n           \n\\* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n           \n\\* fontName: If empty string \"\", uses first font that matches the other specified attributes.\n           \n           \n           \n           Note: Text color must be set separately.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer height", "description": "" },
        { "identifier": "integer weight", "description": "" },
        { "identifier": "integer angle", "description": "" },
        { "identifier": "boolean italic", "description": "" },
        { "identifier": "boolean underline", "description": "" },
        { "identifier": "boolean strike", "description": "" },
        { "identifier": "string fontName", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_CreateFont(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)",
      "cpp": "void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)",
      "python": "void  JS_GDI_CreateFont(Int height, Int weight, Int angle, Boolean italic, Boolean underline, Boolean strikeOut, String fontName)",
      "eel": "void*  extension_api(\"JS_GDI_CreateFont\", int height, int weight, int angle, bool italic, bool underline, bool strike, \"fontName\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "height", "type": "integer" },
          { "identifier": "weight", "type": "integer" },
          { "identifier": "angle", "type": "integer" },
          { "identifier": "italic", "type": "boolean" },
          { "identifier": "underline", "type": "boolean" },
          { "identifier": "strike", "type": "boolean" },
          { "identifier": "fontName", "type": "string" }
        ],
        "method_name": "reaper.JS_GDI_CreateFont",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_CreatePen(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_CreatePen(integer width, integer color)",
      "cpp": "void* JS_GDI_CreatePen(int width, int color)",
      "python": "void  JS_GDI_CreatePen(Int width, Int color)",
      "eel": "void*  extension_api(\"JS_GDI_CreatePen\", int width, int color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_CreatePen",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier GDIObject", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_DeleteObject(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_DeleteObject(identifier GDIObject)",
      "cpp": "void JS_GDI_DeleteObject(void* GDIObject)",
      "python": "JS_GDI_DeleteObject(void GDIObject)",
      "eel": "extension_api(\"JS_GDI_DeleteObject\", void* GDIObject)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "GDIObject", "type": "identifier" }],
        "method_name": "reaper.JS_GDI_DeleteObject",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Parameters:\n           \n\\* align: Combination of: \"TOP\", \"VCENTER\", \"LEFT\", \"HCENTER\", \"RIGHT\", \"BOTTOM\", \"WORDBREAK\", \"SINGLELINE\", \"NOCLIP\", \"CALCRECT\", \"NOPREFIX\" or \"ELLIPSIS\"",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "string text", "description": "" },
        { "identifier": "integer len", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer right", "description": "" },
        { "identifier": "integer bottom", "description": "" },
        { "identifier": "string align", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_DrawText(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))",
      "cpp": "int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))",
      "python": "Int  JS_GDI_DrawText(void deviceHDC, String text, Int len, Int left, Int top, Int right, Int bottom, String align))",
      "eel": "int  extension_api(\"JS_GDI_DrawText\", void* deviceHDC, \"text\", int len, int left, int top, int right, int bottom, \"align)\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "text", "type": "string" },
          { "identifier": "len", "type": "integer" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" },
          { "identifier": "align", "type": "string" }
        ],
        "method_name": "reaper.JS_GDI_DrawText",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer right", "description": "" },
        { "identifier": "integer bottom", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_FillEllipse(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)",
      "cpp": "void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)",
      "python": "JS_GDI_FillEllipse(void deviceHDC, Int left, Int top, Int right, Int bottom)",
      "eel": "extension_api(\"JS_GDI_FillEllipse\", void* deviceHDC, int left, int top, int right, int bottom)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_FillEllipse",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "packedX and packedY are strings of points, each packed as \"&lt;i4\".",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "string packedX", "description": "" },
        { "identifier": "string packedY", "description": "" },
        { "identifier": "integer numPoints", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_FillPolygon(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)",
      "cpp": "void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)",
      "python": "JS_GDI_FillPolygon(void deviceHDC, String packedX, String packedY, Int numPoints)",
      "eel": "extension_api(\"JS_GDI_FillPolygon\", void* deviceHDC, \"packedX\", \"packedY\", int numPoints)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "packedX", "type": "string" },
          { "identifier": "packedY", "type": "string" },
          { "identifier": "numPoints", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_FillPolygon",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer right", "description": "" },
        { "identifier": "integer bottom", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_FillRect(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)",
      "cpp": "void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)",
      "python": "JS_GDI_FillRect(void deviceHDC, Int left, Int top, Int right, Int bottom)",
      "eel": "extension_api(\"JS_GDI_FillRect\", void* deviceHDC, int left, int top, int right, int bottom)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_FillRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer right", "description": "" },
        { "identifier": "integer bottom", "description": "" },
        { "identifier": "integer xrnd", "description": "" },
        { "identifier": "integer yrnd", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_FillRoundRect(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)",
      "cpp": "void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)",
      "python": "JS_GDI_FillRoundRect(void deviceHDC, Int left, Int top, Int right, Int bottom, Int xrnd, Int yrnd)",
      "eel": "extension_api(\"JS_GDI_FillRoundRect\", void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" },
          { "identifier": "xrnd", "type": "integer" },
          { "identifier": "yrnd", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_FillRoundRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the device context for the client area of the specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_GetClientDC(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_GetClientDC(identifier windowHWND)",
      "cpp": "void* JS_GDI_GetClientDC(void* windowHWND)",
      "python": "void  JS_GDI_GetClientDC(void windowHWND)",
      "eel": "void*  extension_api(\"JS_GDI_GetClientDC\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "windowHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_GDI_GetClientDC",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a device context for the entire screen.\n           \n           \n           \n           WARNING: Only available on Windows, not Linux or MacOS.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_GDI_GetScreenDC(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_GetScreenDC()",
      "cpp": "void* JS_GDI_GetScreenDC()",
      "python": "void  JS_GDI_GetScreenDC()",
      "eel": "void*  extension_api(\"JS_GDI_GetScreenDC\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.JS_GDI_GetScreenDC",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string GUIElement", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_GetSysColor(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_GDI_GetSysColor(string GUIElement)",
      "cpp": "int JS_GDI_GetSysColor(const char* GUIElement)",
      "python": "Int  JS_GDI_GetSysColor(String GUIElement)",
      "eel": "int  extension_api(\"JS_GDI_GetSysColor\", \"GUIElement\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "GUIElement", "type": "string" }
        ],
        "method_name": "reaper.JS_GDI_GetSysColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier deviceHDC", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_GetTextColor(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_GDI_GetTextColor(identifier deviceHDC)",
      "cpp": "int JS_GDI_GetTextColor(void* deviceHDC)",
      "python": "Int  JS_GDI_GetTextColor(void deviceHDC)",
      "eel": "int  extension_api(\"JS_GDI_GetTextColor\", void* deviceHDC)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "deviceHDC", "type": "identifier" }
        ],
        "method_name": "reaper.JS_GDI_GetTextColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the device context for the entire window, including title bar and frame.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_GetWindowDC(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_GetWindowDC(identifier windowHWND)",
      "cpp": "void* JS_GDI_GetWindowDC(void* windowHWND)",
      "python": "void  JS_GDI_GetWindowDC(void windowHWND)",
      "eel": "void*  extension_api(\"JS_GDI_GetWindowDC\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "windowHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_GDI_GetWindowDC",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer x1", "description": "" },
        { "identifier": "integer y1", "description": "" },
        { "identifier": "integer x2", "description": "" },
        { "identifier": "integer y2", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_Line(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)",
      "cpp": "void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)",
      "python": "JS_GDI_Line(void deviceHDC, Int x1, Int y1, Int x2, Int y2)",
      "eel": "extension_api(\"JS_GDI_Line\", void* deviceHDC, int x1, int y1, int x2, int y2)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_Line",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "packedX and packedY are strings of points, each packed as \"&lt;i4\".",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "string packedX", "description": "" },
        { "identifier": "string packedY", "description": "" },
        { "identifier": "integer numPoints", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_Polyline(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)",
      "cpp": "void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)",
      "python": "JS_GDI_Polyline(void deviceHDC, String packedX, String packedY, Int numPoints)",
      "eel": "extension_api(\"JS_GDI_Polyline\", void* deviceHDC, \"packedX\", \"packedY\", int numPoints)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "packedX", "type": "string" },
          { "identifier": "packedY", "type": "string" },
          { "identifier": "numPoints", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_Polyline",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.999", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC. To release a screen DC, only the HDC needs to be supplied.\n\nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\n\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "identifier deviceHDC", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_ReleaseDC(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_ReleaseDC(identifier windowHWND, identifier deviceHDC)",
      "cpp": "void JS_GDI_ReleaseDC(void* windowHWND, void* deviceHDC)",
      "python": "JS_GDI_ReleaseDC(void windowHWND, void deviceHDC)",
      "eel": "extension_api(\"JS_GDI_ReleaseDC\", void* windowHWND, void* deviceHDC)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "deviceHDC", "type": "identifier" }
        ],
        "method_name": "reaper.JS_GDI_ReleaseDC",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "identifier GDIObject", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_SelectObject(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)",
      "cpp": "void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)",
      "python": "void  JS_GDI_SelectObject(void deviceHDC, void GDIObject)",
      "eel": "void*  extension_api(\"JS_GDI_SelectObject\", void* deviceHDC, void* GDIObject)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "GDIObject", "type": "identifier" }
        ],
        "method_name": "reaper.JS_GDI_SelectObject",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_SetPixel(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)",
      "cpp": "void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)",
      "python": "JS_GDI_SetPixel(void deviceHDC, Int x, Int y, Int color)",
      "eel": "extension_api(\"JS_GDI_SetPixel\", void* deviceHDC, int x, int y, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_SetPixel",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_SetTextBkColor(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)",
      "cpp": "void JS_GDI_SetTextBkColor(void* deviceHDC, int color)",
      "python": "JS_GDI_SetTextBkColor(void deviceHDC, Int color)",
      "eel": "extension_api(\"JS_GDI_SetTextBkColor\", void* deviceHDC, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_SetTextBkColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer mode", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_SetTextBkMode(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)",
      "cpp": "void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)",
      "python": "JS_GDI_SetTextBkMode(void deviceHDC, Int mode)",
      "eel": "extension_api(\"JS_GDI_SetTextBkMode\", void* deviceHDC, int mode)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "mode", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_SetTextBkMode",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier deviceHDC", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_SetTextColor(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)",
      "cpp": "void JS_GDI_SetTextColor(void* deviceHDC, int color)",
      "python": "JS_GDI_SetTextColor(void deviceHDC, Int color)",
      "eel": "extension_api(\"JS_GDI_SetTextColor\", void* deviceHDC, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "deviceHDC", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_GDI_SetTextColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.002", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits between two device contexts, which may include LICE \"system bitmaps\".\n\n\t\t\tmodeOptional: \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\n\n\t\t\tWARNING: On WindowsOS, GDI\\_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE\\_Blit or LICE\\_ProcessRect.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier destHDC", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "integer dstw", "description": "" },
        { "identifier": "integer dsth", "description": "" },
        { "identifier": "identifier sourceHDC", "description": "" },
        { "identifier": "integer srcx", "description": "" },
        { "identifier": "integer srxy", "description": "" },
        { "identifier": "integer srcw", "description": "" },
        { "identifier": "integer srch", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "JS_GDI_StretchBlit(JS)",
    "functioncall": {
      "lua": "reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch, optional string mode)",
      "cpp": "void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, const char* modeOptional)",
      "python": "JS_GDI_StretchBlit(void destHDC, Int dstx, Int dsty, Int dstw, Int dsth, void sourceHDC, Int srcx, Int srxy, Int srcw, Int srch, String modeOptional)",
      "eel": "extension_api(\"JS_GDI_StretchBlit\", void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, optional \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "destHDC", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "dstw", "type": "integer" },
          { "identifier": "dsth", "type": "integer" },
          { "identifier": "sourceHDC", "type": "identifier" },
          { "identifier": "srcx", "type": "integer" },
          { "identifier": "srxy", "type": "integer" },
          { "identifier": "srcw", "type": "integer" },
          { "identifier": "srch", "type": "integer" },
          { "identifier": "string", "type": "optional" }
        ],
        "method_name": "reaper.JS_GDI_StretchBlit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier address", "description": "" },
        { "identifier": "integer offset", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Int(JS)",
    "functioncall": {
      "lua": "number int = reaper.JS_Int(identifier pointer, integer offset)",
      "cpp": "void JS_Int(void* pointer, int offset, int* intOut)",
      "python": "(void pointer, Int offset, Int intOut) = JS_Int(pointer, offset, intOut)",
      "eel": "extension_api(\"JS_Int\", void* pointer, int offset, int &amp;int)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number int  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "pointer", "type": "identifier" },
          { "identifier": "offset", "type": "integer" }
        ],
        "method_name": "reaper.JS_Int",
        "return_values": [{ "identifier": "int", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number hue", "description": "" },
        { "identifier": "number saturation", "description": "" },
        { "identifier": "number value", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_AlterBitmapHSV(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_AlterBitmapHSV(identifier bitmap, number hue, number saturation, number value)",
      "cpp": "void JS_LICE_AlterBitmapHSV(void* bitmap, double hue, double saturation, double value)",
      "python": "(JS_LICE_AlterBitmapHSV(void bitmap, Float hue, Float saturation, Float value)",
      "eel": "extension_api(\"JS_LICE_AlterBitmapHSV\", void* bitmap, hue, saturation, value)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "hue", "type": "number" },
          { "identifier": "saturation", "type": "number" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.JS_LICE_AlterBitmapHSV",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer w", "description": "" },
        { "identifier": "integer h", "description": "" },
        { "identifier": "number hue", "description": "" },
        { "identifier": "number saturation", "description": "" },
        { "identifier": "number value", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_AlterRectHSV(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_AlterRectHSV(identifier bitmap, integer x, integer y, integer w, integer h, number hue, number saturation, number value)",
      "cpp": "void JS_LICE_AlterRectHSV(void* bitmap, int x, int y, int w, int h, double hue, double saturation, double value)",
      "python": "JS_LICE_AlterRectHSV(void bitmap, Int x, Int y, Int w, Int h, Float hue, Float saturation, Float value)",
      "eel": "extension_api(\"JS_LICE_AlterRectHSV\", void* bitmap, int x, int y, int w, int h, hue, saturation, value)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "hue", "type": "number" },
          { "identifier": "saturation", "type": "number" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.JS_LICE_AlterRectHSV",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.000", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number cx", "description": "" },
        { "identifier": "number cy", "description": "" },
        { "identifier": "number r", "description": "" },
        { "identifier": "number minAngle", "description": "" },
        { "identifier": "number maxAngle", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Arc(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_Arc(void bitmap, Float cx, Float cy, Float r, Float minAngle, Float maxAngle, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_Arc\", void* bitmap, cx, cy, r, minAngle, maxAngle, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "cx", "type": "number" },
          { "identifier": "cy", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "minAngle", "type": "number" },
          { "identifier": "maxAngle", "type": "number" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_Arc",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier reaperarray", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_ArrayAllBitmaps(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_LICE_ArrayAllBitmaps(identifier reaperarray)",
      "cpp": "int JS_LICE_ArrayAllBitmaps(void* reaperarray)",
      "python": "Int JS_LICE_ArrayAllBitmaps(void reaperarray)",
      "eel": "int extension_api(\"JS_LICE_ArrayAllBitmaps\", void* reaperarray)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaperarray", "type": "identifier" }],
        "method_name": "reaper.JS_LICE_ArrayAllBitmaps",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number xstart", "description": "" },
        { "identifier": "number ystart", "description": "" },
        { "identifier": "number xctl1", "description": "" },
        { "identifier": "number yctl1", "description": "" },
        { "identifier": "number xctl2", "description": "" },
        { "identifier": "number yctl2", "description": "" },
        { "identifier": "number xend", "description": "" },
        { "identifier": "number yend", "description": "" },
        { "identifier": "number tol", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 14,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Bezier(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_Bezier(void bitmap, Float xstart, Float ystart, Float xctl1, Float yctl1, Float xctl2, Float yctl2, Float xend, Float yend, Float tol, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_Bezier\", void* bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "xstart", "type": "number" },
          { "identifier": "ystart", "type": "number" },
          { "identifier": "xctl1", "type": "number" },
          { "identifier": "yctl1", "type": "number" },
          { "identifier": "xctl2", "type": "number" },
          { "identifier": "yctl2", "type": "number" },
          { "identifier": "xend", "type": "number" },
          { "identifier": "yend", "type": "number" },
          { "identifier": "tol", "type": "number" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_Bezier",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Standard LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nIn addition to the standard LICE modes, LICE\\_Blit also offers:\n\\* \"CHANCOPY\\_XTOY\", with X and Y any of the four channels, A, R, G or B. (CHANCOPY\\_ATOA is similar to MASK mode.)\n\\* \"BLUR\"\n\\* \"ALPHAMUL\", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with \"COPY,ALPHA\".)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier destBitmap", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "identifier sourceBitmap", "description": "" },
        { "identifier": "integer srcx", "description": "" },
        { "identifier": "integer srcy", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Blit(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)",
      "cpp": "void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)",
      "python": "JS_LICE_Blit(void destBitmap, Int dstx, Int dsty, void sourceBitmap, Int srcx, Int srcy, Int width, Int height, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_Blit\", void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "destBitmap", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "sourceBitmap", "type": "identifier" },
          { "identifier": "srcx", "type": "integer" },
          { "identifier": "srcy", "type": "integer" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_Blit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number cx", "description": "" },
        { "identifier": "number cy", "description": "" },
        { "identifier": "number r", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Circle(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_Circle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_Circle\", void* bitmap, cx, cy, r, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "cx", "type": "number" },
          { "identifier": "cy", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_Circle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Clear(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Clear(identifier bitmap, integer color)",
      "cpp": "void JS_LICE_Clear(void* bitmap, int color)",
      "python": "JS_LICE_Clear(void bitmap, Int color)",
      "eel": "extension_api(\"JS_LICE_Clear\", void* bitmap, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_Clear",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean isSysBitmap", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_CreateBitmap(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)",
      "cpp": "void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)",
      "python": "void  JS_LICE_CreateBitmap(Boolean isSysBitmap, Int width, Int height)",
      "eel": "void*  extension_api(\"JS_LICE_CreateBitmap\", bool isSysBitmap, int width, int height)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "isSysBitmap", "type": "boolean" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_CreateBitmap",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_LICE_CreateFont(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_LICE_CreateFont()",
      "cpp": "void* JS_LICE_CreateFont()",
      "python": "void  JS_LICE_CreateFont()",
      "eel": "void*  extension_api(\"JS_LICE_CreateFont\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.JS_LICE_CreateFont",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.000", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deletes the bitmap, and also unlinks bitmap from any composited window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier bitmap", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_DestroyBitmap(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_DestroyBitmap(identifier bitmap)",
      "cpp": "void JS_LICE_DestroyBitmap(void* bitmap)",
      "python": "JS_LICE_DestroyBitmap(void bitmap)",
      "eel": "extension_api(\"JS_LICE_DestroyBitmap\", void* bitmap)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "bitmap", "type": "identifier" }],
        "method_name": "reaper.JS_LICE_DestroyBitmap",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier LICEFont", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_DestroyFont(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_DestroyFont(identifier LICEFont)",
      "cpp": "void JS_LICE_DestroyFont(void* LICEFont)",
      "python": "JS_LICE_DestroyFont(void LICEFont)",
      "eel": "extension_api(\"JS_LICE_DestroyFont\", void* LICEFont)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "LICEFont", "type": "identifier" }],
        "method_name": "reaper.JS_LICE_DestroyFont",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer c", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "integer mode", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_DrawChar(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))",
      "cpp": "void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))",
      "python": "JS_LICE_DrawChar(void bitmap, Int x, Int y, Int c, Int color, Float alpha, Int mode))",
      "eel": "extension_api(\"JS_LICE_DrawChar\", void* bitmap, int x, int y, char c, int color, alpha, int mode))"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "c", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_DrawChar",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "identifier LICEFont", "description": "" },
        { "identifier": "string text", "description": "" },
        { "identifier": "integer textLen", "description": "" },
        { "identifier": "integer x1", "description": "" },
        { "identifier": "integer y1", "description": "" },
        { "identifier": "integer x2", "description": "" },
        { "identifier": "integer y2", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_DrawText(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)",
      "cpp": "int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)",
      "python": "Int  JS_LICE_DrawText(void bitmap, void LICEFont, String text, Int textLen, Int x1, Int y1, Int x2, Int y2)",
      "eel": "int  extension_api(\"JS_LICE_DrawText\", void* bitmap, void* LICEFont, \"text\", int textLen, int x1, int y1, int x2, int y2)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "LICEFont", "type": "identifier" },
          { "identifier": "text", "type": "string" },
          { "identifier": "textLen", "type": "integer" },
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_DrawText",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number cx", "description": "" },
        { "identifier": "number cy", "description": "" },
        { "identifier": "number r", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_FillCircle(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_FillCircle(void bitmap, Float cx, Float cy, Float r, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_FillCircle\", void* bitmap, cx, cy, r, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "cx", "type": "number" },
          { "identifier": "cy", "type": "number" },
          { "identifier": "r", "type": "number" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_FillCircle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "packedX and packedY are two strings of coordinates, each packed as \"&lt;i4\".\n\nLICE modes : \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\n\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "string packedX", "description": "" },
        { "identifier": "string packedY", "description": "" },
        { "identifier": "integer numPoints", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_FillPolygon(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)",
      "cpp": "void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)",
      "python": "JS_LICE_FillPolygon(void bitmap, String packedX, String packedY, Int numPoints, Int color, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_FillPolygon\", void* bitmap, \"packedX\", \"packedY\", int numPoints, int color, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "packedX", "type": "string" },
          { "identifier": "packedY", "type": "string" },
          { "identifier": "numPoints", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_FillPolygon",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer w", "description": "" },
        { "identifier": "integer h", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_FillRect(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)",
      "cpp": "void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)",
      "python": "JS_LICE_FillRect(void bitmap, Int x, Int y, Int w, Int h, Int color, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_FillRect\", void* bitmap, int x, int y, int w, int h, int color, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_FillRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x1", "description": "" },
        { "identifier": "integer y1", "description": "" },
        { "identifier": "integer x2", "description": "" },
        { "identifier": "integer y2", "description": "" },
        { "identifier": "integer x3", "description": "" },
        { "identifier": "integer y3", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_FillTriangle(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)",
      "cpp": "void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)",
      "python": "JS_LICE_FillTriangle(void bitmap, Int x1, Int y1, Int x2, Int y2, Int x3, Int y3, Int color, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_FillTriangle\", void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" },
          { "identifier": "x3", "type": "integer" },
          { "identifier": "y3", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_FillTriangle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier bitmap", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_GetDC(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_LICE_GetDC(identifier bitmap)",
      "cpp": "void* JS_LICE_GetDC(void* bitmap)",
      "python": "void  JS_LICE_GetDC(void bitmap)",
      "eel": "void*  extension_api(\"JS_LICE_GetDC\", void* bitmap)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "bitmap", "type": "identifier" }
        ],
        "method_name": "reaper.JS_LICE_GetDC",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier bitmap", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_GetHeight(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_LICE_GetHeight(identifier bitmap)",
      "cpp": "int JS_LICE_GetHeight(void* bitmap)",
      "python": "Int  JS_LICE_GetHeight(void bitmap)",
      "eel": "int  extension_api(\"JS_LICE_GetHeight\", void* bitmap)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "bitmap", "type": "identifier" }
        ],
        "method_name": "reaper.JS_LICE_GetHeight",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the color of the specified pixel.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_GetPixel(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)",
      "cpp": "int JS_LICE_GetPixel(void* bitmap, int x, int y)",
      "python": "Int  JS_LICE_GetPixel(void bitmap, Int x, Int y)",
      "eel": "int  extension_api(\"JS_LICE_GetPixel\", void* bitmap, int x, int y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_GetPixel",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier bitmap", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_GetWidth(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_LICE_GetWidth(identifier bitmap)",
      "cpp": "int JS_LICE_GetWidth(void* bitmap)",
      "python": "Int  JS_LICE_GetWidth(void bitmap)",
      "eel": "int  extension_api(\"JS_LICE_GetWidth\", void* bitmap)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "bitmap", "type": "identifier" }
        ],
        "method_name": "reaper.JS_LICE_GetWidth",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "integer dstw", "description": "" },
        { "identifier": "integer dsth", "description": "" },
        { "identifier": "number ir", "description": "" },
        { "identifier": "number ig", "description": "" },
        { "identifier": "number ib", "description": "" },
        { "identifier": "number ia", "description": "" },
        { "identifier": "number drdx", "description": "" },
        { "identifier": "number dgdx", "description": "" },
        { "identifier": "number dbdx", "description": "" },
        { "identifier": "number dadx", "description": "" },
        { "identifier": "number drdy", "description": "" },
        { "identifier": "number dgdy", "description": "" },
        { "identifier": "number dbdy", "description": "" },
        { "identifier": "number dady", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 18,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_GradRect(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)",
      "cpp": "void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)",
      "python": "JS_LICE_GradRect(void bitmap, Int dstx, Int dsty, Int dstw, Int dsth, Float ir, Float ig, Float ib, Float ia, Float drdx, Float dgdx, Float dbdx, Float dadx, Float drdy, Float dgdy, Float dbdy, Float dady, String mode)",
      "eel": "extension_api(\"JS_LICE_GradRect\", void* bitmap, int dstx, int dsty, int dstw, int dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "dstw", "type": "integer" },
          { "identifier": "dsth", "type": "integer" },
          { "identifier": "ir", "type": "number" },
          { "identifier": "ig", "type": "number" },
          { "identifier": "ib", "type": "number" },
          { "identifier": "ia", "type": "number" },
          { "identifier": "drdx", "type": "number" },
          { "identifier": "dgdx", "type": "number" },
          { "identifier": "dbdx", "type": "number" },
          { "identifier": "dadx", "type": "number" },
          { "identifier": "drdy", "type": "number" },
          { "identifier": "dgdy", "type": "number" },
          { "identifier": "dbdy", "type": "number" },
          { "identifier": "dady", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_GradRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier bitmap", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_IsFlipped(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_LICE_IsFlipped(identifier bitmap)",
      "cpp": "bool JS_LICE_IsFlipped(void* bitmap)",
      "python": "Boolean  JS_LICE_IsFlipped(void bitmap)",
      "eel": "bool  extension_api(\"JS_LICE_IsFlipped\", void* bitmap)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "bitmap", "type": "identifier" }
        ],
        "method_name": "reaper.JS_LICE_IsFlipped",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number x1", "description": "" },
        { "identifier": "number y1", "description": "" },
        { "identifier": "number x2", "description": "" },
        { "identifier": "number y2", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Line(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_Line(void bitmap, Float x1, Float y1, Float x2, Float y2, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_Line\", void* bitmap, x1, y1, x2, y2, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x1", "type": "number" },
          { "identifier": "y1", "type": "number" },
          { "identifier": "x2", "type": "number" },
          { "identifier": "y2", "type": "number" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_Line",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.000", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_LICE_ListAllBitmaps(JS)",
    "functioncall": {
      "lua": "integer retval, string list = reaper.JS_LICE_ListAllBitmaps()",
      "cpp": "int JS_LICE_ListAllBitmaps(char* listOutNeedBig, int listOutNeedBig_sz)",
      "python": "(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_LICE_ListAllBitmaps(listOutNeedBig, listOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_LICE_ListAllBitmaps\", #list)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string list", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_LICE_ListAllBitmaps",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "list", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a system LICE bitmap containing the JPEG.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_LICE_LoadJPG(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_LICE_LoadJPG(string filename)",
      "cpp": "void* JS_LICE_LoadJPG(const char* filename)",
      "python": "void JS_LICE_LoadJPG(String filename)",
      "eel": "void* extension_api(\"JS_LICE_LoadJPG\", \"filename\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "the bitmap, which holds the jpg" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "filename", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_LoadJPG",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a system LICE bitmap containing the PNG.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string filename", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_LoadPNG(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_LICE_LoadPNG(string filename)",
      "cpp": "void* JS_LICE_LoadPNG(const char* filename)",
      "python": "void  JS_LICE_LoadPNG(String filename)",
      "eel": "void*  extension_api(\"JS_LICE_LoadPNG\", \"filename\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "filename", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_LoadPNG",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string text", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_MeasureText(JS)",
    "functioncall": {
      "lua": "number width, number Height = reaper.JS_LICE_MeasureText(string text)",
      "cpp": "void JS_LICE_MeasureText(const char* text, int* widthOut, int* HeightOut)",
      "python": "(String text, Int widthOut, Int HeightOut) = JS_LICE_MeasureText(text, widthOut, HeightOut)",
      "eel": "extension_api(\"JS_LICE_MeasureText\", \"text\", int &width, int &Height)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number width", "description": "" },
        { "identifier": "number Height", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "text", "type": "string" }],
        "method_name": "reaper.JS_LICE_MeasureText",
        "return_values": [
          { "identifier": "width", "type": "number" },
          { "identifier": "Height", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Applies bitwise operations to each pixel in the target rectangle.\n\noperand: a color in 0xAARRGGBB format.\n\nmodes:\n\\* \"XOR\", \"OR\" or \"AND\".\n\\* \"SET\\_XYZ\", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n\\* \"ALPHAMUL\": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI\\_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\n\nNOTE:\nLICE\\_Blit and LICE\\_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS\\_LICE\\_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, \"ADD\").",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer w", "description": "" },
        { "identifier": "integer h", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "number operand", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_ProcessRect(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_LICE_ProcessRect(identifier bitmap, integer x, integer y, integer w, integer h, string mode, number operand)",
      "cpp": "bool JS_LICE_ProcessRect(void* bitmap, int x, int y, int w, int h, const char* mode, double operand)",
      "python": "Boolean JS_LICE_ProcessRect(void bitmap, Int x, Int y, Int w, Int h, String mode, Float operand)",
      "eel": "bool extension_api(\"JS_LICE_ProcessRect\", void* bitmap, int x, int y, int w, int h, \"mode\", operand)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "operand", "type": "number" }
        ],
        "method_name": "reaper.JS_LICE_ProcessRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_PutPixel(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, integer color, number alpha, string mode)",
      "cpp": "void JS_LICE_PutPixel(void* bitmap, int x, int y, int color, double alpha, const char* mode)",
      "python": "JS_LICE_PutPixel(void bitmap, Int x, Int y, Int color, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_PutPixel\", void* bitmap, int x, int y, int color, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_PutPixel",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_Resize(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)",
      "cpp": "void JS_LICE_Resize(void* bitmap, int width, int height)",
      "python": "JS_LICE_Resize(void bitmap, Int width, Int height)",
      "eel": "extension_api(\"JS_LICE_Resize\", void* bitmap, int width, int height)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_Resize",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier destBitmap", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "integer dstw", "description": "" },
        { "identifier": "integer dsth", "description": "" },
        { "identifier": "identifier sourceBitmap", "description": "" },
        { "identifier": "number srcx", "description": "" },
        { "identifier": "number srcy", "description": "" },
        { "identifier": "number srcw", "description": "" },
        { "identifier": "number srch", "description": "" },
        { "identifier": "number angle", "description": "" },
        { "identifier": "number rotxcent", "description": "" },
        { "identifier": "number rotycent", "description": "" },
        { "identifier": "boolean cliptosourcerect", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_RotatedBlit(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)",
      "cpp": "void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)",
      "python": "JS_LICE_RotatedBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void sourceBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float angle, Float rotxcent, Float rotycent, Boolean cliptosourcerect, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_RotatedBlit\", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, bool cliptosourcerect, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "destBitmap", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "dstw", "type": "integer" },
          { "identifier": "dsth", "type": "integer" },
          { "identifier": "sourceBitmap", "type": "identifier" },
          { "identifier": "srcx", "type": "number" },
          { "identifier": "srcy", "type": "number" },
          { "identifier": "srcw", "type": "number" },
          { "identifier": "srch", "type": "number" },
          { "identifier": "angle", "type": "number" },
          { "identifier": "rotxcent", "type": "number" },
          { "identifier": "rotycent", "type": "number" },
          { "identifier": "cliptosourcerect", "type": "boolean" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_RotatedBlit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\n           \n           \n           \n           LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "number x", "description": "" },
        { "identifier": "number y", "description": "" },
        { "identifier": "number w", "description": "" },
        { "identifier": "number h", "description": "" },
        { "identifier": "integer cornerradius", "description": "" },
        { "identifier": "integer color", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "boolean antialias", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_RoundRect(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)",
      "cpp": "void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)",
      "python": "JS_LICE_RoundRect(void bitmap, Float x, Float y, Float w, Float h, Int cornerradius, Int color, Float alpha, String mode, Boolean antialias)",
      "eel": "extension_api(\"JS_LICE_RoundRect\", void* bitmap, x, y, w, h, int cornerradius, int color, alpha, \"mode\", bool antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" },
          { "identifier": "w", "type": "number" },
          { "identifier": "h", "type": "number" },
          { "identifier": "cornerradius", "type": "integer" },
          { "identifier": "color", "type": "integer" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "antialias", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_RoundRect",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier destBitmap", "description": "" },
        { "identifier": "integer dstx", "description": "" },
        { "identifier": "integer dsty", "description": "" },
        { "identifier": "integer dstw", "description": "" },
        { "identifier": "integer dsth", "description": "" },
        { "identifier": "identifier srcBitmap", "description": "" },
        { "identifier": "number srcx", "description": "" },
        { "identifier": "number srcy", "description": "" },
        { "identifier": "number srcw", "description": "" },
        { "identifier": "number srch", "description": "" },
        { "identifier": "number alpha", "description": "" },
        { "identifier": "string mode", "description": "" }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_ScaledBlit(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)",
      "cpp": "void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)",
      "python": "JS_LICE_ScaledBlit(void destBitmap, Int dstx, Int dsty, Int dstw, Int dsth, void srcBitmap, Float srcx, Float srcy, Float srcw, Float srch, Float alpha, String mode)",
      "eel": "extension_api(\"JS_LICE_ScaledBlit\", void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, srcx, srcy, srcw, srch, alpha, \"mode\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "destBitmap", "type": "identifier" },
          { "identifier": "dstx", "type": "integer" },
          { "identifier": "dsty", "type": "integer" },
          { "identifier": "dstw", "type": "integer" },
          { "identifier": "dsth", "type": "integer" },
          { "identifier": "srcBitmap", "type": "identifier" },
          { "identifier": "srcx", "type": "number" },
          { "identifier": "srcy", "type": "number" },
          { "identifier": "srcw", "type": "number" },
          { "identifier": "srch", "type": "number" },
          { "identifier": "alpha", "type": "number" },
          { "identifier": "mode", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_ScaledBlit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque. (All pixels' RGB values remain unchanged.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier bitmap", "description": "" },
        { "identifier": "integer colorRGB", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_SetAlphaFromColorMask(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_SetAlphaFromColorMask(identifier bitmap, integer colorRGB)",
      "cpp": "void JS_LICE_SetAlphaFromColorMask(void* bitmap, int colorRGB)",
      "python": "JS_LICE_SetAlphaFromColorMask(void bitmap, Int colorRGB)",
      "eel": "extension_api(\"JS_LICE_SetAlphaFromColorMask\", void* bitmap, int colorRGB)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "bitmap", "type": "identifier" },
          { "identifier": "colorRGB", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_SetAlphaFromColorMask",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier LICEFont", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_SetFontBkColor(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)",
      "cpp": "void JS_LICE_SetFontBkColor(void* LICEFont, int color)",
      "python": "JS_LICE_SetFontBkColor(void LICEFont, Int color)",
      "eel": "extension_api(\"JS_LICE_SetFontBkColor\", void* LICEFont, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "LICEFont", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_SetFontBkColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier LICEFont", "description": "" },
        { "identifier": "integer color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_SetFontColor(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)",
      "cpp": "void JS_LICE_SetFontColor(void* LICEFont, int color)",
      "python": "JS_LICE_SetFontColor(void LICEFont, Int color)",
      "eel": "extension_api(\"JS_LICE_SetFontColor\", void* LICEFont, int color)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "LICEFont", "type": "identifier" },
          { "identifier": "color", "type": "integer" }
        ],
        "method_name": "reaper.JS_LICE_SetFontColor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts a GDI font into a LICE font.\n           \n           The font can be modified by the following flags, in a comma-separated list:\n           \n           \"VERTICAL\", \"BOTTOMUP\", \"NATIVE\", \"BLUR\", \"INVERT\", \"MONO\", \"SHADOW\" or \"OUTLINE\".",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier LICEFont", "description": "" },
        { "identifier": "identifier GDIFont", "description": "" },
        { "identifier": "string moreFormats", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_SetFontFromGDI(JS)",
    "functioncall": {
      "lua": "reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)",
      "cpp": "void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)",
      "python": "JS_LICE_SetFontFromGDI(void LICEFont, void GDIFont, String moreFormats)",
      "eel": "extension_api(\"JS_LICE_SetFontFromGDI\", void* LICEFont, void* GDIFont, \"moreFormats\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "LICEFont", "type": "identifier" },
          { "identifier": "GDIFont", "type": "identifier" },
          { "identifier": "moreFormats", "type": "string" }
        ],
        "method_name": "reaper.JS_LICE_SetFontFromGDI",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Parameters:\n\n\\* quality is an integer in the range 1..100.\n\\* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, \"cubist\" settings. ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string filename", "description": "the filename+path of the jpg to write" },
        {
          "identifier": "LICE_IBitmap bitmap",
          "description": "the bitmap, that you want to write as jpg-file"
        },
        {
          "identifier": "integer quality",
          "description": "the quality-setting in percent, from 1(lowest quality) to 100(highest quality)"
        },
        {
          "identifier": "optional boolean forceBaseline",
          "description": "true, ensure compatibility with all JPEG-viewers(prevent too low quality); nil or false, allow too low quality(possible compatibility-problems with some JPEG-viewers)"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_WriteJPG(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_LICE_WriteJPG(string filenameLICE_IBitmap bitmap, integer quality, optional boolean forceBaseline)",
      "cpp": "bool JS_LICE_WriteJPG(const char* filename, LICE_IBitmap* bitmap, int quality, bool* forceBaselineOptional)",
      "python": "(Boolean retval, String filename, LICE_IBitmap bitmap, Int quality, Boolean forceBaselineOptional) = JS_LICE_WriteJPG(filename, bitmap, quality, forceBaselineOptional)",
      "eel": "bool extension_api(\"JS_LICE_WriteJPG\", \"filename\", LICE_IBitmap bitmap, int quality, bool forceBaselineOptional)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, writing was successful; false, writing was unsuccessful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "filenameLICE_IBitmap", "type": "string" },
          { "identifier": "quality", "type": "integer" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.JS_LICE_WriteJPG",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Writes the contents of a LICE_IBitMap as png-file.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string filename",
          "description": "the filename+path of the png-file to write"
        },
        {
          "identifier": "LICE_IBitmap bitmap",
          "description": "the bitmap, whose contents shall be written as png-file"
        },
        {
          "identifier": "boolean wantAlpha",
          "description": "true, store alpha; false, don't store alpha"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_LICE_WritePNG(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_LICE_WritePNG(string filenameLICE_IBitmap bitmap, boolean wantAlpha)",
      "cpp": "bool JS_LICE_WritePNG(const char* filename, LICE_IBitmap* bitmap, bool wantAlpha)",
      "python": "Boolean JS_LICE_WritePNG(String filename, LICE_IBitmap bitmap, Boolean wantAlpha)",
      "eel": "bool extension_api(\"JS_LICE_WritePNG\", \"filename\", LICE_IBitmap bitmap, bool wantAlpha)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, writing was successful; false, writing was not successful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "filenameLICE_IBitmap", "type": "string" },
          { "identifier": "wantAlpha", "type": "boolean" }
        ],
        "method_name": "reaper.JS_LICE_WritePNG",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.990", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "boolean partialOK", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_EnsureVisible(JS)",
    "functioncall": {
      "lua": "reaper.JS_ListView_EnsureVisible(identifier listviewHWND, integer index, boolean partialOK)",
      "cpp": "void JS_ListView_EnsureVisible(void* listviewHWND, int index, bool partialOK)",
      "python": "JS_ListView_EnsureVisible(void listviewHWND, Int index, Boolean partialOK)",
      "eel": "extension_api(\"JS_ListView_EnsureVisible\", void* listviewHWND, int index, bool partialOK)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "partialOK", "type": "boolean" }
        ],
        "method_name": "reaper.JS_ListView_EnsureVisible",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\n\nParameters:\n\\* LangPackSection: Language Packs are divided into sections such as \"common\" or \"DLG\\_102\".\n\\* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\n\nExample: reaper.JS\\_Localize(\"Actions\", \"common\", \"\", 20)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string USEnglish", "description": "the original english string" },
        {
          "identifier": "string LangPackSection",
          "description": "the section in the Reaper-language-pack-file, in which the string is locate"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Localize(JS)",
    "functioncall": {
      "lua": "string translation = reaper.JS_Localize(string USEnglish, string LangPackSection)",
      "cpp": "void JS_Localize(const char* USEnglish, const char* LangPackSection, char* translationOut, int translationOut_sz)",
      "python": "(String USEnglish, String LangPackSection, String translationOut, Int translationOut_sz) = JS_Localize(USEnglish, LangPackSection, translationOut, translationOut_sz)",
      "eel": "extension_api(\"JS_Localize\", \"USEnglish\", \"LangPackSection\", #translation)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string translation",
          "description": "the translated string, according to the currently used LangPack"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "USEnglish", "type": "string" },
          { "identifier": "LangPackSection", "type": "string" }
        ],
        "method_name": "reaper.JS_Localize",
        "return_values": [{ "identifier": "translation", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the addresses of all open MIDI windows (whether docked or not).\n           \n\\* The addresses are stored in the provided reaper.array.\n           \n\\* Each address can be converted to a REAPER object (HWND) by the function JS\\_Window\\_HandleFromAddress.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier reaperarray", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_MIDIEditor_ArrayAll(JS)",
    "functioncall": {
      "lua": "reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)",
      "cpp": "void JS_MIDIEditor_ArrayAll(void* reaperarray)",
      "python": "JS_MIDIEditor_ArrayAll(void reaperarray)",
      "eel": "extension_api(\"JS_MIDIEditor_ArrayAll\", void* reaperarray)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaperarray", "type": "identifier" }],
        "method_name": "reaper.JS_MIDIEditor_ArrayAll",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a list of HWNDs of all open MIDI windows (whether docked or not).\n           \n\\* The list is formatted as a comma-separated (and terminated) string of hexadecimal values.\n           \n\\* Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_MIDIEditor_ListAll(JS)",
    "functioncall": {
      "lua": "string buf = reaper.JS_MIDIEditor_ListAll(string buf)",
      "cpp": "void JS_MIDIEditor_ListAll(char* buf, int buf_sz)",
      "python": "(String buf, Int buf_sz) = JS_MIDIEditor_ListAll(buf, buf_sz)",
      "eel": "extension_api(\"JS_MIDIEditor_ListAll\", #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "buf", "type": "string" }],
        "method_name": "reaper.JS_MIDIEditor_ListAll",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Allocates memory for general use by functions that require memory buffers.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer sizeBytes", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mem_Alloc(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Mem_Alloc(integer sizeBytes)",
      "cpp": "void* JS_Mem_Alloc(int sizeBytes)",
      "python": "void JS_Mem_Alloc(Int sizeBytes)",
      "eel": "void* extension_api(\"JS_Mem_Alloc\", int sizeBytes)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "sizeBytes", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mem_Alloc",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Frees memory that was previously allocated by JS\\_Mem\\_Alloc.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer sizeBytes", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mem_Free(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Mem_Alloc(integer sizeBytes)",
      "cpp": "void* JS_Mem_Alloc(int sizeBytes)",
      "python": "Boolean JS_Mem_Free(void mallocPointer)",
      "eel": "void* extension_api(\"JS_Mem_Alloc\", int sizeBytes)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "sizeBytes", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mem_Alloc",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies a packed string into a memory buffer.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier mallocPointer", "description": "" },
        { "identifier": "integer offset", "description": "" },
        { "identifier": "string packedString", "description": "" },
        { "identifier": "integer stringLength", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_Mem_FromString(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Mem_FromString(identifier mallocPointer, integer offset, string packedString, integer stringLength)",
      "cpp": "bool JS_Mem_FromString(void* mallocPointer, int offset, const char* packedString, int stringLength)",
      "python": "Boolean JS_Mem_FromString(void mallocPointer, Int offset, String packedString, Int stringLength)",
      "eel": "bool extension_api(\"JS_Mem_FromString\", void* mallocPointer, int offset, \"packedString\", int stringLength)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "mallocPointer", "type": "identifier" },
          { "identifier": "offset", "type": "integer" },
          { "identifier": "packedString", "type": "string" },
          { "identifier": "stringLength", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mem_FromString",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_Mouse_GetCursor(JS)",
    "functioncall": {
      "lua": "identifier = reaper.JS_Mouse_GetCursor()",
      "cpp": "void* JS_Mouse_GetCursor()",
      "python": "void JS_Mouse_GetCursor()",
      "eel": "void* extension_api(\"JS_Mouse_GetCursor\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_Mouse_GetCursor",
        "return_values": [{ "type": "identifier" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the states of mouse buttons and modifiers keys.\n           \n           \n           \n           Parameters:\n           \n\\* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. I.e., to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.\n\nuse -1 as flags to retrieve the states of all mouse-buttons and modifier",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer flags", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mouse_GetState(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_Mouse_GetState(integer flags)",
      "cpp": "int JS_Mouse_GetState(int flags)",
      "python": "Int  JS_Mouse_GetState(Int flags)",
      "eel": "int  extension_api(\"JS_Mouse_GetState\", int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mouse_GetState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.964", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Loads a cursor by number.\n           \n           cursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers &gt; 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers &lt; 2000). \n           \n           If successful, returns a handle to the cursor, which can be used in [JS\\_Mouse\\_SetCursor](#JS_Mouse_SetCursor).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer cursorNumber", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mouse_LoadCursor(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Mouse_LoadCursor(integer cursorNumber)",
      "cpp": "void* JS_Mouse_LoadCursor(int cursorNumber)",
      "python": "void  JS_Mouse_LoadCursor(Int cursorNumber)",
      "eel": "void*  extension_api(\"JS_Mouse_LoadCursor\", int cursorNumber)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "cursorNumber", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mouse_LoadCursor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.964", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Loads a cursor from a .cur file.\n           \nIf omitted or false, and if the .cur file has already been loaded previously during the REAPER session, the file will not be re-loaded, and the previous handle will be returned, thereby (slightly) improving speed and (slighty) lowering memory usage.\nIf true, the file will be re-loaded and a new handle will be returned.\n           \nIf successful, returns a handle to the cursor, which can be used in [JS\\_Mouse\\_SetCursor](#JS_Mouse_SetCursor).\nforceNewLoad is an optional boolean parameter:",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string pathAndFileName", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mouse_LoadCursorFromFile(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName, <b>unsupported</b> optional boolean forceNewLoad)",
      "cpp": "void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName, bool* forceNewLoad)",
      "python": "void  JS_Mouse_LoadCursorFromFile(String pathAndFileName, Boolean forceNewLoadOptional)",
      "eel": "void*  extension_api(\"JS_Mouse_LoadCursorFromFile\", \"pathAndFileName\", <b>unsupported</b> forceNewLoad)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "pathAndFileName", "type": "string" },
          { "identifier": "boolean", "type": "optional" }
        ],
        "method_name": "reaper.JS_Mouse_LoadCursorFromFile",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single \"defer\" cycle.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier cursorHandle", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Mouse_SetCursor(JS)",
    "functioncall": {
      "lua": "reaper.JS_Mouse_SetCursor(identifier cursorHandle)",
      "cpp": "void JS_Mouse_SetCursor(void* cursorHandle)",
      "python": "JS_Mouse_SetCursor(void cursorHandle)",
      "eel": "extension_api(\"JS_Mouse_SetCursor\", void* cursorHandle)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "cursorHandle", "type": "identifier" }],
        "method_name": "reaper.JS_Mouse_SetCursor",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Moves the mouse cursor to the specified coordinates.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Mouse_SetPosition(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Mouse_SetPosition(integer x, integer y)",
      "cpp": "bool JS_Mouse_SetPosition(int x, int y)",
      "python": "Boolean  JS_Mouse_SetPosition(Int x, Int y)",
      "eel": "bool  extension_api(\"JS_Mouse_SetPosition\", int x, int y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.JS_Mouse_SetPosition",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string s", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_PtrFromStr(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_PtrFromStr(string s)",
      "cpp": "void* JS_PtrFromStr(const char* s)",
      "python": "void  JS_PtrFromStr(String s)",
      "eel": "void*  extension_api(\"JS_PtrFromStr\", \"s\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "s", "type": "string" }
        ],
        "method_name": "reaper.JS_PtrFromStr",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the version of the js_ReaScriptAPI extension.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_ReaScriptAPI_Version(JS)",
    "functioncall": {
      "lua": "number version = reaper.JS_ReaScriptAPI_Version()",
      "cpp": "void JS_ReaScriptAPI_Version(double* versionOut)",
      "python": "(Float versionOut) JS_ReaScriptAPI_Version(versionOut)",
      "eel": "extension_api(\"JS_ReaScriptAPI_Version\", &amp;version)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number version  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_ReaScriptAPI_Version",
        "return_values": [{ "identifier": "version", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.971", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier pointer", "description": "" },
        { "identifier": "integer offset", "description": "" },
        { "identifier": "integer lengthChars", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_String(JS)",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.JS_String(identifier pointer, integer offset, integer lengthChars)",
      "cpp": "bool JS_String(void* pointer, int offset, int lengthChars, char* bufOutNeedBig, int bufOutNeedBig_sz)",
      "python": "(Boolean retval, void pointer, Int offset, Int lengthChars, String bufOutNeedBig, Int bufOutNeedBig_sz) = JS_String(pointer, offset, lengthChars, bufOutNeedBig, bufOutNeedBig_sz)",
      "eel": "bool extension_api(\"JS_String\", void* pointer, int offset, int lengthChars, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "pointer", "type": "identifier" },
          { "identifier": "offset", "type": "integer" },
          { "identifier": "lengthChars", "type": "integer" }
        ],
        "method_name": "reaper.JS_String",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.993", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\n\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS\\_Mouse\\_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number cutoffTime", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_VKeys_GetDown(JS)",
    "functioncall": {
      "lua": "string state = reaper.JS_VKeys_GetDown(number cutoffTime)",
      "cpp": "void JS_VKeys_GetDown(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)",
      "python": "(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetDown(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)",
      "eel": "extension_api(\"JS_VKeys_GetDown\", cutoffTime, #state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string state", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "cutoffTime", "type": "number" }],
        "method_name": "reaper.JS_VKeys_GetDown",
        "return_values": [{ "identifier": "state", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "deprecated",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_VKeys_ClearHistory(JS)",
    "functioncall": {
      "lua": "reaper.JS_VKeys_ClearHistory()",
      "cpp": "void JS_VKeys_ClearHistory()",
      "python": "JS_VKeys_ClearHistory()",
      "eel": "extension_api(\"JS_VKeys_ClearHistory\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_VKeys_ClearHistory",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "deprecated",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_VKeys_GetHistory(JS)",
    "functioncall": {
      "lua": "boolean retval, string state = reaper.JS_VKeys_GetHistory()",
      "cpp": "bool JS_VKeys_GetHistory(char* stateOutNeedBig, int* stateOutNeedBig_sz)",
      "python": "(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetHistory(stateOutNeedBig, stateOutNeedBig_sz)",
      "eel": "bool extension_api(\"JS_VKeys_GetHistory\", #state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string state", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_VKeys_GetHistory",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "state", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.993", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\n\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\n\nNotes:\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS\\_Mouse\\_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_VKeys_GetState(JS)",
    "functioncall": {
      "lua": "boolean retval, string state = reaper.JS_VKeys_GetState()",
      "cpp": "bool JS_VKeys_GetState(char* stateOutNeedBig, int* stateOutNeedBig_sz)",
      "python": "(Boolean retval, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetState(stateOutNeedBig, stateOutNeedBig_sz)",
      "eel": "bool extension_api(\"JS_VKeys_GetState\", #state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string state", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_VKeys_GetState",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "state", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\n\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and [JS\\_Mouse\\_GetState](#JS_Mouse_GetState) can be used instead.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number cutoffTime", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_VKeys_GetUp(JS)",
    "functioncall": {
      "lua": "string state = reaper.JS_VKeys_GetUp(number cutoffTime)",
      "cpp": "void JS_VKeys_GetUp(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)",
      "python": "(Float cutoffTime, String stateOutNeedBig, Int stateOutNeedBig_sz) = JS_VKeys_GetUp(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)",
      "eel": "extension_api(\"JS_VKeys_GetUp\", cutoffTime, #state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string state", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "cutoffTime", "type": "number" }],
        "method_name": "reaper.JS_VKeys_GetUp",
        "return_values": [{ "identifier": "state", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh: Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\n\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\n\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1. \nMultiple scripts can block the same key, and the intercept state may reach up to 255. \nIf zero is passed, the intercept state is not changed, but the current state is returned.\n\nReturns: If keyCode refers to a single key, the intercept state of that key is returned. If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer keyCode", "description": "" },
        { "identifier": "integer intercept", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_VKeys_Intercept(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_VKeys_Intercept(integer keyCode, integer intercept)",
      "cpp": "int JS_VKeys_Intercept(int keyCode, int intercept)",
      "python": "Int JS_VKeys_Intercept(Int keyCode, Int intercept)",
      "eel": "int extension_api(\"JS_VKeys_Intercept\", int keyCode, int intercept)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "keyCode", "type": "integer" },
          { "identifier": "intercept", "type": "integer" }
        ],
        "method_name": "reaper.JS_VKeys_Intercept",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Intercepts window messages to specified window.\n\nParameters:\n\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example \"WM_SETCURSOR\" or \"0x0020\".\n\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n\n    For more information on message codes, refer to the Win32 C++ API documentation.\n\n    For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.\n\n\n\nReturns:\n\n * 1: Success.\n\n * 0: The message type is already being intercepted by another script.\n\n * -2: message string could not be parsed.\n\n * -3: Failure getting original window process / window not valid.\n\n * -6: Could not obtain the window client HDC.\n\n\nNotes:\n\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n\n * Mouse events are typically received by the child window under the mouse, not the parent window.\n \n Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string messages", "description": "" },
        { "identifier": "boolean passThrough", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_Intercept(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_WindowMessage_Intercept(identifier windowHWND, string messages, boolean passThrough)",
      "cpp": "int JS_WindowMessage_Intercept(void* windowHWND, const char* messages, bool passThrough)",
      "python": "Int  JS_WindowMessage_Intercept(void windowHWND, String messages, Boolean passThrough)",
      "eel": "int  extension_api(\"JS_WindowMessage_Intercept\", void* windowHWND, \"messages\", bool passThrough)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "messages", "type": "string" },
          { "identifier": "passThrough", "type": "boolean" }
        ],
        "method_name": "reaper.JS_WindowMessage_Intercept",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Intercepts window messages to specified window.\n           \n           \n           \n           Parameters:\n           \n* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a \"block\" or \"passthrough\" modifier to specify whether the message should be blocked or passed through to the window. For example \"WM_SETCURSOR:block, 0x0201:passthrough\".\n           \n   For more information on message codes, refer to the Win32 C++ API documentation.\n           \n   For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.\n           \n           \n           \n           Returns:\n           \n* 1: Success.\n           \n* 0: The message type is already being intercepted by another script.\n           \n* -1: windowHWND is not a valid window.\n           \n* -2: message string could not be parsed.\n           \n* -3: Failure getting original window process.\n           \n* -6: Could not obtain the window client HDC.\n           \n           Notes:\n           \n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n           \n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n           \n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string messages", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_InterceptList(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)",
      "cpp": "int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)",
      "python": "Int  JS_WindowMessage_InterceptList(void windowHWND, String messages)",
      "eel": "int  extension_api(\"JS_WindowMessage_InterceptList\", void* windowHWND, \"messages\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "messages", "type": "string" }
        ],
        "method_name": "reaper.JS_WindowMessage_InterceptList",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a string with a list of all message types currently being intercepted for the specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_ListIntercepts(JS)",
    "functioncall": {
      "lua": "boolean retval, string buf = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND, string buf)",
      "cpp": "bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* buf, int buf_sz)",
      "python": "(Boolean retval, void windowHWND, String buf, Int buf_sz) = JS_WindowMessage_ListIntercepts(windowHWND, buf, buf_sz)",
      "eel": "bool  extension_api(\"JS_WindowMessage_ListIntercepts\", void* windowHWND, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string buf  ", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.JS_WindowMessage_ListIntercepts",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "buf", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.998", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Changes the passthrough setting of a message type that is already being intercepted.\n\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string message", "description": "" },
        { "identifier": "boolean passThrough", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_PassThrough(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)",
      "cpp": "int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)",
      "python": "Int  JS_WindowMessage_PassThrough(void windowHWND, String message, Boolean passThrough)",
      "eel": "int  extension_api(\"JS_WindowMessage_PassThrough\", void* windowHWND, \"message\", bool passThrough)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "message", "type": "string" },
          { "identifier": "passThrough", "type": "boolean" }
        ],
        "method_name": "reaper.JS_WindowMessage_PassThrough",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Polls the state of an intercepted message.\n           \n           \n           \n           Parameters:\n           \n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n           \n(For a list of message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ name.)\n           \n           \n           \n           Returns:\n           \n* A retval of false indicates that the message type is not being intercepted in the specified window.\n           \n* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n           \n* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n           \n* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n           \n* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string message", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_Peek(JS)",
    "functioncall": {
      "lua": "boolean retval, boolean passedThrough, number time, number wParamLow, number wParamHigh, number lParamLow, number lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)",
      "cpp": "bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)",
      "python": "(Boolean retval, void windowHWND, String message, Boolean passedThroughOut, Float timeOut, Int wParamLowOut, Int wParamHighOut, Int lParamLowOut, Int lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)",
      "eel": "bool  extension_api(\"JS_WindowMessage_Peek\", void* windowHWND, \"message\", bool &amp;passedThrough, &amp;time, int &amp;wParamLow, int &amp;wParamHigh, int &amp;lParamLow, int &amp;lParamHigh)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "boolean passedThrough", "description": "" },
        { "identifier": "number time", "description": "" },
        { "identifier": "number wParamLow", "description": "" },
        { "identifier": "number wParamHigh", "description": "" },
        { "identifier": "number lParamLow", "description": "" },
        { "identifier": "number lParamHigh  ", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "message", "type": "string" }
        ],
        "method_name": "reaper.JS_WindowMessage_Peek",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "passedThrough", "type": "boolean" },
          { "identifier": "time", "type": "number" },
          { "identifier": "wParamLow", "type": "number" },
          { "identifier": "wParamHigh", "type": "number" },
          { "identifier": "lParamLow", "type": "number" },
          { "identifier": "lParamHigh", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.998", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\n\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\n\nParameters:\n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string message", "description": "" },
        { "identifier": "number wParam", "description": "" },
        { "identifier": "integer wParamHighWord", "description": "" },
        { "identifier": "number lParam", "description": "" },
        { "identifier": "integer lParamHighWord", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_Post(JS)",
    "functioncall": {
      "lua": "boolean retval = reaper.JS_WindowMessage_Post(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)",
      "cpp": "bool JS_WindowMessage_Post(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)",
      "python": "Boolean JS_WindowMessage_Post(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)",
      "eel": "bool extension_api(\"JS_WindowMessage_Post\", void* windowHWND, \"message\", wParam, int wParamHighWord, lParam, int lParamHighWord)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "message", "type": "string" },
          { "identifier": "wParam", "type": "number" },
          { "identifier": "wParamHighWord", "type": "integer" },
          { "identifier": "lParam", "type": "number" },
          { "identifier": "lParamHighWord", "type": "integer" }
        ],
        "method_name": "reaper.JS_WindowMessage_Post",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Release intercepts of specified message types.\n           \n           Parameters:\n           \n* messages: \"WM_SETCURSOR,WM_MOUSEHWHEEL\" or \"0x0020,0x020E\", for example.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string messages", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_Release(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)",
      "cpp": "int JS_WindowMessage_Release(void* windowHWND, const char* messages)",
      "python": "Int  JS_WindowMessage_Release(void windowHWND, String messages)",
      "eel": "int  extension_api(\"JS_WindowMessage_Release\", void* windowHWND, \"messages\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "messages", "type": "string" }
        ],
        "method_name": "reaper.JS_WindowMessage_Release",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Release script intercepts of window messages for all windows.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_WindowMessage_ReleaseAll(JS)",
    "functioncall": {
      "lua": "reaper.JS_WindowMessage_ReleaseAll()",
      "cpp": "void JS_WindowMessage_ReleaseAll()",
      "python": "JS_WindowMessage_ReleaseAll()",
      "eel": "extension_api(\"JS_WindowMessage_ReleaseAll\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_WindowMessage_ReleaseAll",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Release script intercepts of window messages for specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_ReleaseWindow(JS)",
    "functioncall": {
      "lua": "reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)",
      "cpp": "void JS_WindowMessage_ReleaseWindow(void* windowHWND)",
      "python": "JS_WindowMessage_ReleaseWindow(void windowHWND)",
      "eel": "extension_api(\"JS_WindowMessage_ReleaseWindow\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_WindowMessage_ReleaseWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.998", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\n\nParameters:\n* message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\n\nNotes:\n* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string message", "description": "" },
        { "identifier": "number wParam", "description": "" },
        { "identifier": "integer wParamHighWord", "description": "" },
        { "identifier": "number lParam", "description": "" },
        { "identifier": "integer lParamHighWord", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "JS_WindowMessage_Send(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_WindowMessage_Send(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)",
      "cpp": "int JS_WindowMessage_Send(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)",
      "python": "Int JS_WindowMessage_Send(void windowHWND, String message, Float wParam, Int wParamHighWord, Float lParam, Int lParamHighWord)",
      "eel": "int extension_api(\"JS_WindowMessage_Send\", void* windowHWND, \"message\", wParam, int wParamHighWord, lParam, int lParamHighWord)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "message", "type": "string" },
          { "identifier": "wParam", "type": "number" },
          { "identifier": "wParamHighWord", "type": "integer" },
          { "identifier": "lParam", "type": "number" },
          { "identifier": "lParamHighWord", "type": "integer" }
        ],
        "method_name": "reaper.JS_WindowMessage_Send",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier handle", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_AddressFromHandle(JS)",
    "functioncall": {
      "lua": "number address = reaper.JS_Window_AddressFromHandle(identifier handle)",
      "cpp": "void JS_Window_AddressFromHandle(void* handle, double* addressOut)",
      "python": "(void handle, Float addressOut) = JS_Window_AddressFromHandle(handle, addressOut)",
      "eel": "extension_api(\"JS_Window_AddressFromHandle\", void* handle, &amp;address)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number address  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "handle", "type": "identifier" }],
        "method_name": "reaper.JS_Window_AddressFromHandle",
        "return_values": [{ "identifier": "address", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns all child windows of the specified parent.\n           \n           \n           \n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier parentHWND", "description": "" },
        { "identifier": "identifier reaperarray", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ArrayAllChild(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)",
      "cpp": "void JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)",
      "python": "JS_Window_ArrayAllChild(void parentHWND, void reaperarray)",
      "eel": "extension_api(\"JS_Window_ArrayAllChild\", void* parentHWND, void* reaperarray)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "parentHWND", "type": "identifier" },
          { "identifier": "reaperarray", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_ArrayAllChild",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns all top-level windows.\n           \n           \n           \n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier reaperarray", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ArrayAllTop(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_ArrayAllTop(identifier reaperarray)",
      "cpp": "void JS_Window_ArrayAllTop(void* reaperarray)",
      "python": "JS_Window_ArrayAllTop(void reaperarray)",
      "eel": "extension_api(\"JS_Window_ArrayAllTop\", void* reaperarray)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaperarray", "type": "identifier" }],
        "method_name": "reaper.JS_Window_ArrayAllTop",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns all windows, whether top-level or child, whose titles match the specified string.\n           \n           \n           \n           The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n           \n           \n           \n           Parameters: * exact: Match entire title exactly, or match substring of title.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string title", "description": "" },
        { "identifier": "boolean exact", "description": "" },
        { "identifier": "identifier reaperarray", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ArrayFind(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)",
      "cpp": "void JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)",
      "python": "JS_Window_ArrayFind(String title, Boolean exact, void reaperarray)",
      "eel": "extension_api(\"JS_Window_ArrayFind\", \"title\", bool exact, void* reaperarray)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "title", "type": "string" },
          { "identifier": "exact", "type": "boolean" },
          { "identifier": "reaperarray", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_ArrayFind",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_AttachResizeGrip(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_AttachResizeGrip(identifier windowHWND)",
      "cpp": "void JS_Window_AttachResizeGrip(void* windowHWND)",
      "python": "JS_Window_AttachResizeGrip(void windowHWND)",
      "eel": "extension_api(\"JS_Window_AttachResizeGrip\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_AttachResizeGrip",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.988", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Attaches a \"pin on top\" button to the window frame. The button should remember its state when closing and re-opening the window.\n\nWARNING: This function does not yet work on Linux.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_AttachTopmostPin(JS)",
    "functioncall": {
      "lua": "identifier HWND = reaper.JS_Window_AttachTopmostPin(identifier windowHWND)",
      "cpp": "void* JS_Window_AttachTopmostPin(void* windowHWND)",
      "python": "void JS_Window_AttachTopmostPin(void windowHWND)",
      "eel": "void extension_api(\"JS_Window_AttachTopmostPin\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier HWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_AttachTopmostPin",
        "return_values": [{ "identifier": "HWND", "type": "identifier" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts the client-area coordinates of a specified point to screen coordinates.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ClientToScreen(JS)",
    "functioncall": {
      "lua": "number x, number y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)",
      "cpp": "void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)",
      "python": "(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)",
      "eel": "extension_api(\"JS_Window_ClientToScreen\", void* windowHWND, int x, int y, int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number x", "description": "" },
        { "identifier": "number y  ", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_ClientToScreen",
        "return_values": [
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.995", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Creates a modeless window with WS\\_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS\\_Window\\_InvalidateRect to trigger re-painting).\n\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\n\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\n\nclassName: On Windows, only standard ANSI characters are supported.\n\nownerHWND: Optional parameter, only available on WindowsOS. Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\n\nNOTE: On Linux and macOS, the window contents are only updated \\*between\\* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string title", "description": "" },
        { "identifier": "string className", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer w", "description": "" },
        { "identifier": "integer h", "description": "" },
        { "identifier": "optional string style", "description": "" },
        { "identifier": "identifier ownerHWND", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Create(JS)",
    "functioncall": {
      "lua": "identifier retval, optional string style = reaper.JS_Window_Create(string title, string className, integer x, integer y, integer w, integer h, optional string style, identifier ownerHWND)",
      "cpp": "void* JS_Window_Create(const char* title, const char* className, int x, int y, int w, int h, char* styleOptional, void* ownerHWNDOptional)",
      "python": "(void retval, String title, String className, Int x, Int y, Int w, Int h, String styleOptional, void ownerHWNDOptional) = JS_Window_Create(title, className, x, y, w, h, styleOptional, ownerHWNDOptional)",
      "eel": "void* extension_api(\"JS_Window_Create\", \"title\", \"className\", int x, int y, int w, int h, optional #style, void* ownerHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier retval", "description": "" },
        { "identifier": "optional string style", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "title", "type": "string" },
          { "identifier": "className", "type": "string" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "ownerHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_Create",
        "return_values": [
          { "identifier": "retval", "type": "identifier" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Destroys the specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Destroy(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Destroy(identifier windowHWND)",
      "cpp": "void JS_Window_Destroy(void* windowHWND)",
      "python": "JS_Window_Destroy(void windowHWND)",
      "eel": "extension_api(\"JS_Window_Destroy\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_Destroy",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Enables or disables mouse and keyboard input to the specified window or control.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "boolean enable", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Enable(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Enable(identifier windowHWND, boolean enable)",
      "cpp": "void JS_Window_Enable(void* windowHWND, bool enable)",
      "python": "JS_Window_Enable(void windowHWND, Boolean enable)",
      "eel": "extension_api(\"JS_Window_Enable\", void* windowHWND, bool enable)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "enable", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_Enable",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.000", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On macOS, returns the Metal graphics setting:\n\t\t\t2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n\t\t\t1 = Metal enabled.\n\t\t\t0 = N/A (Windows and Linux).\n\t\t\t-1 = non-metal async layered mode.\n\t\t\t-2 = non-metal non-async layered mode.\n\n\t\t\tWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_EnableMetal(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_Window_EnableMetal(identifier windowHWND)",
      "cpp": "int retval = JS_Window_EnableMetal(void* windowHWND)",
      "python": "Int retval = JS_Window_EnableMetal(void windowHWND)",
      "eel": "int retval = extension_api(\"JS_Window_EnableMetal\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_EnableMetal",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.989", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a HWND to a window whose title matches the specified string.\n\\* Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n\\* In addition, the function can optionally match substrings of the title.\n\\* Matching is not case sensitive.\n\nParameters:\n\\* exact: Match entire title, or match substring of title.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string title", "description": "the title of the window to find" },
        {
          "identifier": "boolean exact",
          "description": "true, title must match exactly the name of the window; false, title can only partially match the windowtitle "
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Find(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_Find(string title, boolean exact)",
      "cpp": "void* JS_Window_Find(const char* title, bool exact)",
      "python": "void  JS_Window_Find(String title, Boolean exact)",
      "eel": "void*  extension_api(\"JS_Window_Find\", \"title\", bool exact)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier ", "description": "the identifier of the found window, or nil" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "title", "type": "string" },
          { "identifier": "exact", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_Find",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.990", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a HWND to a child window whose title matches the specified string.\n\nParameters:\n\n \\* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier parentHWND",
          "description": "the identifier of the parent window to the child-window"
        },
        { "identifier": "string title", "description": "the title of the child-window to find" },
        {
          "identifier": "boolean exact",
          "description": "true, title must match exactly the name of the window; false, title can only partially match the windowtitle "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_FindChild(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)",
      "cpp": "void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)",
      "python": "void  JS_Window_FindChild(void parentHWND, String title, Boolean exact)",
      "eel": "void*  extension_api(\"JS_Window_FindChild\", void* parentHWND, \"title\", bool exact)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier ",
          "description": "the identifier for the window found; nil, if no such window found"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "parentHWND", "type": "identifier" },
          { "identifier": "title", "type": "string" },
          { "identifier": "exact", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_FindChild",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n\n(The ID of a window may be retrieved by JS\\_Window\\_GetLongPtr.)\n\nFor instance: with Reaper's [MainHWND](#GetMainHwnd), you can get:\n    0: Transport(Windows)/MainHWND(Mac)\n    999: project-tabs(if existing, otherwise will be nil)\n    1000: trackview\n    1005: timeline\n    1259: Mouse editing help in the area beneath the track control panels",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier parentHWND",
          "description": "the parent HWND, whose child-HWNDs you want to search through"
        },
        { "identifier": "integer ID", "description": "the ID of the childHWND" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_FindChildByID(JS)",
    "functioncall": {
      "lua": "identifier HWND = reaper.JS_Window_FindChildByID(identifier parentHWND, integer ID)",
      "cpp": "void* JS_Window_FindChildByID(void* parentHWND, int ID)",
      "python": "void JS_Window_FindChildByID(void parentHWND, Int ID)",
      "eel": "void* extension_api(\"JS_Window_FindChildByID\", void* parentHWND, int ID)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier HWND",
          "description": "the HWND of the window, that the function found"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "parentHWND", "type": "identifier" },
          { "identifier": "ID", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_FindChildByID",
        "return_values": [{ "identifier": "HWND", "type": "identifier" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.964", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a handle to a child window whose class and title match the specified strings.\n\nParameters: \\* childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n\\* title: An empty string, \"\", will match all windows. (Search is not case sensitive.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier parentHWND",
          "description": "the parent hwnd of the child-window to find"
        },
        {
          "identifier": "identifier childHWND",
          "description": "the parent child-window of the window to find; set it to parentHWND to search beginning with the first childhwnd of the parenthwnd"
        },
        {
          "identifier": "string className",
          "description": "the name of the class of the child-window, that you want to find"
        },
        { "identifier": "string title", "description": "the title of the child-window to find" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_FindEx(JS)",
    "functioncall": {
      "lua": "identifier HWND - reaper.JS_Window_FindEx(identifier parentHWND, identifier childHWND, string className, string title)",
      "cpp": "void* JS_Window_FindEx(void* parentHWND, void* childHWND, const char* className, const char* title)",
      "python": "void JS_Window_FindEx(void parentHWND, void childHWND, String className, String title)",
      "eel": "void* extension_api(\"JS_Window_FindEx\", void* parentHWND, void* childHWND, \"className\", \"title\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier HWND",
          "description": "the found window; nil, if no window has been found"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "HWND", "type": "identifier" },
          { "identifier": "parentHWND", "type": "identifier" },
          { "identifier": "childHWND", "type": "identifier" },
          { "identifier": "className", "type": "string" },
          { "identifier": "title", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_FindEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.989", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a HWND to a top-level window whose title matches the specified string.\n\nParameters:\n\\* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string title",
          "description": "the title of the top-level window to find"
        },
        {
          "identifier": "boolean exact",
          "description": "true, title must match exactly the name of the window; false, title can only partially match the windowtitle "
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_FindTop(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_FindTop(string title, boolean exact)",
      "cpp": "void* JS_Window_FindTop(const char* title, bool exact)",
      "python": "void JS_Window_FindTop(String title, Boolean exact)",
      "eel": "void* extension_api(\"JS_Window_FindTop\", \"title\", bool exact)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier HWND",
          "description": "the found identifier of the window; nil, if not found"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "title", "type": "string" },
          { "identifier": "exact", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_FindTop",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a HWND to the window that contains the specified point.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x-position in pixels, at which to find the window"
        },
        {
          "identifier": "integer y",
          "description": "the y-position in pixels, at which to find the window"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_FromPoint(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_FromPoint(integer x, integer y)",
      "cpp": "void* JS_Window_FromPoint(int x, int y)",
      "python": "void  JS_Window_FromPoint(Int x, Int y)",
      "eel": "void*  extension_api(\"JS_Window_FromPoint\", int x, int y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier ", "description": "the window found at the coordinates" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_FromPoint",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "WARNING: May not be fully implemented on MacOS and Linux.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string buf", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetClassName(JS)",
    "functioncall": {
      "lua": "string buf = reaper.JS_Window_GetClassName(identifier windowHWND, string buf)",
      "cpp": "void JS_Window_GetClassName(void* windowHWND, char* buf, int buf_sz)",
      "python": "(void windowHWND, String buf, Int buf_sz) = JS_Window_GetClassName(windowHWND, buf, buf_sz)",
      "eel": "extension_api(\"JS_Window_GetClassName\", void* windowHWND, #buf)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string buf  ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "buf", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_GetClassName",
        "return_values": [{ "identifier": "buf", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the coordinates of the client area rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.\n           \n           NOTE 1: Unlike the C++ function GetClientRect, this function returns the actual coordinates, not the width and height.\n           \n           NOTE 2: The pixel at (right, bottom) lies immediately outside the rectangle.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetClientRect(JS)",
    "functioncall": {
      "lua": "boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)",
      "cpp": "bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)",
      "eel": "bool  extension_api(\"JS_Window_GetClientRect\", void* windowHWND, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom  ", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetClientRect",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.215", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetClientSize(JS)",
    "functioncall": {
      "lua": "boolean retval, number width, number height = reaper.JS_Window_GetClientSize(identifier windowHWND)",
      "cpp": "bool JS_Window_GetClientSize(void* windowHWND, int* widthOut, int* heightOut)",
      "python": "(Boolean retval, void windowHWND, Int widthOut, Int heightOut) = JS_Window_GetClientSize(windowHWND, widthOut, heightOut)",
      "eel": "bool extension_api(\"JS_Window_GetClientSize\", void* windowHWND, int &width, int &height)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number width", "description": "" },
        { "identifier": "number height", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetClientSize",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "width", "type": "number" },
          { "identifier": "height", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_Window_GetFocus(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_GetFocus()",
      "cpp": "void* JS_Window_GetFocus()",
      "python": "void  JS_Window_GetFocus()",
      "eel": "void*  extension_api(\"JS_Window_GetFocus\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetFocus",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.002", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_Window_GetForeground(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_GetForeground()",
      "cpp": "void* JS_Window_GetForeground()",
      "python": "void  JS_Window_GetForeground()",
      "eel": "void*  extension_api(\"JS_Window_GetForeground\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetForeground",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.010", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "In the case of \"DLGPROC\" and \"WNDPROC\", the return values can be converted to pointers by [JS\\_Window\\_HandleFromAddress](#JS_Window_HandleFromAddress).\n\n\t\t   If the function fails, the return value is 0.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string info", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetLong(JS)",
    "functioncall": {
      "lua": "number retval = reaper.JS_Window_GetLong(identifier windowHWND, string info)",
      "cpp": "void JS_Window_GetLong(void* windowHWND, const char* info, double* retvalOut)",
      "python": "(void windowHWND, String info, Float retvalOut) = JS_Window_GetLong(windowHWND, info, retvalOut)",
      "eel": "extension_api(\"JS_Window_GetLong\", void* windowHWND, \"info\", &retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "info", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_GetLong",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.010", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns information about the specified window.\n           \n           \n           \n           info: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\".\n           \n           \n           \n           For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\n\t\t   The values returned by \"DLGPROC\" and \"WNDPROC\" are typically used as-is, as pointers, whereas the others should first be converted to integers.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string info", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetLongPtr(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)",
      "cpp": "void* JS_Window_GetLongPtr(void* windowHWND, const char* info)",
      "python": "void  JS_Window_GetLongPtr(void windowHWND, String info)",
      "eel": "void*  extension_api(\"JS_Window_GetLongPtr\", void* windowHWND, \"info\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "info", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_GetLongPtr",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a HWND to the specified window's parent or owner.\n           \n           Returns NULL if the window is unowned or if the function otherwise fails.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetParent(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_GetParent(identifier windowHWND)",
      "cpp": "void* JS_Window_GetParent(void* windowHWND)",
      "python": "void  JS_Window_GetParent(void windowHWND)",
      "eel": "void*  extension_api(\"JS_Window_GetParent\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "windowHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_GetParent",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the coordinates of the bounding rectangle of the specified window. The dimensions are given in screen coordinates relative to the upper-left corner of the screen.\n           \n           NOTE: The pixel at (right, bottom) lies immediately outside the rectangle.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetRect(JS)",
    "functioncall": {
      "lua": "boolean retval, number left, number top, number right, number bottom = reaper.JS_Window_GetRect(identifier windowHWND)",
      "cpp": "bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Boolean retval, void windowHWND, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)",
      "eel": "bool  extension_api(\"JS_Window_GetRect\", void* windowHWND, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom  ", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetRect",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\n           \n           relation: \"LAST\", \"NEXT\", \"PREV\", \"OWNER\" or \"CHILD\".\n           \n           (Refer to documentation for Win32 C++ function GetWindow.)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string relation", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetRelated(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_GetRelated(identifier windowHWND, string relation)",
      "cpp": "void* JS_Window_GetRelated(void* windowHWND, const char* relation)",
      "python": "void  JS_Window_GetRelated(void windowHWND, String relation)",
      "eel": "void*  extension_api(\"JS_Window_GetRelated\", void* windowHWND, \"relation\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "relation", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_GetRelated",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the scroll information of a window.\n           \n           \n           \n           Parameters:\n           \n\\* scrollbar: \"v\" (or \"SB\\_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB\\_HORZ\" or \"HORZ\") for horizontal.\n           \n           \n           \n           Returns:\n           \n\\* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string scrollbar", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetScrollInfo(JS)",
    "functioncall": {
      "lua": "boolean retval, number position, number pageSize, number min, number max, number trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)",
      "cpp": "bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)",
      "python": "(Boolean retval, void windowHWND, String scrollbar, Int positionOut, Int pageSizeOut, Int minOut, Int maxOut, Int trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)",
      "eel": "bool  extension_api(\"JS_Window_GetScrollInfo\", void* windowHWND, \"scrollbar\", int &amp;position, int &amp;pageSize, int &amp;min, int &amp;max, int &amp;trackPos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number position", "description": "" },
        { "identifier": "number pageSize", "description": "" },
        { "identifier": "number min", "description": "" },
        { "identifier": "number max", "description": "" },
        { "identifier": "number trackPos  ", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "scrollbar", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_GetScrollInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "position", "type": "number" },
          { "identifier": "pageSize", "type": "number" },
          { "identifier": "min", "type": "number" },
          { "identifier": "max", "type": "number" },
          { "identifier": "trackPos", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.992", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the title (if any) of the specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "identifier windowHWND",
          "description": "the hwnd of the window, whose title you want to retrieve"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetTitle(JS)",
    "functioncall": {
      "lua": "string title = reaper.JS_Window_GetTitle(identifier windowHWND)",
      "cpp": "void JS_Window_GetTitle(void* windowHWND, char* titleOut, int titleOut_sz)",
      "python": "(void windowHWND, String titleOut, Int titleOut_sz) = JS_Window_GetTitle(windowHWND, titleOut, titleOut_sz)",
      "eel": "extension_api(\"JS_Window_GetTitle\", void* windowHWND, #title)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string title", "description": "the title of the window" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_GetTitle",
        "return_values": [{ "identifier": "title", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\n\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\n\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x1", "description": "" },
        { "identifier": "integer y1", "description": "" },
        { "identifier": "integer x2", "description": "" },
        { "identifier": "integer y2", "description": "" },
        { "identifier": "boolean wantWork", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_GetViewportFromRect(JS)",
    "functioncall": {
      "lua": "number left, number top, number right, number bottom = reaper.JS_Window_GetViewportFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)",
      "cpp": "void JS_Window_GetViewportFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_GetViewportFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)",
      "eel": "extension_api(\"JS_Window_GetViewportFromRect\", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" },
          { "identifier": "wantWork", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_GetViewportFromRect",
        "return_values": [
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number address", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_HandleFromAddress(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_HandleFromAddress(number address)",
      "cpp": "void* JS_Window_HandleFromAddress(double address)",
      "python": "void  JS_Window_HandleFromAddress(Float address)",
      "eel": "void*  extension_api(\"JS_Window_HandleFromAddress\", address)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "address", "type": "number" }
        ],
        "method_name": "reaper.JS_Window_HandleFromAddress",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Similar to the Win32 function InvalidateRect.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer right", "description": "" },
        { "identifier": "integer bottom", "description": "" },
        { "identifier": "boolean eraseBackground", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_InvalidateRect(JS)",
    "functioncall": {
      "lua": "boolean retval = reaper.JS_Window_InvalidateRect(identifier windowHWND, integer left, integer top, integer right, integer bottom, boolean eraseBackground)",
      "cpp": "bool JS_Window_InvalidateRect(void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)",
      "python": "Boolean JS_Window_InvalidateRect(void windowHWND, Int left, Int top, Int right, Int bottom, Boolean eraseBackground)",
      "eel": "bool extension_api(\"JS_Window_InvalidateRect\", void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "right", "type": "integer" },
          { "identifier": "bottom", "type": "integer" },
          { "identifier": "eraseBackground", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_InvalidateRect",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Determines whether a window is a child window or descendant window of a specified parent window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier parentHWND", "description": "" },
        { "identifier": "identifier childHWND", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_IsChild(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)",
      "cpp": "bool JS_Window_IsChild(void* parentHWND, void* childHWND)",
      "python": "Boolean  JS_Window_IsChild(void parentHWND, void childHWND)",
      "eel": "bool  extension_api(\"JS_Window_IsChild\", void* parentHWND, void* childHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "parentHWND", "type": "identifier" },
          { "identifier": "childHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_IsChild",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Determines the visibility state of the window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_IsVisible(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_IsVisible(identifier windowHWND)",
      "cpp": "bool JS_Window_IsVisible(void* windowHWND)",
      "python": "Boolean  JS_Window_IsVisible(void windowHWND)",
      "eel": "bool  extension_api(\"JS_Window_IsVisible\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_IsVisible",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.999", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Determines whether the specified window handle identifies an existing window.\n\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\n\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, \"HWND\").",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_IsWindow(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_IsWindow(identifier windowHWND)",
      "cpp": "bool JS_Window_IsWindow(void* windowHWND)",
      "python": "Boolean  JS_Window_IsWindow(void windowHWND)",
      "eel": "bool  extension_api(\"JS_Window_IsWindow\", void* windowHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_IsWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Finds all child windows of the specified parent.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier parentHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ListAllChild(JS)",
    "functioncall": {
      "lua": "integer retval, string list = reaper.JS_Window_ListAllChild(identifier parentHWND)",
      "cpp": "int JS_Window_ListAllChild(void* parentHWND, char* listOutNeedBig, int listOutNeedBig_sz)",
      "python": "(Int retval, void parentHWND, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllChild(parentHWND, listOutNeedBig, listOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Window_ListAllChild\", void* parentHWND, #list)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string list", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "parentHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_ListAllChild",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "list", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Finds all top-level windows.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "JS_Window_ListAllTop(JS)",
    "functioncall": {
      "lua": "integer retval, string list = reaper.JS_Window_ListAllTop()",
      "cpp": "int JS_Window_ListAllTop(char* listOutNeedBig, int listOutNeedBig_sz)",
      "python": "(Int retval, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListAllTop(listOutNeedBig, listOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Window_ListAllTop\", #list)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string list", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.JS_Window_ListAllTop",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "list", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Finds all windows (whether top-level or child) whose titles match the specified string.\n\nReturns:\n\\* retval: The number of windows found; negative if an error occurred.\n\\* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function JS\\_Window\\_HandleFromAddress.\n\nParameters:\n\\* exact: Match entire title exactly, or match substring of title.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string title", "description": "" },
        { "identifier": "boolean exact", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ListFind(JS)",
    "functioncall": {
      "lua": "integer retval, string list = reaper.JS_Window_ListFind(string title, boolean exact)",
      "cpp": "int JS_Window_ListFind(const char* title, bool exact, char* listOutNeedBig, int listOutNeedBig_sz)",
      "python": "(Int retval, String title, Boolean exact, String listOutNeedBig, Int listOutNeedBig_sz) = JS_Window_ListFind(title, exact, listOutNeedBig, listOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Window_ListFind\", \"title\", bool exact, #list)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string list", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "title", "type": "string" },
          { "identifier": "exact", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_ListFind",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "list", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated - use [GetViewportFromRect](#GetViewportFromRect) instead.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x1", "description": "" },
        { "identifier": "integer y1", "description": "" },
        { "identifier": "integer x2", "description": "" },
        { "identifier": "integer y2", "description": "" },
        { "identifier": "boolean wantWork", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_MonitorFromRect(JS)",
    "functioncall": {
      "lua": "number left, number top, number right, number bottom = reaper.JS_Window_MonitorFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)",
      "cpp": "void JS_Window_MonitorFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Int x1, Int y1, Int x2, Int y2, Boolean wantWork, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_Window_MonitorFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)",
      "eel": "extension_api(\"JS_Window_MonitorFromRect\", int x1, int y1, int x2, int y2, bool wantWork, int &left, int &top, int &right, int &bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" },
          { "identifier": "wantWork", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_MonitorFromRect",
        "return_values": [
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.993", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Changes the position of the specified window, keeping its size constant.\n\nNOTES:\n* For top-level windows, position is relative to the primary display.\n* On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n* Equivalent to calling [JS\\_Window\\_SetPosition](#JS_Window_SetPosition) with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Move(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)",
      "cpp": "void JS_Window_Move(void* windowHWND, int left, int top)",
      "python": "JS_Window_Move(void windowHWND, Int left, Int top)",
      "eel": "extension_api(\"JS_Window_Move\", void* windowHWND, int left, int top)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_Move",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sends a \"WM\\_COMMAND\" message to the specified window, which simulates a user selecting a command in the window menu.\n\nThis function is similar to Main\\_OnCommand and MIDIEditor\\_OnCommand, but can send commands to any window that has a menu.\n\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer commandID", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_OnCommand(JS)",
    "functioncall": {
      "lua": "boolean retval = reaper.JS_Window_OnCommand(identifier windowHWND, integer commandID)",
      "cpp": "bool JS_Window_OnCommand(void* windowHWND, int commandID)",
      "python": "Boolean JS_Window_OnCommand(void windowHWND, Int commandID)",
      "eel": "bool extension_api(\"JS_Window_OnCommand\", void* windowHWND, int commandID)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "commandID", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_OnCommand",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "deprecated, removed from JS_0.952 and later",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "boolean remove", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_RemoveXPStyle(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_RemoveXPStyle(identifier windowHWND, boolean remove)",
      "cpp": "bool JS_Window_RemoveXPStyle(void* windowHWND, bool remove)",
      "python": "Boolean  JS_Window_RemoveXPStyle(void windowHWND, Boolean remove)",
      "eel": "bool  extension_api(\"JS_Window_RemoveXPStyle\", void* windowHWND, bool remove)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "remove", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Window_RemoveXPStyle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.993", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n           \n* If resizing script GUIs, call gfx.update() after resizing.\n\n* Equivalent to calling [JS\\_Window\\_SetPosition](#JS_Window_SetPosition) with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Resize(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)",
      "cpp": "void JS_Window_Resize(void* windowHWND, int width, int height)",
      "python": "JS_Window_Resize(void windowHWND, Int width, Int height)",
      "eel": "extension_api(\"JS_Window_Resize\", void* windowHWND, int width, int height)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_Resize",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_ScreenToClient(JS)",
    "functioncall": {
      "lua": "number x, number y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)",
      "cpp": "void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)",
      "python": "(void windowHWND, Int x, Int y, Int xOut, Int yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)",
      "eel": "extension_api(\"JS_Window_ScreenToClient\", void* windowHWND, int x, int y, int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number x", "description": "" },
        { "identifier": "number y  ", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_ScreenToClient",
        "return_values": [
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the keyboard focus to the specified window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetFocus(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_SetFocus(identifier windowHWND)",
      "cpp": "void JS_Window_SetFocus(void* windowHWND)",
      "python": "JS_Window_SetFocus(void windowHWND)",
      "eel": "extension_api(\"JS_Window_SetFocus\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_SetFocus",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetForeground(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_SetForeground(identifier windowHWND)",
      "cpp": "void JS_Window_SetForeground(void* windowHWND)",
      "python": "JS_Window_SetForeground(void windowHWND)",
      "eel": "extension_api(\"JS_Window_SetForeground\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_SetForeground",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.990", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Similar to the Win32 function SetWindowLongPtr. \n\ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\", and only on WindowOS, \"INSTANCE\" and \"PARENT\".",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string info", "description": "" },
        { "identifier": "number value", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetLong(JS)",
    "functioncall": {
      "lua": "number retval = reaper.JS_Window_SetLong(identifier windowHWND, string info, number value)",
      "cpp": "void JS_Window_SetLong(void* windowHWND, const char* info, double value, double* retvalOut)",
      "python": "(void windowHWND, String info, Float value, Float retvalOut) = JS_Window_SetLong(windowHWND, info, value, retvalOut)",
      "eel": "extension_api(\"JS_Window_SetLong\", void* windowHWND, \"info\", value, &retval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "info", "type": "string" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.JS_Window_SetLong",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.990", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the window opacity.\n\nParameters:  \nmode: either \"ALPHA\" or \"COLOR\".  \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.  \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  \n\nWARNING: COLOR mode is only available in Windows, not Linux or macOS.\n\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.  ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string mode", "description": "" },
        { "identifier": "number value", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetOpacity(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)",
      "cpp": "bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)",
      "python": "Boolean JS_Window_SetOpacity(void windowHWND, String mode, Float value)",
      "eel": "bool extension_api(\"JS_Window_SetOpacity\", void* windowHWND, \"mode\", value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "mode", "type": "string" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.JS_Window_SetOpacity",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.998", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If successful, returns a handle to the previous parent window.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier childHWND", "description": "" },
        { "identifier": "identifier parentHWND", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetParent(JS)",
    "functioncall": {
      "lua": "identifier reaper.JS_Window_SetParent(identifier childHWND, identifier parentHWND)",
      "cpp": "void* JS_Window_SetParent(void* childHWND, void* parentHWND)",
      "python": "void JS_Window_SetParent(void childHWND, void parentHWND)",
      "eel": "void* extension_api(\"JS_Window_SetParent\", void* childHWND, void* parentHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier Identifier ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "childHWND", "type": "identifier" },
          { "identifier": "parentHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_SetParent",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.991", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\n\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n\\* ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\" or a window HWND converted to a string, for example by the Lua function tostring.\n\\* flags: Any combination of the standard flags, of which \"NOMOVE\", \"NOSIZE\", \"NOZORDER\", \"NOACTIVATE\", \"SHOWWINDOW\", \"FRAMECHANGED\" and \"NOCOPYBITS\" should be valid cross-platform.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "integer left", "description": "" },
        { "identifier": "integer top", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" },
        { "identifier": "optional string ZOrder", "description": "" },
        { "identifier": "optional string flags", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetPosition(JS)",
    "functioncall": {
      "lua": "boolean retval, optional string ZOrder, optional string flags = reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height, optional string ZOrder, optional string flags)",
      "cpp": "bool JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height, char* ZOrderOptional, char* flagsOptional)",
      "python": "(Boolean retval, void windowHWND, Int left, Int top, Int width, Int height, String ZOrderOptional, String flagsOptional) = JS_Window_SetPosition(windowHWND, left, top, width, height, ZOrderOptional, flagsOptional)",
      "eel": "bool extension_api(\"JS_Window_SetPosition\", void* windowHWND, int left, int top, int width, int height, optional #ZOrder, optional #flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "optional string ZOrder", "description": "" },
        { "identifier": "optional string flags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "left", "type": "integer" },
          { "identifier": "top", "type": "integer" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "string", "type": "optional" }
        ],
        "method_name": "reaper.JS_Window_SetPosition",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "string", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Parameters:\n           \n* scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\n           \n           \n           \n           NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as \"View: Zoom to one loop iteration\".",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string scrollbar", "description": "" },
        { "identifier": "integer position", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetScrollPos(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)",
      "cpp": "bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)",
      "python": "Boolean  JS_Window_SetScrollPos(void windowHWND, String scrollbar, Int position)",
      "eel": "bool  extension_api(\"JS_Window_SetScrollPos\", void* windowHWND, \"scrollbar\", int position)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "scrollbar", "type": "string" },
          { "identifier": "position", "type": "integer" }
        ],
        "method_name": "reaper.JS_Window_SetScrollPos",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.991", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets and applies a window style.\n\nstyle may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\n\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string style", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetStyle(JS)",
    "functioncall": {
      "lua": "boolean retval, string style = reaper.JS_Window_SetStyle(identifier windowHWND, string style)",
      "cpp": "bool JS_Window_SetStyle(void* windowHWND, char* style)",
      "python": "(Boolean retval, void windowHWND, String style) = JS_Window_SetStyle(windowHWND, style)",
      "eel": "bool extension_api(\"JS_Window_SetStyle\", void* windowHWND, #style)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string style", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "style", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_SetStyle",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "style", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Changes the title of the specified window. Returns true if successful.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string title", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetTitle(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_SetTitle(identifier windowHWND, string title)",
      "cpp": "bool JS_Window_SetTitle(void* windowHWND, const char* title)",
      "python": "Boolean  JS_Window_SetTitle(void windowHWND, String title)",
      "eel": "bool  extension_api(\"JS_Window_SetTitle\", void* windowHWND, \"title\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "title", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_SetTitle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.991", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the window Z order.\n* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n* Not all the Z orders have been implemented in Linux yet.\n\nParameters:\n* ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\", or a window HWND converted to a string, for example by the Lua function tostring.\n\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is \"INSERTAFTER\", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string ZOrder", "description": "" },
        { "identifier": "identifier insertAfterHWND", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_SetZOrder(JS)",
    "functioncall": {
      "lua": "boolean reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)",
      "cpp": "bool JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWND)",
      "python": "Boolean JS_Window_SetZOrder(void windowHWND, String ZOrder, void insertAfterHWND)",
      "eel": "bool extension_api(\"JS_Window_SetZOrder\", void* windowHWND, \"ZOrder\", void* insertAfterHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "ZOrder", "type": "string" },
          { "identifier": "insertAfterHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_Window_SetZOrder",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.991", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the specified window's show state.\n\nParameters:\n\\* state: One of the following options: \"SHOW\", \"SHOWNA\" (or \"SHOWNOACTIVATE\"), \"SHOWMINIMIZED\", \"HIDE\", \"NORMAL\", \"SHOWNORMAL\", \"SHOWMAXIMIZED\", \"SHOWDEFAULT\" or \"RESTORE\".\n\nOn Linux and macOS, only the first four options are fully implemented.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier windowHWND", "description": "" },
        { "identifier": "string state", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Show(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Show(identifier windowHWND, string state)",
      "cpp": "void JS_Window_Show(void* windowHWND, const char* state)",
      "python": "JS_Window_Show(void windowHWND, String state)",
      "eel": "extension_api(\"JS_Window_Show\", void* windowHWND, \"state\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowHWND", "type": "identifier" },
          { "identifier": "state", "type": "string" }
        ],
        "method_name": "reaper.JS_Window_Show",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.980", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Similar to the Win32 function UpdateWindow.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier windowHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_Window_Update(JS)",
    "functioncall": {
      "lua": "reaper.JS_Window_Update(identifier windowHWND)",
      "cpp": "void JS_Window_Update(void* windowHWND)",
      "python": "JS_Window_Update(void windowHWND)",
      "eel": "extension_api(\"JS_Window_Update\", void* windowHWND)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "windowHWND", "type": "identifier" }],
        "method_name": "reaper.JS_Window_Update",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.962", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": ["select", "folder", "dialog"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "retval is 1 if a folder was selected, 0 if the user canceled the dialog, and -1 if an error occurred.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string caption",
          "description": "the captiontext for the folder-selection dialog"
        },
        {
          "identifier": "string initialFolder",
          "description": "the path to the folder, which shall be highlighted initially"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_Dialog_BrowseForFolder(JS)",
    "functioncall": {
      "lua": "integer retval, string folder = reaper.JS_Dialog_BrowseForFolder(string caption, string initialFolder)",
      "cpp": "int JS_Dialog_BrowseForFolder(const char* caption, const char* initialFolder, char* folderOutNeedBig, int folderOutNeedBig_sz)",
      "python": "(Int retval, String caption, String initialFolder, String folderOutNeedBig, Int folderOutNeedBig_sz) = JS_Dialog_BrowseForFolder(caption, initialFolder, folderOutNeedBig, folderOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Dialog_BrowseForFolder\", \"caption\", \"initialFolder\", #folder)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, no folder was selected(user hit cancel-button); 1, folder was selected; -1, in case of an error"
        },
        { "identifier": "string folder", "description": "the path to the folder that was selected" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "caption", "type": "string" },
          { "identifier": "initialFolder", "type": "string" }
        ],
        "method_name": "reaper.JS_Dialog_BrowseForFolder",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "folder", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": ["select", "select", "file", "filenames", "path", "dialog"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If allowMultiple is true, multiple files may be selected. The returned string is \\0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n* On macOS, the first substring may be empty, and each file name will then contain its entire path.\n* This function only allows selection of existing files, and does not allow creation of new files.\n\nextensionList is a string containing pairs of \\0-terminated substrings. The last substring must be terminated by two \\0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\n\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\n\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as \"All files\\0*.*\\0\\0\"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default \"All files (*.*)\" filter.\n\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nDisplaying \\0-separated strings:\n* REAPER's IDE and ShowConsoleMsg only display strings up to the first \\0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \\0 byte as usual.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string windowTitle",
          "description": "the title of the file-selection-window"
        },
        {
          "identifier": "string initialFolder",
          "description": "the initial folder opened in the file-chooser-dialog"
        },
        {
          "identifier": "string initialFile",
          "description": "the default-filename already entered in the filename-entrybox"
        },
        {
          "identifier": "string extensionList",
          "description": "a list of extensions that can be selected in the selection-list.\nthe list has the following structure(separate the entries with a \\0): \n      \"description of type1\\0type1\\0description of type 2\\0type2\\0\"\nthe description of type can be anything that describes the type(s), \nto define one type, write: *.ext \nto define multiple types, write: *.ext;*.ext2;*.ext3\nthe extensionList must end with a \\0"
        },
        {
          "identifier": "boolean allowMultiple",
          "description": "true, allows selection of multiple files; false, allows only selection of one file"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "JS_Dialog_BrowseForOpenFiles(JS)",
    "functioncall": {
      "lua": "integer retval, string fileNames = reaper.JS_Dialog_BrowseForOpenFiles(string windowTitle, string initialFolder, string initialFile, string extensionList, boolean allowMultiple)",
      "cpp": "int JS_Dialog_BrowseForOpenFiles(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, bool allowMultiple, char* fileNamesOutNeedBig, int fileNamesOutNeedBig_sz)",
      "python": "(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, Boolean allowMultiple, String fileNamesOutNeedBig, Int fileNamesOutNeedBig_sz) = JS_Dialog_BrowseForOpenFiles(windowTitle, initialFolder, initialFile, extensionList, allowMultiple, fileNamesOutNeedBig, fileNamesOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Dialog_BrowseForOpenFiles\", \"windowTitle\", \"initialFolder\", \"initialFile\", \"extensionList\", bool allowMultiple, #fileNames)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "1, file was selected; 0, no file selected; -1, in case of an error"
        },
        {
          "identifier": "string fileNames",
          "description": "the selected filenames.\nwhen parameter allowMultiple=false, this returnvalue holds filename with path\nwhen parameter allowMultiple=true, this returnvalue holds the path and all selected files, separated by \\0\n     path\\0filename1\\0filename2\\0filename3"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowTitle", "type": "string" },
          { "identifier": "initialFolder", "type": "string" },
          { "identifier": "initialFile", "type": "string" },
          { "identifier": "extensionList", "type": "string" },
          { "identifier": "allowMultiple", "type": "boolean" }
        ],
        "method_name": "reaper.JS_Dialog_BrowseForOpenFiles",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "fileNames", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": ["select", "select", "file", "filenames", "path", "dialog", "save"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Opens a file-chooser-dialog for saving operations.\n\nretval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\n\nextensionList is a string containing pairs of 0-terminated substrings. The last substring must be terminated by two 0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\n\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\n\nIf the extensionList string is empty, it will display the default \"All files (*.*)\" filter.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string windowTitle",
          "description": "the title of the file-selection-window"
        },
        {
          "identifier": "string initialFolder",
          "description": "the initial folder opened in the file-chooser-dialog"
        },
        {
          "identifier": "string initialFile",
          "description": "the default-filename already entered in the filename-entrybox"
        },
        {
          "identifier": "string extensionList",
          "description": "a list of extensions that can be selected in the selection-list.\nthe list has the following structure(separate the entries with a \\0): \n      \"description of type1\\0type1\\0description of type 2\\0type2\\0\"\nthe description of type can be anything that describes the type(s), \nto define one type, write: *.ext \nto define multiple types, write: *.ext;*.ext2;*.ext3\nthe extensionList must end with a \\0"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_Dialog_BrowseForSaveFile(JS)",
    "functioncall": {
      "lua": "integer retval, string fileName = reaper.JS_Dialog_BrowseForSaveFile(string windowTitle, string initialFolder, string initialFile, string extensionList)",
      "cpp": "int JS_Dialog_BrowseForSaveFile(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, char* fileNameOutNeedBig, int fileNameOutNeedBig_sz)",
      "python": "(Int retval, String windowTitle, String initialFolder, String initialFile, String extensionList, String fileNameOutNeedBig, Int fileNameOutNeedBig_sz) = JS_Dialog_BrowseForSaveFile(windowTitle, initialFolder, initialFile, extensionList, fileNameOutNeedBig, fileNameOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_Dialog_BrowseForSaveFile\", \"windowTitle\", \"initialFolder\", \"initialFile\", \"extensionList\", #fileName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "1, file was selected; 0, no file selected; -1, in case of an error"
        },
        { "identifier": "string fileNames", "description": "the selected filename." }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "windowTitle", "type": "string" },
          { "identifier": "initialFolder", "type": "string" },
          { "identifier": "initialFile", "type": "string" },
          { "identifier": "extensionList", "type": "string" }
        ],
        "method_name": "reaper.JS_Dialog_BrowseForSaveFile",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "fileName", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.962", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": ["listview", "enumerate", "selected", "listview", "items"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "the HWND of the window" },
        {
          "identifier": "integer index",
          "description": "the index of the listitems before the next selected one"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_EnumSelItems(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_ListView_EnumSelItems(identifier listviewHWND, integer index)",
      "cpp": "int JS_ListView_EnumSelItems(void* listviewHWND, int index)",
      "python": "Int JS_ListView_EnumSelItems(void listviewHWND, Int index)",
      "eel": "int extension_api(\"JS_ListView_EnumSelItems\", void* listviewHWND, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "the index of the next selected list item"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_EnumSelItems",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the index and text of the focused item, if any.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier listviewHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetFocusedItem(JS)",
    "functioncall": {
      "lua": "integer retval, string text = reaper.JS_ListView_GetFocusedItem(identifier listviewHWND)",
      "cpp": "int JS_ListView_GetFocusedItem(void* listviewHWND, char* textOut, int textOut_sz)",
      "python": "(Int retval, void listviewHWND, String textOut, Int textOut_sz) = JS_ListView_GetFocusedItem(listviewHWND, textOut, textOut_sz)",
      "eel": "int extension_api(\"JS_ListView_GetFocusedItem\", void* listviewHWND, #text)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string text", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "listviewHWND", "type": "identifier" }],
        "method_name": "reaper.JS_ListView_GetFocusedItem",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "text", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the text and state of specified item.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "integer subItem", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetItem(JS)",
    "functioncall": {
      "lua": "string text, number state = reaper.JS_ListView_GetItem(identifier listviewHWND, integer index, integer subItem)",
      "cpp": "void JS_ListView_GetItem(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz, int* stateOut)",
      "python": "(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz, Int stateOut) = JS_ListView_GetItem(listviewHWND, index, subItem, textOut, textOut_sz, stateOut)",
      "eel": "extension_api(\"JS_ListView_GetItem\", void* listviewHWND, int index, int subItem, #text, int &state)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string text", "description": "" },
        { "identifier": "number state", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "subItem", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_GetItem",
        "return_values": [
          { "identifier": "text", "type": "string" },
          { "identifier": "state", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier listviewHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetItemCount(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_ListView_GetItemCount(identifier listviewHWND)",
      "cpp": "int JS_ListView_GetItemCount(void* listviewHWND)",
      "python": "Int JS_ListView_GetItemCount(void listviewHWND)",
      "eel": "int extension_api(\"JS_ListView_GetItemCount\", void* listviewHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "listviewHWND", "type": "identifier" }],
        "method_name": "reaper.JS_ListView_GetItemCount",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns client coordinates of the item.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetItemRect(JS)",
    "functioncall": {
      "lua": "boolean retval, number left, number top, number right, number bottom = reaper.JS_ListView_GetItemRect(identifier listviewHWND, integer index)",
      "cpp": "bool JS_ListView_GetItemRect(void* listviewHWND, int index, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Boolean retval, void listviewHWND, Int index, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = JS_ListView_GetItemRect(listviewHWND, index, leftOut, topOut, rightOut, bottomOut)",
      "eel": "bool extension_api(\"JS_ListView_GetItemRect\", void* listviewHWND, int index, int &left, int &top, int &right, int &bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_GetItemRect",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "State is a bitmask:\n1 = selected, 2 = focused. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetItemState(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_ListView_GetItemState(identifier listviewHWND, integer index)",
      "cpp": "int JS_ListView_GetItemState(void* listviewHWND, int index)",
      "python": "Int JS_ListView_GetItemState(void listviewHWND, Int index)",
      "eel": "int extension_api(\"JS_ListView_GetItemState\", void* listviewHWND, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_GetItemState",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "integer subItem", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetItemText(JS)",
    "functioncall": {
      "lua": "string text = reaper.JS_ListView_GetItemText(identifier listviewHWND, integer index, integer subItem)",
      "cpp": "void JS_ListView_GetItemText(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz)",
      "python": "(void listviewHWND, Int index, Int subItem, String textOut, Int textOut_sz) = JS_ListView_GetItemText(listviewHWND, index, subItem, textOut, textOut_sz)",
      "eel": "extension_api(\"JS_ListView_GetItemText\", void* listviewHWND, int index, int subItem, #text)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string text", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "subItem", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_GetItemText",
        "return_values": [{ "identifier": "text", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier listviewHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetSelectedCount(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.JS_ListView_GetSelectedCount(identifier listviewHWND)",
      "cpp": "int JS_ListView_GetSelectedCount(void* listviewHWND)",
      "python": "Int JS_ListView_GetSelectedCount(void listviewHWND)",
      "eel": "int extension_api(\"JS_ListView_GetSelectedCount\", void* listviewHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "listviewHWND", "type": "identifier" }],
        "method_name": "reaper.JS_ListView_GetSelectedCount",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier listviewHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_GetTopIndex(JS)",
    "functioncall": {
      "lua": "integer reaper.JS_ListView_GetTopIndex(identifier listviewHWND)",
      "cpp": "int JS_ListView_GetTopIndex(void* listviewHWND)",
      "python": "Int JS_ListView_GetTopIndex(void listviewHWND)",
      "eel": "int extension_api(\"JS_ListView_GetTopIndex\", void* listviewHWND)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "listviewHWND", "type": "identifier" }
        ],
        "method_name": "reaper.JS_ListView_GetTopIndex",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer clientX", "description": "" },
        { "identifier": "integer clientY", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_HitTest(JS)",
    "functioncall": {
      "lua": "number index, number subItem, number flags = reaper.JS_ListView_HitTest(identifier listviewHWND, integer clientX, integer clientY)",
      "cpp": "void JS_ListView_HitTest(void* listviewHWND, int clientX, int clientY, int* indexOut, int* subItemOut, int* flagsOut)",
      "python": "(void listviewHWND, Int clientX, Int clientY, Int indexOut, Int subItemOut, Int flagsOut) = JS_ListView_HitTest(listviewHWND, clientX, clientY, indexOut, subItemOut, flagsOut)",
      "eel": "extension_api(\"JS_ListView_HitTest\", void* listviewHWND, int clientX, int clientY, int &index, int &subItem, int &flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number index", "description": "" },
        { "identifier": "number subItem", "description": "" },
        { "identifier": "number flags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "clientX", "type": "integer" },
          { "identifier": "clientY", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_HitTest",
        "return_values": [
          { "identifier": "index", "type": "number" },
          { "identifier": "subItem", "type": "number" },
          { "identifier": "flags", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.963", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the indices of all selected items as a comma-separated list.\n\n* retval: Number of selected items found; negative or zero if an error occured.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier listviewHWND", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_ListAllSelItems(JS)",
    "functioncall": {
      "lua": "integer retval, string items = reaper.JS_ListView_ListAllSelItems(identifier listviewHWND)",
      "cpp": "int JS_ListView_ListAllSelItems(void* listviewHWND, char* itemsOutNeedBig, int itemsOutNeedBig_sz)",
      "python": "(Int retval, void listviewHWND, String itemsOutNeedBig, Int itemsOutNeedBig_sz) = JS_ListView_ListAllSelItems(listviewHWND, itemsOutNeedBig, itemsOutNeedBig_sz)",
      "eel": "int extension_api(\"JS_ListView_ListAllSelItems\", void* listviewHWND, #items)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "listviewHWND", "type": "identifier" }],
        "method_name": "reaper.JS_ListView_ListAllSelItems",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "items", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n\n1 = selected, 2 = focused. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\n\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "integer state", "description": "" },
        { "identifier": "integer mask", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_SetItemState(JS)",
    "functioncall": {
      "lua": "reaper.JS_ListView_SetItemState(identifier listviewHWND, integer index, integer state, integer mask)",
      "cpp": "void JS_ListView_SetItemState(void* listviewHWND, int index, int state, int mask)",
      "python": "JS_ListView_SetItemState(void listviewHWND, Int index, Int state, Int mask)",
      "eel": "extension_api(\"JS_ListView_SetItemState\", void* listviewHWND, int index, int state, int mask)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "state", "type": "integer" },
          { "identifier": "mask", "type": "integer" }
        ],
        "method_name": "reaper.JS_ListView_SetItemState",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "1.217", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Currently, this fuction only accepts ASCII text.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier listviewHWND", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "integer subItem", "description": "" },
        { "identifier": "string text", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "JS_ListView_SetItemText(JS)",
    "functioncall": {
      "lua": "reaper.JS_ListView_SetItemText(identifier listviewHWND, integer index, integer subItem, string text)",
      "cpp": "void JS_ListView_SetItemText(void* listviewHWND, int index, int subItem, const char* text)",
      "python": "JS_ListView_SetItemText(void listviewHWND, Int index, Int subItem, String text)",
      "eel": "extension_api(\"JS_ListView_SetItemText\", void* listviewHWND, int index, int subItem, \"text\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "listviewHWND", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "subItem", "type": "integer" },
          { "identifier": "text", "type": "string" }
        ],
        "method_name": "reaper.JS_ListView_SetItemText",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Creates writer for 32 bit floating point WAV",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string filename", "description": "" },
        { "identifier": "integer numchans", "description": "" },
        { "identifier": "integer samplerate", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "Xen_AudioWriter_Create(JS)",
    "functioncall": {
      "lua": "AudioWriter reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)",
      "cpp": "AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)",
      "python": "AudioWriter  Xen_AudioWriter_Create(String filename, Int numchans, Int samplerate)",
      "eel": "AudioWriter  extension_api(\"Xen_AudioWriter_Create\", \"filename\", int numchans, int samplerate)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "AudioWriter ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "AudioWriter" },
          { "identifier": "filename", "type": "string" },
          { "identifier": "numchans", "type": "integer" },
          { "identifier": "samplerate", "type": "integer" }
        ],
        "method_name": "reaper.Xen_AudioWriter_Create",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Destroys writer",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "AudioWriter writer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Xen_AudioWriter_Destroy(JS)",
    "functioncall": {
      "lua": "reaper.Xen_AudioWriter_Destroy(AudioWriter writer)",
      "cpp": "void Xen_AudioWriter_Destroy(AudioWriter* writer)",
      "python": "Xen_AudioWriter_Destroy(AudioWriter writer)",
      "eel": "extension_api(\"Xen_AudioWriter_Destroy\", AudioWriter writer)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "writer", "type": "AudioWriter" }],
        "method_name": "reaper.Xen_AudioWriter_Destroy",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Write interleaved audio data to disk",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "AudioWriter writer", "description": "" },
        { "identifier": "integer numframes", "description": "" },
        { "identifier": "identifier data", "description": "" },
        { "identifier": "integer offset", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "Xen_AudioWriter_Write(JS)",
    "functioncall": {
      "lua": "integer reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)",
      "cpp": "int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)",
      "python": "Int  Xen_AudioWriter_Write(AudioWriter writer, Int numframes, void data, Int offset)",
      "eel": "int  extension_api(\"Xen_AudioWriter_Write\", AudioWriter writer, int numframes, void* data, int offset)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "writer", "type": "AudioWriter" },
          { "identifier": "numframes", "type": "integer" },
          { "identifier": "data", "type": "identifier" },
          { "identifier": "offset", "type": "integer" }
        ],
        "method_name": "reaper.Xen_AudioWriter_Write",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.951", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get interleaved audio data from media source",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "identifier destbuf", "description": "" },
        { "identifier": "integer destbufoffset", "description": "" },
        { "identifier": "integer numframes", "description": "" },
        { "identifier": "integer numchans", "description": "" },
        { "identifier": "number samplerate", "description": "" },
        { "identifier": "number sourceposition", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "Xen_GetMediaSourceSamples(JS)",
    "functioncall": {
      "lua": "integer reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)",
      "cpp": "int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)",
      "python": "Int  Xen_GetMediaSourceSamples(PCM_source src, void destbuf, Int destbufoffset, Int numframes, Int numchans, Float samplerate, Float sourceposition)",
      "eel": "int  extension_api(\"Xen_GetMediaSourceSamples\", PCM_source src, void* destbuf, int destbufoffset, int numframes, int numchans, samplerate, sourceposition)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "destbuf", "type": "identifier" },
          { "identifier": "destbufoffset", "type": "integer" },
          { "identifier": "numframes", "type": "integer" },
          { "identifier": "numchans", "type": "integer" },
          { "identifier": "samplerate", "type": "number" },
          { "identifier": "sourceposition", "type": "number" }
        ],
        "method_name": "reaper.Xen_GetMediaSourceSamples",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.991", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Start audio preview of a PCM\\_source, which can be created using functions like [PCM\\_Source\\_CreateFromFile](#PCM_Source_CreateFromFile)\n\nReturns id of a preview handle that can be provided to [Xen\\_StopSourcePreview](#Xen_StopSourcePreview).\n\nIf the given PCM\\_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.\n\nYou can preview more than one file at the same time.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PCM_source source",
          "description": "a PCM_source-created using a mediafile/item "
        },
        { "identifier": "number gain", "description": "the volume of the previewed pcm_source" },
        {
          "identifier": "boolean loop",
          "description": "true, loop the PCM_source; false, play only once"
        },
        { "identifier": "optional number outputchanindexIn", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "Xen_StartSourcePreview(JS)",
    "functioncall": {
      "lua": "integer reaper.Xen_StartSourcePreview(PCM_source source, number gain, boolean loop, optional number outputchanindexIn)",
      "cpp": "int Xen_StartSourcePreview(PCM_source* source, double gain, bool loop, int* outputchanindexInOptional)",
      "python": "(Int retval, PCM_source source, Float gain, Boolean loop, Int outputchanindexInOptional) = Xen_StartSourcePreview(source, gain, loop, outputchanindexInOptional)",
      "eel": "int extension_api(\"Xen_StartSourcePreview\", PCM_source source, gain, bool loop, optional int outputchanindexIn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer id",
          "description": "the id of this preview, which can be used to stop it again"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "source", "type": "PCM_source" },
          { "identifier": "gain", "type": "number" },
          { "identifier": "loop", "type": "boolean" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "reaper.Xen_StartSourcePreview",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "JS": "0.986", "Reaper": "5.974" },
    "chapers": ["JS_Plugin"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Stop audio preview. \n\nTo stop all running previews, set id=-1",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer preview_id",
          "description": "the id of the running preview; -1, stops all running previews"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "Xen_StopSourcePreview(JS)",
    "functioncall": {
      "lua": "integer retval = reaper.Xen_StopSourcePreview(integer preview_id)",
      "cpp": "int Xen_StopSourcePreview(int preview_id)",
      "python": "Int Xen_StopSourcePreview(Int preview_id)",
      "eel": "int extension_api(\"Xen_StopSourcePreview\", int preview_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "preview_id", "type": "integer" }],
        "method_name": "reaper.Xen_StopSourcePreview",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.974" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ComboBox_FindString().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier comboBoxHwnd", "description": "" },
        { "identifier": "integer startId", "description": "" },
        { "identifier": "string string", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_CB_FindString(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_CB_FindString(identifier comboBoxHwnd, integer startId, string string)",
      "cpp": "int BR_Win32_CB_FindString(void* comboBoxHwnd, int startId, const char* string)",
      "python": "Int  BR_Win32_CB_FindString(void comboBoxHwnd, Int startId, String string)",
      "eel": "int extension_api(\"BR_Win32_CB_FindString\", void* comboBoxHwnd, int startId, \"string\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "comboBoxHwnd", "type": "identifier" },
          { "identifier": "startId", "type": "integer" },
          { "identifier": "string", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_CB_FindString",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ComboBox_FindStringExact().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier comboBoxHwnd", "description": "" },
        { "identifier": "integer startId", "description": "" },
        { "identifier": "string string", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_CB_FindStringExact(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_CB_FindStringExact(identifier comboBoxHwnd, integer startId, string string)",
      "cpp": "int BR_Win32_CB_FindStringExact(void* comboBoxHwnd, int startId, const char* string)",
      "python": "Int  BR_Win32_CB_FindStringExact(void comboBoxHwnd, Int startId, String string)",
      "eel": "int extension_api(\"BR_Win32_CB_FindStringExact\", void* comboBoxHwnd, int startId, \"string\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "comboBoxHwnd", "type": "identifier" },
          { "identifier": "startId", "type": "integer" },
          { "identifier": "string", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_CB_FindStringExact",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ClientToScreen().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer xIn", "description": "" },
        { "identifier": "integer yIn", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_ClientToScreen(SWS)",
    "functioncall": {
      "lua": "number x, number y = reaper.BR_Win32_ClientToScreen(identifier hwnd, integer xIn, integer yIn)",
      "cpp": "void BR_Win32_ClientToScreen(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)",
      "python": "(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ClientToScreen(hwnd, xIn, yIn, xOut, yOut)",
      "eel": "extension_api(\"BR_Win32_ClientToScreen\", void* hwnd, int xIn, int yIn, int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number x", "description": "" },
        { "identifier": "number y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "xIn", "type": "integer" },
          { "identifier": "yIn", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_ClientToScreen",
        "return_values": [
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either \"0\" to signify NULL or as string obtained from [BR\\_Win32_HwndToString](#BR_Win32_HwndToString).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string hwndParent", "description": "" },
        { "identifier": "string hwndChildAfter", "description": "" },
        { "identifier": "string className", "description": "" },
        { "identifier": "string windowName", "description": "" },
        { "identifier": "boolean searchClass", "description": "" },
        { "identifier": "boolean searchName", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_FindWindowEx(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_FindWindowEx(string hwndParent, string hwndChildAfter, string className, string windowName, boolean searchClass, boolean searchName)",
      "cpp": "void* BR_Win32_FindWindowEx(const char* hwndParent, const char* hwndChildAfter, const char* className, const char* windowName, bool searchClass, bool searchName)",
      "python": "void  BR_Win32_FindWindowEx(String hwndParent, String hwndChildAfter, String className, String windowName, Boolean searchClass, Boolean searchName)",
      "eel": "void* extension_api(\"BR_Win32_FindWindowEx\", \"hwndParent\", \"hwndChildAfter\", \"className\", \"windowName\", bool searchClass, bool searchName)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "hwndParent", "type": "string" },
          { "identifier": "hwndChildAfter", "type": "string" },
          { "identifier": "className", "type": "string" },
          { "identifier": "windowName", "type": "string" },
          { "identifier": "searchClass", "type": "boolean" },
          { "identifier": "searchName", "type": "boolean" }
        ],
        "method_name": "reaper.BR_Win32_FindWindowEx",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GET_X_LPARAM().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer lParam", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GET_X_LPARAM(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_GET_X_LPARAM(integer lParam)",
      "cpp": "int BR_Win32_GET_X_LPARAM(int lParam)",
      "python": "Int  BR_Win32_GET_X_LPARAM(Int lParam)",
      "eel": "int extension_api(\"BR_Win32_GET_X_LPARAM\", int lParam)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "lParam", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_GET_X_LPARAM",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GET_Y_LPARAM().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer lParam", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GET_Y_LPARAM(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_GET_Y_LPARAM(integer lParam)",
      "cpp": "int BR_Win32_GET_Y_LPARAM(int lParam)",
      "python": "Int  BR_Win32_GET_Y_LPARAM(Int lParam)",
      "eel": "int extension_api(\"BR_Win32_GET_Y_LPARAM\", int lParam)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "lParam", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_GET_Y_LPARAM",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string constantName", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetConstant(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_GetConstant(string constantName)",
      "cpp": "int BR_Win32_GetConstant(const char* constantName)",
      "python": "Int  BR_Win32_GetConstant(String constantName)",
      "eel": "int extension_api(\"BR_Win32_GetConstant\", \"constantName\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "constantName", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_GetConstant",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetCursorPos().",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_GetCursorPos(SWS)",
    "functioncall": {
      "lua": "boolean retval, number x, number y = reaper.BR_Win32_GetCursorPos()",
      "cpp": "bool BR_Win32_GetCursorPos(int* xOut, int* yOut)",
      "python": "(Boolean retval, Int xOut, Int yOut) = BR_Win32_GetCursorPos(xOut, yOut)",
      "eel": "bool extension_api(\"BR_Win32_GetCursorPos\", int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number x", "description": "" },
        { "identifier": "number y", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_Win32_GetCursorPos",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetFocus().",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_GetFocus(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_GetFocus()",
      "cpp": "void* BR_Win32_GetFocus()",
      "python": "void  BR_Win32_GetFocus()",
      "eel": "void* extension_api(\"BR_Win32_GetFocus\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_GetFocus",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetForegroundWindow().",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_GetForegroundWindow(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_GetForegroundWindow()",
      "cpp": "void* BR_Win32_GetForegroundWindow()",
      "python": "void  BR_Win32_GetForegroundWindow()",
      "eel": "void* extension_api(\"BR_Win32_GetForegroundWindow\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_GetForegroundWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Alternative to [GetMainHwnd](#GetMainHwnd). REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_GetMainHwnd(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_GetMainHwnd()",
      "cpp": "void* BR_Win32_GetMainHwnd()",
      "python": "void  BR_Win32_GetMainHwnd()",
      "eel": "void* extension_api(\"BR_Win32_GetMainHwnd\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_GetMainHwnd",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_GetMixerHwnd(SWS)",
    "functioncall": {
      "lua": "identifier retval, boolean isDocked = reaper.BR_Win32_GetMixerHwnd()",
      "cpp": "void* BR_Win32_GetMixerHwnd(bool* isDockedOut)",
      "python": "(void retval, Boolean isDockedOut) = BR_Win32_GetMixerHwnd(isDockedOut)",
      "eel": "void* extension_api(\"BR_Win32_GetMixerHwnd\", bool &amp;isDocked)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier retval", "description": "" },
        { "identifier": "boolean isDocked", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.BR_Win32_GetMixerHwnd",
        "return_values": [
          { "identifier": "retval", "type": "identifier" },
          { "identifier": "isDocked", "type": "boolean" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean workingAreaOnly", "description": "" },
        { "identifier": "integer leftIn", "description": "" },
        { "identifier": "integer topIn", "description": "" },
        { "identifier": "integer rightIn", "description": "" },
        { "identifier": "integer bottomIn", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetMonitorRectFromRect(SWS)",
    "functioncall": {
      "lua": "number left, number top, number right, number bottom = reaper.BR_Win32_GetMonitorRectFromRect(boolean workingAreaOnly, integer leftIn, integer topIn, integer rightIn, integer bottomIn)",
      "cpp": "void BR_Win32_GetMonitorRectFromRect(bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Boolean workingAreaOnly, Int leftIn, Int topIn, Int rightIn, Int bottomIn, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetMonitorRectFromRect(workingAreaOnly, leftIn, topIn, rightIn, bottomIn, leftOut, topOut, rightOut, bottomOut)",
      "eel": "extension_api(\"BR_Win32_GetMonitorRectFromRect\", bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "workingAreaOnly", "type": "boolean" },
          { "identifier": "leftIn", "type": "integer" },
          { "identifier": "topIn", "type": "integer" },
          { "identifier": "rightIn", "type": "integer" },
          { "identifier": "bottomIn", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_GetMonitorRectFromRect",
        "return_values": [
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetParent().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetParent(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_GetParent(identifier hwnd)",
      "cpp": "void* BR_Win32_GetParent(void* hwnd)",
      "python": "void  BR_Win32_GetParent(void hwnd)",
      "eel": "void* extension_api(\"BR_Win32_GetParent\", void* hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "hwnd", "type": "identifier" }
        ],
        "method_name": "reaper.BR_Win32_GetParent",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetWindow().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer cmd", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetWindow(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_GetWindow(identifier hwnd, integer cmd)",
      "cpp": "void* BR_Win32_GetWindow(void* hwnd, int cmd)",
      "python": "void  BR_Win32_GetWindow(void hwnd, Int cmd)",
      "eel": "void* extension_api(\"BR_Win32_GetWindow\", void* hwnd, int cmd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "cmd", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_GetWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetWindowLong().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetWindowLong(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_GetWindowLong(identifier hwnd, integer index)",
      "cpp": "int BR_Win32_GetWindowLong(void* hwnd, int index)",
      "python": "Int  BR_Win32_GetWindowLong(void hwnd, Int index)",
      "eel": "int extension_api(\"BR_Win32_GetWindowLong\", void* hwnd, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_GetWindowLong",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetWindowRect().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetWindowRect(SWS)",
    "functioncall": {
      "lua": "boolean retval, number left, number top, number right, number bottom = reaper.BR_Win32_GetWindowRect(identifier hwnd)",
      "cpp": "bool BR_Win32_GetWindowRect(void* hwnd, int* leftOut, int* topOut, int* rightOut, int* bottomOut)",
      "python": "(Boolean retval, void hwnd, Int leftOut, Int topOut, Int rightOut, Int bottomOut) = BR_Win32_GetWindowRect(hwnd, leftOut, topOut, rightOut, bottomOut)",
      "eel": "bool extension_api(\"BR_Win32_GetWindowRect\", void* hwnd, int &amp;left, int &amp;top, int &amp;right, int &amp;bottom)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "number left", "description": "" },
        { "identifier": "number top", "description": "" },
        { "identifier": "number right", "description": "" },
        { "identifier": "number bottom", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_GetWindowRect",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "left", "type": "number" },
          { "identifier": "top", "type": "number" },
          { "identifier": "right", "type": "number" },
          { "identifier": "bottom", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API GetWindowText().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_GetWindowText(SWS)",
    "functioncall": {
      "lua": "integer retval, string text = reaper.BR_Win32_GetWindowText(identifier hwnd)",
      "cpp": "int BR_Win32_GetWindowText(void* hwnd, char* textOut, int textOut_sz)",
      "python": "(Int retval, void hwnd, String textOut, Int textOut_sz) = BR_Win32_GetWindowText(hwnd, textOut, textOut_sz)",
      "eel": "int extension_api(\"BR_Win32_GetWindowText\", void* hwnd, #text)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string text", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_GetWindowText",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "text", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API HIBYTE().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_HIBYTE(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_HIBYTE(integer value)",
      "cpp": "int BR_Win32_HIBYTE(int value)",
      "python": "Int  BR_Win32_HIBYTE(Int value)",
      "eel": "int extension_api(\"BR_Win32_HIBYTE\", int value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "value", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_HIBYTE",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API HIWORD().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_HIWORD(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_HIWORD(integer value)",
      "cpp": "int BR_Win32_HIWORD(int value)",
      "python": "Int  BR_Win32_HIWORD(Int value)",
      "eel": "int extension_api(\"BR_Win32_HIWORD\", int value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "value", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_HIWORD",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Convert HWND to string. To convert string back to HWND, see [BR\\_Win32_StringToHwnd](#BR_Win32_StringToHwnd).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_HwndToString(SWS)",
    "functioncall": {
      "lua": "string string = reaper.BR_Win32_HwndToString(identifier hwnd)",
      "cpp": "void BR_Win32_HwndToString(void* hwnd, char* stringOut, int stringOut_sz)",
      "python": "(void hwnd, String stringOut, Int stringOut_sz) = BR_Win32_HwndToString(hwnd, stringOut, stringOut_sz)",
      "eel": "extension_api(\"BR_Win32_HwndToString\", void* hwnd, #string)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "hwnd", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_HwndToString",
        "return_values": [{ "identifier": "string", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API IsWindow().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_IsWindow(SWS)",
    "functioncall": {
      "lua": "boolean reaper.BR_Win32_IsWindow(identifier hwnd)",
      "cpp": "bool BR_Win32_IsWindow(void* hwnd)",
      "python": "Boolean  BR_Win32_IsWindow(void hwnd)",
      "eel": "bool extension_api(\"BR_Win32_IsWindow\", void* hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "hwnd", "type": "identifier" }
        ],
        "method_name": "reaper.BR_Win32_IsWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API IsWindowVisible().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_IsWindowVisible(SWS)",
    "functioncall": {
      "lua": "boolean reaper.BR_Win32_IsWindowVisible(identifier hwnd)",
      "cpp": "bool BR_Win32_IsWindowVisible(void* hwnd)",
      "python": "Boolean  BR_Win32_IsWindowVisible(void hwnd)",
      "eel": "bool extension_api(\"BR_Win32_IsWindowVisible\", void* hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "hwnd", "type": "identifier" }
        ],
        "method_name": "reaper.BR_Win32_IsWindowVisible",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API LOBYTE().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_LOBYTE(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_LOBYTE(integer value)",
      "cpp": "int BR_Win32_LOBYTE(int value)",
      "python": "Int  BR_Win32_LOBYTE(Int value)",
      "eel": "int extension_api(\"BR_Win32_LOBYTE\", int value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "value", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_LOBYTE",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API LOWORD().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_LOWORD(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_LOWORD(integer value)",
      "cpp": "int BR_Win32_LOWORD(int value)",
      "python": "Int  BR_Win32_LOWORD(Int value)",
      "eel": "int extension_api(\"BR_Win32_LOWORD\", int value)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "value", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_LOWORD",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API MAKELONG().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer low", "description": "" },
        { "identifier": "integer high", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_MAKELONG(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_MAKELONG(integer low, integer high)",
      "cpp": "int BR_Win32_MAKELONG(int low, int high)",
      "python": "Int  BR_Win32_MAKELONG(Int low, Int high)",
      "eel": "int extension_api(\"BR_Win32_MAKELONG\", int low, int high)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "low", "type": "integer" },
          { "identifier": "high", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_MAKELONG",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API MAKELPARAM().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer low", "description": "" },
        { "identifier": "integer high", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_MAKELPARAM(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_MAKELPARAM(integer low, integer high)",
      "cpp": "int BR_Win32_MAKELPARAM(int low, int high)",
      "python": "Int  BR_Win32_MAKELPARAM(Int low, Int high)",
      "eel": "int extension_api(\"BR_Win32_MAKELPARAM\", int low, int high)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "low", "type": "integer" },
          { "identifier": "high", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_MAKELPARAM",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API MAKELRESULT().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer low", "description": "" },
        { "identifier": "integer high", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_MAKELRESULT(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_MAKELRESULT(integer low, integer high)",
      "cpp": "int BR_Win32_MAKELRESULT(int low, int high)",
      "python": "Int  BR_Win32_MAKELRESULT(Int low, Int high)",
      "eel": "int extension_api(\"BR_Win32_MAKELRESULT\", int low, int high)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "low", "type": "integer" },
          { "identifier": "high", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_MAKELRESULT",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API MAKEWORD().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer low", "description": "" },
        { "identifier": "integer high", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_MAKEWORD(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_MAKEWORD(integer low, integer high)",
      "cpp": "int BR_Win32_MAKEWORD(int low, int high)",
      "python": "Int  BR_Win32_MAKEWORD(Int low, Int high)",
      "eel": "int extension_api(\"BR_Win32_MAKEWORD\", int low, int high)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "low", "type": "integer" },
          { "identifier": "high", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_MAKEWORD",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API MAKEWPARAM().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer low", "description": "" },
        { "identifier": "integer high", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_MAKEWPARAM(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_MAKEWPARAM(integer low, integer high)",
      "cpp": "int BR_Win32_MAKEWPARAM(int low, int high)",
      "python": "Int  BR_Win32_MAKEWPARAM(Int low, Int high)",
      "eel": "int extension_api(\"BR_Win32_MAKEWPARAM\", int low, int high)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "low", "type": "integer" },
          { "identifier": "high", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_MAKEWPARAM",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Alternative to [MIDIEditor\\_GetActive](#MIDIEditor_GetActive). REAPER seems to have problems with extensions using HWND type for exported functions so all BR\\_Win32 functions use void* instead of HWND type.",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "BR_Win32_MIDIEditor_GetActive(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_MIDIEditor_GetActive()",
      "cpp": "void* BR_Win32_MIDIEditor_GetActive()",
      "python": "void  BR_Win32_MIDIEditor_GetActive()",
      "eel": "void* extension_api(\"BR_Win32_MIDIEditor_GetActive\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "reaper", "type": "identifier" }],
        "method_name": "reaper.BR_Win32_MIDIEditor_GetActive",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ClientToScreen().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer xIn", "description": "" },
        { "identifier": "integer yIn", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_ScreenToClient(SWS)",
    "functioncall": {
      "lua": "number x, number y = reaper.BR_Win32_ScreenToClient(identifier hwnd, integer xIn, integer yIn)",
      "cpp": "void BR_Win32_ScreenToClient(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)",
      "python": "(void hwnd, Int xIn, Int yIn, Int xOut, Int yOut) = BR_Win32_ScreenToClient(hwnd, xIn, yIn, xOut, yOut)",
      "eel": "extension_api(\"BR_Win32_ScreenToClient\", void* hwnd, int xIn, int yIn, int &amp;x, int &amp;y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number x", "description": "" },
        { "identifier": "number y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "xIn", "type": "integer" },
          { "identifier": "yIn", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_ScreenToClient",
        "return_values": [
          { "identifier": "x", "type": "number" },
          { "identifier": "y", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API SendMessage().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer msg", "description": "" },
        { "identifier": "integer lParam", "description": "" },
        { "identifier": "integer wParam", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_SendMessage(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_SendMessage(identifier hwnd, integer msg, integer lParam, integer wParam)",
      "cpp": "int BR_Win32_SendMessage(void* hwnd, int msg, int lParam, int wParam)",
      "python": "Int  BR_Win32_SendMessage(void hwnd, Int msg, Int lParam, Int wParam)",
      "eel": "int extension_api(\"BR_Win32_SendMessage\", void* hwnd, int msg, int lParam, int wParam)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "msg", "type": "integer" },
          { "identifier": "lParam", "type": "integer" },
          { "identifier": "wParam", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_SendMessage",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API SetFocus().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_SetFocus(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_SetFocus(identifier hwnd)",
      "cpp": "void* BR_Win32_SetFocus(void* hwnd)",
      "python": "void  BR_Win32_SetFocus(void hwnd)",
      "eel": "void* extension_api(\"BR_Win32_SetFocus\", void* hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "hwnd", "type": "identifier" }
        ],
        "method_name": "reaper.BR_Win32_SetFocus",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API SetForegroundWindow().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier hwnd", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_SetForegroundWindow(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_SetForegroundWindow(identifier hwnd)",
      "cpp": "int BR_Win32_SetForegroundWindow(void* hwnd)",
      "python": "Int  BR_Win32_SetForegroundWindow(void hwnd)",
      "eel": "int extension_api(\"BR_Win32_SetForegroundWindow\", void* hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "hwnd", "type": "identifier" }
        ],
        "method_name": "reaper.BR_Win32_SetForegroundWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API SetWindowLong().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "integer newLong", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_SetWindowLong(SWS)",
    "functioncall": {
      "lua": "integer reaper.BR_Win32_SetWindowLong(identifier hwnd, integer index, integer newLong)",
      "cpp": "int BR_Win32_SetWindowLong(void* hwnd, int index, int newLong)",
      "python": "Int  BR_Win32_SetWindowLong(void hwnd, Int index, Int newLong)",
      "eel": "int extension_api(\"BR_Win32_SetWindowLong\", void* hwnd, int index, int newLong)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "index", "type": "integer" },
          { "identifier": "newLong", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_SetWindowLong",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: \"HWND\\_BOTTOM\", \"HWND\\_NOTOPMOST\", \"HWND\\_TOP\", \"HWND\\_TOPMOST\" or a string obtained with [BR\\_Win32_HwndToString](#BR_Win32_HwndToString).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "string hwndInsertAfter", "description": "" },
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" },
        { "identifier": "integer width", "description": "" },
        { "identifier": "integer height", "description": "" },
        { "identifier": "integer flags", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_SetWindowPos(SWS)",
    "functioncall": {
      "lua": "boolean reaper.BR_Win32_SetWindowPos(identifier hwnd, string hwndInsertAfter, integer x, integer y, integer width, integer height, integer flags)",
      "cpp": "bool BR_Win32_SetWindowPos(void* hwnd, const char* hwndInsertAfter, int x, int y, int width, int height, int flags)",
      "python": "Boolean  BR_Win32_SetWindowPos(void hwnd, String hwndInsertAfter, Int x, Int y, Int width, Int height, Int flags)",
      "eel": "bool extension_api(\"BR_Win32_SetWindowPos\", void* hwnd, \"hwndInsertAfter\", int x, int y, int width, int height, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "hwndInsertAfter", "type": "string" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" },
          { "identifier": "flags", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_SetWindowPos",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API ShowWindow().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "identifier hwnd", "description": "" },
        { "identifier": "integer cmdShow", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_ShowWindow(SWS)",
    "functioncall": {
      "lua": "boolean reaper.BR_Win32_ShowWindow(identifier hwnd, integer cmdShow)",
      "cpp": "bool BR_Win32_ShowWindow(void* hwnd, int cmdShow)",
      "python": "Boolean  BR_Win32_ShowWindow(void hwnd, Int cmdShow)",
      "eel": "bool extension_api(\"BR_Win32_ShowWindow\", void* hwnd, int cmdShow)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "hwnd", "type": "identifier" },
          { "identifier": "cmdShow", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_ShowWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "\\[BR\\] Convert string to HWND. To convert HWND back to string, see [BR\\_Win32\\_HwndToString](BR_Win32_HwndToString).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_StringToHwnd(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_StringToHwnd(string string)",
      "cpp": "void* BR_Win32_StringToHwnd(const char* string)",
      "python": "void  BR_Win32_StringToHwnd(String string)",
      "eel": "void* extension_api(\"BR_Win32_StringToHwnd\", \"string\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "string", "type": "string" }
        ],
        "method_name": "reaper.BR_Win32_StringToHwnd",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "[BR] Equivalent to win32 API WindowFromPoint().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "" },
        { "identifier": "integer y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "BR_Win32_WindowFromPoint(SWS)",
    "functioncall": {
      "lua": "identifier reaper.BR_Win32_WindowFromPoint(integer x, integer y)",
      "cpp": "void* BR_Win32_WindowFromPoint(int x, int y)",
      "python": "void  BR_Win32_WindowFromPoint(Int x, Int y)",
      "eel": "void* extension_api(\"BR_Win32_WindowFromPoint\", int x, int y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "identifier", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "reaper.BR_Win32_WindowFromPoint",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Enumerate the source's media cues. Returns the next index or 0 when finished.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "integer index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_EnumMediaSourceCues(SWS)",
    "functioncall": {
      "lua": "integer retval, number time, number endTime, boolean isRegion, string name = reaper.CF_EnumMediaSourceCues(PCM_source src, integer index)",
      "cpp": "int CF_EnumMediaSourceCues(PCM_source* src, int index, double* timeOut, double* endTimeOut, bool* isRegionOut, char* nameOut, int nameOut_sz)",
      "python": "(Int retval, PCM_source src, Int index, Float timeOut, Float endTimeOut, Boolean isRegionOut, String nameOut, Int nameOut_sz) = CF_EnumMediaSourceCues(src, index, timeOut, endTimeOut, isRegionOut, nameOut, nameOut_sz)",
      "eel": "int extension_api(\"CF_EnumMediaSourceCues\", PCM_source src, int index, &amp;time, &amp;endTime, bool &amp;isRegion, #name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "number time", "description": "" },
        { "identifier": "number endTime", "description": "" },
        { "identifier": "boolean isRegion", "description": "" },
        { "identifier": "string name", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.CF_EnumMediaSourceCues",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "time", "type": "number" },
          { "identifier": "endTime", "type": "number" },
          { "identifier": "isRegion", "type": "boolean" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "FxChain hwnd", "description": "" },
        { "identifier": "integer index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_EnumSelectedFX(SWS)",
    "functioncall": {
      "lua": "integer reaper.CF_EnumSelectedFX(FxChain hwnd, integer index)",
      "cpp": "int CF_EnumSelectedFX(FxChain* hwnd, int index)",
      "python": "Int  CF_EnumSelectedFX(FxChain hwnd, Int index)",
      "eel": "int extension_api(\"CF_EnumSelectedFX\", FxChain hwnd, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "hwnd", "type": "FxChain" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.CF_EnumSelectedFX",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer section", "description": "" },
        { "identifier": "integer index", "description": "" },
        { "identifier": "string name", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CF_EnumerateActions(SWS)",
    "functioncall": {
      "lua": "integer retval, string name = reaper.CF_EnumerateActions(integer section, integer index)",
      "cpp": "int CF_EnumerateActions(int section, int index, char* nameOut, int nameOut_sz)",
      "python": "(Int retval, Int section, Int index, String nameOut, Int nameOut_sz) = CF_EnumerateActions(section, index, nameOut, nameOut_sz)",
      "eel": "int extension_api(\"CF_EnumerateActions\", int section, int index, #name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer retval", "description": "" },
        { "identifier": "string name", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "section", "type": "integer" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.CF_EnumerateActions",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Export the source to the given file (MIDI only).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "string fn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_ExportMediaSource(SWS)",
    "functioncall": {
      "lua": "boolean reaper.CF_ExportMediaSource(PCM_source src, string fn)",
      "cpp": "bool CF_ExportMediaSource(PCM_source* src, const char* fn)",
      "python": "Boolean  CF_ExportMediaSource(PCM_source src, String fn)",
      "eel": "bool extension_api(\"CF_ExportMediaSource\", PCM_source src, \"fn\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "fn", "type": "string" }
        ],
        "method_name": "reaper.CF_ExportMediaSource",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Wrapper for the unexposed kbd\\_getTextFromCmd API function. See [CF\\_EnumerateActions](#CF_EnumerateActions) for common section IDs.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer section", "description": "" },
        { "identifier": "integer command", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_GetCommandText(SWS)",
    "functioncall": {
      "lua": "string reaper.CF_GetCommandText(integer section, integer command)",
      "cpp": "const char* CF_GetCommandText(int section, int command)",
      "python": "String  CF_GetCommandText(Int section, Int command)",
      "eel": "bool extension_api(\"CF_GetCommandText\", #retval, int section, int command)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "string" },
          { "identifier": "section", "type": "integer" },
          { "identifier": "command", "type": "integer" }
        ],
        "method_name": "reaper.CF_GetCommandText",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return a handle to the currently focused FX chain window.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CF_GetFocusedFXChain(SWS)",
    "functioncall": {
      "lua": "FxChain  = reaper.CF_GetFocusedFXChain()",
      "cpp": "FxChain* CF_GetFocusedFXChain()",
      "python": "FxChain  CF_GetFocusedFXChain()",
      "eel": "FxChain extension_api(\"CF_GetFocusedFXChain\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "FxChain ", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.CF_GetFocusedFXChain",
        "return_values": [{ "type": "FxChain" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the bit depth if available (0 otherwise).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_GetMediaSourceBitDepth(SWS)",
    "functioncall": {
      "lua": "integer reaper.CF_GetMediaSourceBitDepth(PCM_source src)",
      "cpp": "int CF_GetMediaSourceBitDepth(PCM_source* src)",
      "python": "Int  CF_GetMediaSourceBitDepth(PCM_source src)",
      "eel": "int extension_api(\"CF_GetMediaSourceBitDepth\", PCM_source src)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "integer" },
          { "identifier": "src", "type": "PCM_source" }
        ],
        "method_name": "reaper.CF_GetMediaSourceBitDepth",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["MetaData Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "string name", "description": "" },
        { "identifier": "string out", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CF_GetMediaSourceMetadata(SWS)",
    "functioncall": {
      "lua": "boolean retval, string out = reaper.CF_GetMediaSourceMetadata(PCM_source src, string name, string out)",
      "cpp": "bool CF_GetMediaSourceMetadata(PCM_source* src, const char* name, char* out, int out_sz)",
      "python": "(Boolean retval, PCM_source src, String name, String out, Int out_sz) = CF_GetMediaSourceMetadata(src, name, out, out_sz)",
      "eel": "bool extension_api(\"CF_GetMediaSourceMetadata\", PCM_source src, \"name\", #out)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string out", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "name", "type": "string" },
          { "identifier": "out", "type": "string" }
        ],
        "method_name": "reaper.CF_GetMediaSourceMetadata",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "out", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Returns the online/offline status of the given source.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source src", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_GetMediaSourceOnline(SWS)",
    "functioncall": {
      "lua": "boolean reaper.CF_GetMediaSourceOnline(PCM_source src)",
      "cpp": "bool CF_GetMediaSourceOnline(PCM_source* src)",
      "python": "Boolean  CF_GetMediaSourceOnline(PCM_source src)",
      "eel": "bool extension_api(\"CF_GetMediaSourceOnline\", PCM_source src)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "src", "type": "PCM_source" }
        ],
        "method_name": "reaper.CF_GetMediaSourceOnline",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the project associated with this source (BWF, subproject...).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "string fn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_GetMediaSourceRPP(SWS)",
    "functioncall": {
      "lua": "boolean retval, string fn = reaper.CF_GetMediaSourceRPP(PCM_source src)",
      "cpp": "bool CF_GetMediaSourceRPP(PCM_source* src, char* fnOut, int fnOut_sz)",
      "python": "(Boolean retval, PCM_source src, String fnOut, Int fnOut_sz) = CF_GetMediaSourceRPP(src, fnOut, fnOut_sz)",
      "eel": "bool extension_api(\"CF_GetMediaSourceRPP\", PCM_source src, #fn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "" },
        { "identifier": "string fn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "src", "type": "PCM_source" }],
        "method_name": "reaper.CF_GetMediaSourceRPP",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "fn", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return the current SWS version number.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "CF_GetSWSVersion(SWS)",
    "functioncall": {
      "lua": "string version = reaper.CF_GetSWSVersion()",
      "cpp": "void CF_GetSWSVersion(char* versionOut, int versionOut_sz)",
      "python": "(String versionOut, Int versionOut_sz) = CF_GetSWSVersion(versionOut, versionOut_sz)",
      "eel": "extension_api(\"CF_GetSWSVersion\", #version)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string version", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.CF_GetSWSVersion",
        "return_values": [{ "identifier": "version", "type": "string" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem_Take take", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_GetTakeFXChain(SWS)",
    "functioncall": {
      "lua": "FxChain reaper.CF_GetTakeFXChain(MediaItem_Take take)",
      "cpp": "FxChain* CF_GetTakeFXChain(MediaItem_Take* take)",
      "python": "FxChain  CF_GetTakeFXChain(MediaItem_Take take)",
      "eel": "FxChain extension_api(\"CF_GetTakeFXChain\", MediaItem_Take take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "FxChain", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "FxChain" },
          { "identifier": "take", "type": "MediaItem_Take" }
        ],
        "method_name": "reaper.CF_GetTakeFXChain",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["FX Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Return a handle to the given track FX chain window.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaTrack track", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_GetTrackFXChain(SWS)",
    "functioncall": {
      "lua": "FxChain reaper.CF_GetTrackFXChain(MediaTrack track)",
      "cpp": "FxChain* CF_GetTrackFXChain(MediaTrack* track)",
      "python": "FxChain  CF_GetTrackFXChain(MediaTrack track)",
      "eel": "FxChain extension_api(\"CF_GetTrackFXChain\", MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "FxChain", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "FxChain" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.CF_GetTrackFXChain",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Select the given file in explorer/finder.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string file", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_LocateInExplorer(SWS)",
    "functioncall": {
      "lua": "boolean reaper.CF_LocateInExplorer(string file)",
      "cpp": "bool CF_LocateInExplorer(const char* file)",
      "python": "Boolean  CF_LocateInExplorer(String file)",
      "eel": "bool extension_api(\"CF_LocateInExplorer\", \"file\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "file", "type": "string" }
        ],
        "method_name": "reaper.CF_LocateInExplorer",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose active trackfx you want to set"
        },
        {
          "identifier": "integer index",
          "description": "the index of the fx, which you want to activate"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_SelectTrackFX(SWS)",
    "functioncall": {
      "lua": "boolean reaper.CF_SelectTrackFX(MediaTrack track, integer index)",
      "cpp": "bool CF_SelectTrackFX(MediaTrack* track, int index)",
      "python": "Boolean CF_SelectTrackFX(MediaTrack track, Int index)",
      "eel": "bool extension_api(\"CF_SelectTrackFX\", MediaTrack track, int index)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean",
          "description": "true, setting was successful; false, setting was unsuccessful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.CF_SelectTrackFX",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Set the online/offline status of the given source (closes files when set=false).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "PCM_source src", "description": "" },
        { "identifier": "boolean set", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CF_SetMediaSourceOnline(SWS)",
    "functioncall": {
      "lua": "reaper.CF_SetMediaSourceOnline(PCM_source src, boolean set)",
      "cpp": "void CF_SetMediaSourceOnline(PCM_source* src, bool set)",
      "python": "CF_SetMediaSourceOnline(PCM_source src, Boolean set)",
      "eel": "extension_api(\"CF_SetMediaSourceOnline\", PCM_source src, bool set)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "src", "type": "PCM_source" },
          { "identifier": "set", "type": "boolean" }
        ],
        "method_name": "reaper.CF_SetMediaSourceOnline",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Api-Helper-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Open the given file or URL in the default application. See also [CF\\_LocateInExplorer](#CF_LocateInExplorer).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string file", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CF_ShellExecute(SWS)",
    "functioncall": {
      "lua": "boolean reaper.CF_ShellExecute(string file)",
      "cpp": "bool CF_ShellExecute(const char* file)",
      "python": "Boolean  CF_ShellExecute(String file)",
      "eel": "bool extension_api(\"CF_ShellExecute\", \"file\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "file", "type": "string" }
        ],
        "method_name": "reaper.CF_ShellExecute",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "This function combines all other NF\\_Peak/RMS functions in a single one and additionally returns peak RMS positions.  \n\n[Lua example code here](https://forum.cockos.com/showpost.php?p=2050961&postcount=6). \n\nNote: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. \nIf using this function with other scripting languages, you must provide arrays in the [reaper.array format](https://forum.cockos.com/showpost.php?p=2039829&postcount=2).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaItem item", "description": "" },
        { "identifier": "number windowSize", "description": "" },
        { "identifier": "identifier reaper.array_peaks", "description": "" },
        { "identifier": "identifier reaper.array_peakpositions", "description": "" },
        { "identifier": "identifier reaper.array_RMSs", "description": "" },
        { "identifier": "identifier reaper.array_RMSpositions", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "NF_AnalyzeMediaItemPeakAndRMS(SWS)",
    "functioncall": {
      "lua": "boolean reaper.NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, number windowSize, identifier reaper.array_peaks, identifier reaper.array_peakpositions, identifier reaper.array_RMSs, identifier reaper.array_RMSpositions)",
      "cpp": "bool NF_AnalyzeMediaItemPeakAndRMS(MediaItem* item, double windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)",
      "python": "Boolean  NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, Float windowSize, void reaper.array_peaks, void reaper.array_peakpositions, void reaper.array_RMSs, void reaper.array_RMSpositions)",
      "eel": "bool extension_api(\"NF_AnalyzeMediaItemPeakAndRMS\", MediaItem item, windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "windowSize", "type": "number" },
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "reaper", "type": "identifier" },
          { "identifier": "reaper", "type": "identifier" }
        ],
        "method_name": "reaper.NF_AnalyzeMediaItemPeakAndRMS",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Audio Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "See [NF\\_GetMediaItemMaxPeak](#NF_GetMediaItemMaxPeak), additionally returns maxPeakPos (relative to item position).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MediaItem item", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetMediaItemMaxPeakAndMaxPeakPos(SWS)",
    "functioncall": {
      "lua": "number retval, number maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem item)",
      "cpp": "double NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem* item, double* maxPeakPosOut)",
      "python": "(Float retval, MediaItem item, Float maxPeakPosOut) = NF_GetMediaItemMaxPeakAndMaxPeakPos(item, maxPeakPosOut)",
      "eel": "double extension_api(\"NF_GetMediaItemMaxPeakAndMaxPeakPos\", MediaItem item, &amp;maxPeakPos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number retval", "description": "" },
        { "identifier": "number maxPeakPos", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "item", "type": "MediaItem" }],
        "method_name": "reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos",
        "return_values": [
          { "identifier": "retval", "type": "number" },
          { "identifier": "maxPeakPos", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns SWS/S&amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers) (not displayed marker/region index).  \nReturns empty string if marker/region with specified index not found or marker/region subtitle not set.  \n\n[Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer markerRegionIdx", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetSWSMarkerRegionSub(SWS)",
    "functioncall": {
      "lua": "string reaper.NF_GetSWSMarkerRegionSub(integer markerRegionIdx)",
      "cpp": "const char* NF_GetSWSMarkerRegionSub(int markerRegionIdx)",
      "python": "String  NF_GetSWSMarkerRegionSub(Int markerRegionIdx)",
      "eel": "bool extension_api(\"NF_GetSWSMarkerRegionSub\", #retval, int markerRegionIdx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "string" },
          { "identifier": "markerRegionIdx", "type": "integer" }
        ],
        "method_name": "reaper.NF_GetSWSMarkerRegionSub",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the SWS tracknotes.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaTrack track",
          "description": "the track, whose SWS-tracknotes you want to get"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "NF_GetSWSTrackNotes(SWS)",
    "functioncall": {
      "lua": "string tracknotes - reaper.NF_GetSWSTrackNotes(MediaTrack track)",
      "cpp": "const char* NF_GetSWSTrackNotes(MediaTrack* track)",
      "python": "String NF_GetSWSTrackNotes(MediaTrack track)",
      "eel": "bool extension_api(\"NF_GetSWSTrackNotes\", #retval, MediaTrack track)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "string tracknotes", "description": "the stored notes" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "tracknotes", "type": "string" },
          { "identifier": "track", "type": "MediaTrack" }
        ],
        "method_name": "reaper.NF_GetSWSTrackNotes",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get SWS analysis/normalize options. See [NF\\_SetSWS\\_RMSoptions](#NF_SetSWS_RMSoptions).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "NF_GetSWS_RMSoptions(SWS)",
    "functioncall": {
      "lua": "number target, number windowSize = reaper.NF_GetSWS_RMSoptions()",
      "cpp": "void NF_GetSWS_RMSoptions(double* targetOut, double* windowSizeOut)",
      "python": "(Float targetOut, Float windowSizeOut) = NF_GetSWS_RMSoptions(targetOut, windowSizeOut)",
      "eel": "extension_api(\"NF_GetSWS_RMSoptions\", &target, &windowSize)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number target", "description": "" },
        { "identifier": "number windowSize", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.NF_GetSWS_RMSoptions",
        "return_values": [
          { "identifier": "target", "type": "number" },
          { "identifier": "windowSize", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["MetaData Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reads an ID3v2 tag ('text information frame'), works with mp3 only. Supported tags e.g.: \"TBPM\" (BPM), \"TCOP\" (Copyright). For other possibly supported tags see [id3v2.4.0-frames.txt](http://id3.org/id3v2.4.0-frames) Returns false if tag was not found.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string fn",
          "description": "the filename with path of the mp3-file, whose tag-value you want to request"
        },
        {
          "identifier": "string tag",
          "description": "the tag, which you want to retrieve, like TIT2(Title), TPE1(Artist), TPE2(Albumartist), TALB(Album), TRCK(Track), TCON(Genre), TYER(Year), TDRC(Recording time: YYYY-MM-DD), TKEY(Key), TBPM(Tempo), TSRC(International Standard Recording Code), COMM(Comment), COMM_LANG(Comment language, etc"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_ReadID3v2Tag(SWS)",
    "functioncall": {
      "lua": "boolean retval, string tagval = reaper.NF_ReadID3v2Tag(string fn, string tag)",
      "cpp": "bool NF_ReadID3v2Tag(const char* fn, const char* tag, char* tagvalOut, int tagvalOut_sz)",
      "python": "(Boolean retval, String fn, String tag, String tagvalOut, Int tagvalOut_sz) = NF_ReadID3v2Tag(fn, tag, tagvalOut, tagvalOut_sz)",
      "eel": "bool extension_api(\"NF_ReadID3v2Tag\", \"fn\", \"tag\", #tagval)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, requested tag exists in the file; false, requested tag does not exist in the file"
        },
        { "identifier": "string tagval", "description": "the value of the tag" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "fn", "type": "string" },
          { "identifier": "tag", "type": "string" }
        ],
        "method_name": "reaper.NF_ReadID3v2Tag",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "tagval", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Marker Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Set SWS/S&amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to [EnumProjectMarkers](#EnumProjectMarkers)(not displayed marker/region index).  \nReturns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). \n\n[Lua code example can be found here](https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua\")",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string markerRegionSub", "description": "" },
        { "identifier": "integer markerRegionIdx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_SetSWSMarkerRegionSub(SWS)",
    "functioncall": {
      "lua": "boolean reaper.NF_SetSWSMarkerRegionSub(string markerRegionSub, integer markerRegionIdx)",
      "cpp": "bool NF_SetSWSMarkerRegionSub(const char* markerRegionSub, int markerRegionIdx)",
      "python": "Boolean  NF_SetSWSMarkerRegionSub(String markerRegionSub, Int markerRegionIdx)",
      "eel": "bool extension_api(\"NF_SetSWSMarkerRegionSub\", \"markerRegionSub\", int markerRegionIdx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "markerRegionSub", "type": "string" },
          { "identifier": "markerRegionIdx", "type": "integer" }
        ],
        "method_name": "reaper.NF_SetSWSMarkerRegionSub",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "MediaTrack track", "description": "" },
        { "identifier": "string str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_SetSWSTrackNotes(SWS)",
    "functioncall": {
      "lua": "reaper.NF_SetSWSTrackNotes(MediaTrack track, string str)",
      "cpp": "void NF_SetSWSTrackNotes(MediaTrack* track, const char* str)",
      "python": "NF_SetSWSTrackNotes(MediaTrack track, String str)",
      "eel": "extension_api(\"NF_SetSWSTrackNotes\", MediaTrack track, \"str\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "track", "type": "MediaTrack" },
          { "identifier": "str", "type": "string" }
        ],
        "method_name": "reaper.NF_SetSWSTrackNotes",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["Track Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)\n\nSee [NF\\_GetSWS\\_RMSoptions](#NF_GetSWS_RMSoptions).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number targetLevel", "description": "" },
        { "identifier": "number windowSize", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "NF_SetSWS_RMSoptions(SWS)",
    "functioncall": {
      "lua": "boolean retval - reaper.NF_SetSWS_RMSoptions(number targetLevel, number windowSize)",
      "cpp": "bool NF_SetSWS_RMSoptions(double targetLevel, double windowSize)",
      "python": "Boolean NF_SetSWS_RMSoptions(Float targetLevel, Float windowSize)",
      "eel": "bool extension_api(\"NF_SetSWS_RMSoptions\", targetLevel, windowSize)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "targetLevel", "type": "number" },
          { "identifier": "windowSize", "type": "number" }
        ],
        "method_name": "reaper.NF_SetSWS_RMSoptions",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.11.0", "Reaper": "5.965" },
    "chapers": ["MetaData Management"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated.\nRetrieves the name of the module of a takefx from a MediaItem.\n\n            See [BR\\_TrackFX\\_GetFXModuleName](#BR_TrackFX_GetFXModuleName). fx: counted consecutively across all takes (zero-based).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "MediaItem item",
          "description": "the MediaItem, whose modulename of an effect you want to receive"
        },
        {
          "identifier": "integer fx",
          "description": "the index of the fx(with 0 for the first), whose modulename you want to receive"
        },
        { "identifier": "string name", "description": "just pass \"\" to it" },
        {
          "identifier": "integer buf_sz",
          "description": "the number of characters you want to retrieve for the module-name"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "NF_TakeFX_GetModuleName(SWS)",
    "functioncall": {
      "lua": "boolean retval, string name = reaper.NF_TakeFX_GetModuleName(MediaItem item, integer fx)",
      "cpp": "bool NF_TakeFX_GetModuleName(MediaItem* item, int fx, char* nameOut, int nameOutSz)",
      "python": "(Boolean retval, MediaItem item, Int fx, String nameOut, Int nameOutSz) = NF_TakeFX_GetModuleName(item, fx, nameOut, nameOutSz)",
      "eel": "bool extension_api(\"NF_TakeFX_GetModuleName\", MediaItem item, int fx, # name, int name)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, modulename could be retrieved; false, modulename couldn't be retrieved(e.g. no such fx)"
        },
        { "identifier": "string name", "description": "the name of the module" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "item", "type": "MediaItem" },
          { "identifier": "fx", "type": "integer" }
        ],
        "method_name": "reaper.NF_TakeFX_GetModuleName",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "name", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.10.0.1", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Redraw the Notes window (call if you've changed a subtitle via [NF\\_SetSWSMarkerRegionSub](#NF_SetSWSMarkerRegionSub) which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "NF_UpdateSWSMarkerRegionSubWindow(SWS)",
    "functioncall": {
      "lua": "reaper.NF_UpdateSWSMarkerRegionSubWindow()",
      "cpp": "void NF_UpdateSWSMarkerRegionSubWindow()",
      "python": "NF_UpdateSWSMarkerRegionSubWindow()",
      "eel": "extension_api(\"NF_UpdateSWSMarkerRegionSubWindow\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.NF_UpdateSWSMarkerRegionSubWindow",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "SWS": "2.12.0", "Reaper": "5.965" },
    "chapers": ["User Interface"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "This function allows you to get various information about your display.\n        \nEquivalent to [win32 API GetSystemMetrics()](https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getsystemmetrics).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "NF_Win32_GetSystemMetrics(SWS)",
    "functioncall": {
      "lua": "integer retval = reaper.NF_Win32_GetSystemMetrics(integer nIndex)",
      "cpp": "int NF_Win32_GetSystemMetrics(int nIndex)",
      "python": "Int NF_Win32_GetSystemMetrics(Int nIndex)",
      "eel": "int extension_api(\"NF_Win32_GetSystemMetrics\", int nIndex)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "the returned value" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "nIndex", "type": "integer" }],
        "method_name": "reaper.NF_Win32_GetSystemMetrics",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the absolute value of the parameter.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "abs",
    "functioncall": { "eel": "abs(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "eel",
      "description": "Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "acos",
    "functioncall": { "eel": "acos(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "asin",
    "functioncall": { "eel": "asin(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "atan",
    "functioncall": { "eel": "atan(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "numerator", "description": "" },
        { "identifier": "denominator", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "atan2",
    "functioncall": { "eel": "atan2(numerator,denominator)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "code", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "atexit",
    "functioncall": { "eel": "atexit(code)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ceil",
    "functioncall": { "eel": "ceil(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "convolve_c",
    "functioncall": { "eel": "convolve_c(dest,src,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "eel",
      "description": "Returns the cosine of the angle specified (specified in radians).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "angle", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "cos",
    "functioncall": { "eel": "cos(angle)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nEach function called by defer can only be deferred once per defer-cycle(unlike in Lua, where you can have one function deferred multiple times).\n\nUnlike \"normal\" loops, defer allows looped code to run in the background without blocking Reaper's user interface.\nThat way, scripts, who need longer time to run, can be made possible.\n\nExample:\nthe following example allows adding a to variable A with each defer-cycle.\n<pre><code>\nfunction main()(\n  A=A+1;\n  defer(\"main()\");\n);\n\nmain();\n</code></pre>",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string code",
          "description": "the code to be run. You can also add a regular functioncall into this string, like \"main()\", if there's a main-function in the script"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "defer",
    "functioncall": { "eel": "defer(string \"code\")" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "eel",
      "description": "Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "code", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "eval",
    "functioncall": { "eel": "eval(code)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "eel",
      "description": "Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "exponent", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "exp",
    "functioncall": { "eel": "exp(exponent)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "functionname", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "extension_api",
    "functioncall": { "eel": "extension_api(function_name[,...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Closes a file previously opened with fopen().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "fclose",
    "functioncall": { "eel": "fclose(fp)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns nonzero if the file fp is at the end of file.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "feof",
    "functioncall": { "eel": "feof(fp)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If file fp is open for writing, flushes out any buffered data to disk.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "fflush",
    "functioncall": { "eel": "fflush(fp)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.\nNote that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.\nNote that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fft",
    "functioncall": { "eel": "fft(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See [fft()](#eel_fft) for more information.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fft_ipermute",
    "functioncall": { "eel": "fft_ipermute(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Permute the output of fft() to have bands in-order. See [fft()](#eel_fft) for more information.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fft_permute",
    "functioncall": { "eel": "fft_permute(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fft_real",
    "functioncall": { "eel": "fft_real(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reads a character from file fp, returns -1 if EOF.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "fgetc",
    "functioncall": { "eel": "fgetc(fp)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reads a line from file fp into #str. Returns length of #str read.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fp", "description": "" },
        { "identifier": "#str", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fgets",
    "functioncall": { "eel": "fgets(fp,#str)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "floor",
    "functioncall": { "eel": "floor(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Opens a file \"fn\" with mode \"mode\". For read, use \"r\" or \"rb\", write \"w\" or \"wb\". Returns a positive integer on success.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fn", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "fopen",
    "functioncall": { "eel": "fopen(fn,mode)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Formats a string and writes it to file fp. For more information on format specifiers, see [sprintf()](#eel_sprintf). Returns bytes written to file.\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to fprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fp", "description": "" },
        { "identifier": "format", "description": "" },
        { "identifier": "[...]", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "fprintf",
    "functioncall": { "eel": "fprintf(fp,format[,...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fp", "description": "" },
        { "identifier": "#str", "description": "" },
        { "identifier": "length", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "fread",
    "functioncall": { "eel": "fread(fp,#str,length)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "address", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "freembuf",
    "functioncall": { "eel": "freembuf(address)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fp", "description": "" },
        { "identifier": "offset", "description": "" },
        { "identifier": "whence", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "fseek",
    "functioncall": { "eel": "fseek(fp,offset,whence)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the current file position.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "fp", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ftell",
    "functioncall": { "eel": "ftell(fp)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fp", "description": "" },
        { "identifier": "#str", "description": "" },
        { "identifier": "len", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "fwrite",
    "functioncall": { "eel": "fwrite(fp,#str,len)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Queries contextual information about the script, typically MIDI/OSC input values.\nReturns true if a new value has been updated.\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nNotes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\nFor relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#filename", "description": "" },
        { "identifier": "sectionID", "description": "" },
        { "identifier": "cmdID", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "resolution", "description": "" },
        { "identifier": "val", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "get_action_context",
    "functioncall": { "eel": "get_action_context(#filename,sectionID,cmdID,mode,resolution,val)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.97" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "The following global variables are special and will be used by the graphics system:\n\n   * gfx_r, gfx_g, gfx_b, gfx_a2 - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx_a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)\n   * gfx_a, gfx_mode - Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). \n   * gfx_w, gfx_h - These are set to the current width and height of the UI framebuffer. \n   * gfx_x, gfx_y - These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. \n   * gfx_clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). \n   * gfx_dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).\n   * gfx_texth - Set to the height of a line of text in the current font. Do not modify this variable.\n   * gfx_ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx_w/gfx_h/etc will be doubled.\n   * mouse_x, mouse_y - mouse_x and mouse_y are set to the coordinates of the mouse relative to the graphics window.\n   * mouse_wheel, mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n   * mouse_cap is a bitfield of mouse and keyboard modifier state.\n        1: left mouse button\n        2: right mouse button\n        4: Control key\n        8: Shift key\n        16: Alt key\n        32: Windows key\n        64: middle mouse button\n    Note: Mousebuttons will be returned after gfx_init(), the other keyboard-modifier only when using gfx_getchar()!",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx_variables",
    "functioncall": { "eel": "gfx VARIABLES" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "x position of the center of the circle" },
        { "identifier": "y", "description": "y position of the center of the circle" },
        { "identifier": "r", "description": "the radius of the circle" },
        {
          "identifier": "ang1",
          "description": "the beginning of the circle in radians; meant for partial circles; 0-6.28"
        },
        {
          "identifier": "ang2",
          "description": "the end of the circle in radians; meant for partial circles; 0-6.28"
        },
        { "identifier": "antialias", "description": "<=0.5, antialias off; >0.5, antialias on" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx_arc",
    "functioncall": { "eel": "gfx_arc(x,y,r,ang1,ang2[,antialias])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source", "description": "" },
        { "identifier": "scale", "description": "" },
        { "identifier": "rotation", "description": "" },
        { "identifier": "srcx", "description": "" },
        { "identifier": "srcy", "description": "" },
        { "identifier": "srcw", "description": "" },
        { "identifier": "srch", "description": "" },
        { "identifier": "destx", "description": "" },
        { "identifier": "desty", "description": "" },
        { "identifier": "destw", "description": "" },
        { "identifier": "desth", "description": "" },
        { "identifier": "rotxoffs", "description": "" },
        { "identifier": "rotyoffs", "description": "" }
      ],
      "param_count": 13,
      "markup_type": "plaintext"
    },
    "title": "gfx_blit",
    "functioncall": {
      "eel": "gfx_blit(source, scale, rotation[, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If three parameters are specified, copies the entirity of the source bitmap to gfx\\_x,gfx\\_y using current opacity and copy mode (set with gfx\\_a, gfx\\_mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).\nFor the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see [gfx\\_loadimg()](#eel_gfx_loadimg).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source", "description": "" },
        { "identifier": "scale", "description": "" },
        { "identifier": "rotation", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_blit",
    "functioncall": { "eel": "gfx_blit(source,scale,rotation)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated, use gfx_blit instead.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source", "description": "" },
        { "identifier": "coordinatelist", "description": "" },
        { "identifier": "rotation", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_blitext",
    "functioncall": { "eel": "gfx_blitext(source,coordinatelist,rotation)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "x position of the other edge of the blur-region" },
        { "identifier": "y", "description": "y position of the other edge of the blur-region" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_blurto",
    "functioncall": { "eel": "gfx_blurto(x,y)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a circle, optionally filling/antialiasing",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "x position of center of the circle" },
        { "identifier": "y", "description": "y position of center of the circle" },
        { "identifier": "r", "description": "radius of the circle" },
        {
          "identifier": "fill",
          "description": "<=0.5, circle is not filled; >0.5, circle is filled"
        },
        {
          "identifier": "antialias",
          "description": "<=0.5, circle is not antialiased; >0.5, circle is antialiased"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx_circle",
    "functioncall": { "eel": "gfx_circle(x,y,r[,fill,antialias])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts client coordinates x,y to screen coordinates.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "x",
          "description": "the x coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates"
        },
        {
          "identifier": "y",
          "description": "the y coordinate within(!) the gfx_init()-window, that shall be converted to screen-coordinates "
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_clienttoscreen",
    "functioncall": { "eel": "gfx_clienttoscreen(x,y)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.95" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.\n\nThis function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.\n\nTo do rotation, you can manipulate dtdx and dsdy together.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "srcimg", "description": "image - the image to blit" },
        {
          "identifier": "srcs",
          "description": "positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "srct",
          "description": "positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)"
        },
        { "identifier": "srcw", "description": "unknown - (useful default: 0)" },
        { "identifier": "srch", "description": "unknown - (useful default: 0)" },
        {
          "identifier": "destx",
          "description": "positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "desty",
          "description": "positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "destw",
          "description": "blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)"
        },
        {
          "identifier": "desth",
          "description": "blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)"
        },
        {
          "identifier": "dsdx",
          "description": "stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)"
        },
        {
          "identifier": "dtdx",
          "description": "deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)"
        },
        {
          "identifier": "dsdy",
          "description": "deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)"
        },
        {
          "identifier": "dtdy",
          "description": "stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)"
        },
        {
          "identifier": "dsdxdy",
          "description": "deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta \"curves\" the delta via a bezier(useful default: 0)"
        },
        {
          "identifier": "dtdxdy",
          "description": "deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta \"curves\" the delta via a bezier(useful default: 0)"
        },
        { "identifier": "usecliprect", "description": "can be set to 0 or 1(useful default: 0)" }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "gfx_deltablit",
    "functioncall": {
      "eel": "gfx_deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "v",
          "description": "-1, query docking-state; 0 and higher, set state of the window to docked"
        },
        { "identifier": "wx", "description": "set to a number to query current-windowx-position" },
        { "identifier": "wy", "description": "set to a number to query current-windowy-position" },
        { "identifier": "ww", "description": "set to a number to query current-window-width" },
        { "identifier": "wh", "description": "set to a number to query current-window-height" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx_dock",
    "functioncall": { "eel": "gfx_dock(v[,wx,wy,ww,wh])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "querystate",
          "description": "0 if not docked; &amp;1 if docked; the byte &amp;9 to &amp;16 returns the docker-index"
        },
        {
          "identifier": "window_x_position",
          "description": "the x position of the window in pixels"
        },
        {
          "identifier": "window_y_position",
          "description": "the y position of the window in pixels"
        },
        { "identifier": "window_width", "description": "the width of the window in pixels" },
        { "identifier": "window_height", "description": "the height of the window in pixels " }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "char",
          "description": "the numeric ASCII-representation of the character to be drawn"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx_drawchar",
    "functioncall": { "eel": "gfx_drawchar(char)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "n", "description": "" },
        { "identifier": "n digits", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_drawnumber",
    "functioncall": { "eel": "gfx_drawnumber(n,ndigits)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a string at gfx\\_x, gfx\\_y, and updates gfx\\_x/gfx\\_y so that subsequent draws will occur in a similar place.\n\n\\* If flags, right ,bottom passed in:\n\\* flags&amp;1: center horizontally\n\\* flags&amp;2: right justify\n\\* flags&amp;4: center vertically\n\\* flags&amp;8: bottom justify\n\\* flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx\\_x, gfx\\_y, right, bottom)",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "flags", "description": "" },
        { "identifier": "right", "description": "" },
        { "identifier": "bottom", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "gfx_drawstr",
    "functioncall": { "eel": "gfx_drawstr(str[,flags,right,bottom])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\n\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\t\t\t\n\t\t\tShortcuts with scope \"Global + textfields\" will still run the associated action, scope of \"Normal\" or \"Global\" will not.\n\nModified and special keys can also be returned, including:\n\n    \\* Ctrl/Cmd+A..Ctrl+Z as 1..26\n    \\* Ctrl/Cmd+Alt+A..Z as 257..282\n    \\* Alt+A..Z as 'A'+256..'Z'+256\n    \\* 27 for ESC\n    \\* 13 for Enter\n    \\* ' ' for space",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx_getchar",
    "functioncall": { "eel": "gfx_getchar([char])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "#str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx_getfont",
    "functioncall": { "eel": "gfx_getfont([#str])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "image", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx_getimgdim",
    "functioncall": { "eel": "gfx_getimgdim(image,w,h)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets the value of the pixel at gfx_x,gfx_y into r,g,b. ",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx_getpixel",
    "functioncall": { "eel": "gfx_getpixel(r,g,b)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "r", "description": "the red-color-value, a value between 0 to 1" },
        { "identifier": "g", "description": "the green-color-value, a value between 0 to 1" },
        { "identifier": "b", "description": "the blue-color-value, a value between 0 to 1" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "r", "description": "" },
        { "identifier": "g", "description": "" },
        { "identifier": "b", "description": "" },
        { "identifier": "a", "description": "" },
        { "identifier": "drdx", "description": "" },
        { "identifier": "dgdx", "description": "" },
        { "identifier": "dbdx", "description": "" },
        { "identifier": "dadx", "description": "" },
        { "identifier": "drdy", "description": "" },
        { "identifier": "dgdy", "description": "" },
        { "identifier": "dbdy", "description": "" },
        { "identifier": "dady", "description": "" }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "gfx_gradrect",
    "functioncall": {
      "eel": "gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Initializes the graphics window with title name. Suggested width and height can be specified.\n\nOnce the graphics window is open, [gfx\\_update()](#eel_gfx_update) should be called periodically. \n\t\t\n\t\tTo resizes/reposition the window, call gfx_init again and pass an empty string as name-parameter.\n\nTo get the current window-states, dimensions, etc, you can use [gfx_dock](#eel_gfx_dock).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "gfx_init",
    "functioncall": { "eel": "gfx_init(name[,width,height,dockstate,xpos,ypos])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "x2", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx_line",
    "functioncall": { "eel": "gfx_line(x,y,x2,y2[,aa])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_lineto",
    "functioncall": { "eel": "gfx_lineto(x,y[,aa])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "image", "description": "" },
        { "identifier": "filename", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_loadimg",
    "functioncall": { "eel": "gfx_loadimg(image,filename)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "character",
          "description": "a character, whose dimensions you want to know"
        },
        { "identifier": "w", "description": "the width of this character" },
        { "identifier": "h", "description": "the height if this character" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_measurechar",
    "functioncall": { "eel": "gfx_measurechar(character,&amp;w,&amp;h)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Measures the drawing dimensions of a string with the current font (as set by gfx_setfont). ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_measurestr",
    "functioncall": { "eel": "gfx_measurestr(str,&amp;w,&amp;h)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "mul_r", "description": "" },
        { "identifier": "mul_g", "description": "" },
        { "identifier": "mul_b", "description": "" },
        { "identifier": "mul_a", "description": "" },
        { "identifier": "add_r", "description": "" },
        { "identifier": "add_g", "description": "" },
        { "identifier": "add_b", "description": "" },
        { "identifier": "add_a", "description": "" }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "title": "gfx_muladdrect",
    "functioncall": {
      "eel": "gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Formats and draws a string at gfx\\_x, gfx\\_y, and updates gfx\\_x/gfx\\_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see [sprintf()](#eel_sprintf)\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to gfx_printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "format", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_printf",
    "functioncall": { "eel": "gfx_printf(format[, ...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Closes the graphics window.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx_quit",
    "functioncall": { "eel": "gfx_quit()" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a rectangle at x,y,w,h pixels in dimension, filled by default. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "filled", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx_rect",
    "functioncall": { "eel": "gfx_rect(x,y,w,h[,filled])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_rectto",
    "functioncall": { "eel": "gfx_rectto(x,y)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a rectangle with rounded corners. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "radius", "description": "" },
        { "identifier": "antialias", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx_roundrect",
    "functioncall": { "eel": "gfx_roundrect(x,y,w,h,radius[,antialias])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts screen coordinates x,y to client coordinates.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_screentoclient",
    "functioncall": { "eel": "gfx_screentoclient(x,y)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets gfx_r/gfx_g/gfx_b/gfx_a2/gfx_mode, sets gfx_dest if final parameter specified",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "r", "description": "" },
        { "identifier": "g", "description": "" },
        { "identifier": "b", "description": "" },
        { "identifier": "a", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "dest", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx_set",
    "functioncall": { "eel": "gfx_set(r[,g,b,a2,mode,dest])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "resource_id", "description": "" },
        { "identifier": "custom_cursor_name", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx_setcursor",
    "functioncall": { "eel": "gfx_setcursor(resource_id,custom_cursor_name)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.91" },
    "chapers": ["Additional EEL-Functions"],
    "tags": ["dragndrop", "drop", "file", "filename", "window", "gfx", "window", "eel"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns filenames, drag'n'dropped into a window created by gfx_init().\nUse idx to get a specific filename, that has been dropped into the gfx_init()-window.\n\nDoes NOT support mediaitems/takes or other Reaper-objects!\n\nIt MUST be called BEFORE calling gfx_update, as gfx_update flushes the filelist accessible with gfx_getdropfile.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the indexnumber for a filename, that has been dropped into a gfx_init()-window.\n0, the first file; 1, the second file; 2, the third file, etc.\n-1, clears the filelist."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "eel_getdropfile",
    "functioncall": { "eel": "integer retval = gfx_getdropfile(integer idx[, string #filename])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already read all dropped filenames."
        },
        {
          "identifier": "string filename",
          "description": "the filename of dropped-file with indexnumber idx"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Can select a font and optionally configure it. \n\nAfter calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "idx",
          "description": "the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.\nidx=1..16 for a configurable font"
        },
        { "identifier": "fontface", "description": "the name of the font, like \"arial\"" },
        { "identifier": "sz", "description": "the size of the font (8-100)" },
        {
          "identifier": "flags",
          "description": "flags, how to render the text; values are repeating every 256 numbers\na multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. \nThese flags may or may not be supported depending on the font and OS. \n66 and 98, Bold (B), (b)\n73 and 105, italic (I), (i)\n79 and 111, white outline (O), (o)\n82 and 114, reduced(halfbright) (R), (r)\n83 and 115, sharpen (S), (s)\n85 and 117, underline (U), (u)\n86 and 118, inVerse (V), (v)"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "gfx_setfont",
    "functioncall": { "eel": "gfx_setfont(idx[,fontface, sz, flags])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.14" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "image", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_setimgdim",
    "functioncall": { "eel": "gfx_setimgdim(image,w,h)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Writes a pixel of r,g,b to gfx_x,gfx_y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "r", "description": "" },
        { "identifier": "g", "description": "" },
        { "identifier": "b", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx_setpixel",
    "functioncall": { "eel": "gfx_setpixel(r,g,b)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Shows a popup menu at gfx_x,gfx_y. \nstr is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\n\nAn empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\n\ngfx_showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx_showmenu",
    "functioncall": { "eel": "gfx_showmenu(str)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "srcimg", "description": "" },
        { "identifier": "destx", "description": "" },
        { "identifier": "desty", "description": "" },
        { "identifier": "destw", "description": "" },
        { "identifier": "desth", "description": "" },
        { "identifier": "div_w", "description": "" },
        { "identifier": "div_h", "description": "" },
        { "identifier": "table", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "gfx_transformblit",
    "functioncall": {
      "eel": "gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a filled triangle, or any convex polygon. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x1", "description": "" },
        { "identifier": "y1", "description": "" },
        { "identifier": "x2", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "x3", "description": "" },
        { "identifier": "y3", "description": "" },
        { "identifier": "x4", "description": "" },
        { "identifier": "y4", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "gfx_triangle",
    "functioncall": { "eel": "gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Updates the graphics display, if opened.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx_update",
    "functioncall": { "eel": "gfx_update()" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Perform an inverse FFT. For more information see [fft()](#eel_fft).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ifft",
    "functioncall": { "eel": "ifft(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "buffer", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "ifft_real",
    "functioncall": { "eel": "ifft_real(buffer,size)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "invsqrt",
    "functioncall": { "eel": "invsqrt(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "log",
    "functioncall": { "eel": "log(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "log10",
    "functioncall": { "eel": "log10(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Evaluates count once, and then executes expression count, but not more than 1048576, times.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "count", "description": "" },
        { "identifier": "expression", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "loop",
    "functioncall": { "eel": "loop(count,expression)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Searches for the first parameter in the second parameter, using a simplified regular expression syntax.\n\n* * = match 0 or more characters\n* \\*? = match 0 or more characters, lazy\n* + = match 1 or more characters\n* +? = match 1 or more characters, lazy\n* ? = match one character\n\nYou can also use format specifiers to match certain types of data, and optionally put that into a variable:\n\n* %s means 1 or more chars\n* %0s means 0 or more chars\n* %5s means exactly 5 chars\n* %5-s means 5 or more chars\n* %-10s means 1-10 chars\n* %3-5s means 3-5 chars\n* %0-5s means 0-5 chars\n* %x, %d, %u, and %f are available for use similarly\n* %c can be used, but can't take any length modifiers\n* Use uppercase (%S, %D, etc) for lazy matching\n\nSee also sprintf() for other notes, including specifying direct variable references via {}.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "needle", "description": "" },
        { "identifier": "haystack", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "match",
    "functioncall": { "eel": "match(needle,haystack[, ...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Case-insensitive version of [match()](#eel_matchi).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "needle", "description": "" },
        { "identifier": "haystack", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "matchi",
    "functioncall": { "eel": "matchi(needle,haystack[, ...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "value", "description": "" },
        { "identifier": "value2", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "max",
    "functioncall": { "eel": "max(&amp;value,&amp;value2)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "offset", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "mem_get_values",
    "functioncall": { "eel": "mem_get_values(offset, ...)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "offset", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "mem_set_values",
    "functioncall": { "eel": "mem_set_values(offset, ...)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies length items of memory from src to dest. Regions are permitted to overlap.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "length", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "memcpy",
    "functioncall": { "eel": "memcpy(dest,src,length)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets length items of memory at offset to value.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "offset", "description": "" },
        { "identifier": "value", "description": "" },
        { "identifier": "length", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "memset",
    "functioncall": { "eel": "memset(offset,value,length)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "value", "description": "" },
        { "identifier": "value2", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "min",
    "functioncall": { "eel": "min(&amp;value,&amp;value2)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Output formatted string to system-specific destination, see [sprintf\\(\\)](#eel_sprintf) for more information\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "format", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "printf",
    "functioncall": { "eel": "printf(format[, ...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a psuedorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "max", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "rand",
    "functioncall": { "eel": "rand([max])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\n\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nEach function called by runloop can only be deferred once per runloop-cycle(unlike in Lua, where you can have one function deferred multiple times).\n\nUnlike \"normal\" loops, runloop allows looped code to run in the background without blocking Reaper's user interface.\nThat way, scripts, who need longer time to run, can be made possible.\n\nExample:\nthe following example allows adding a to variable A with each runloop-cycle.\n<pre><code>\nfunction main()(\n  A=A+1;\n  runloop(\"main()\");\n);\n\nmain();\n</code></pre>",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string code",
          "description": "the code to be run. You can also add a regular functioncall into this string, like \"main()\", if there's a main-function in the script"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "runloop",
    "functioncall": { "eel": "runloop(string code)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "sign",
    "functioncall": { "eel": "sign(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "angle", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "sin",
    "functioncall": { "eel": "sin(angle)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "ms", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "sleep",
    "functioncall": { "eel": "sleep(ms)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Formats a string and stores it in #dest. Format specifiers begin with %, and may include:\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#dest", "description": "" },
        { "identifier": "format", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "sprintf",
    "functioncall": { "eel": "sprintf(#dest,format[, ...])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the square of the parameter (similar to value*value, but only evaluating value once).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "sqr",
    "functioncall": { "eel": "sqr(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the square root of the parameter. If the parameter is negative, the return value is undefined.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "sqrt",
    "functioncall": { "eel": "sqrt(value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "stack_exch",
    "functioncall": { "eel": "stack_exch(&amp;value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "index", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "stack_peek",
    "functioncall": { "eel": "stack_peek(index)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "stack_pop",
    "functioncall": { "eel": "stack_pop(&amp;value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Pushes value onto the user stack, returns a reference to the parameter.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "value", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "stack_push",
    "functioncall": { "eel": "stack_push(&amp;value)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deletes len characters at offset pos from #str, and returns #str.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "pos", "description": "" },
        { "identifier": "len", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "str_delsub",
    "functioncall": { "eel": "str_delsub(#str,pos,len)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):\n\n    \\* 'c' - signed char\n    \\* 'cu' - unsigned char\n    \\* 's' - signed short\n    \\* 'S' - signed short, big endian\n    \\* 'su' - unsigned short\n    \\* 'Su' - unsigned short, big endian\n    \\* 'i' - signed int\n    \\* 'I' - signed int, big endian\n    \\* 'iu' - unsigned int\n    \\* 'Iu' - unsigned int, big endian\n    \\* 'f' - float\n    \\* 'F' - float, big endian\n    \\* 'd' - double\n    \\* 'D' - double, big endian",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "offset", "description": "" },
        { "identifier": "type", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "str_getchar",
    "functioncall": { "eel": "str_getchar(str,offset[,type])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Inserts srcstr into #str at offset pos. Returns #str.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" },
        { "identifier": "pos", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "str_insert",
    "functioncall": { "eel": "str_insert(#str,srcstr,pos)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See [str\\_getchar()](#eel_str_getchar) for more information on types.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "offset", "description": "" },
        { "identifier": "val", "description": "" },
        { "identifier": "type", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "str_setchar",
    "functioncall": { "eel": "str_setchar(#str,offset,val[,type]))" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets length of #str (if increasing, will be space-padded), and returns #str.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "len", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "str_setlen",
    "functioncall": { "eel": "str_setlen(#str,len)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Appends srcstr to #str, and returns #str",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "strcat",
    "functioncall": { "eel": "strcat(#str,srcstr)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Compares strings, returning 0 if equal",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "str2", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "strcmp",
    "functioncall": { "eel": "strcmp(str,str2)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies the contents of srcstr to #str, and returns #str",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "strcpy",
    "functioncall": { "eel": "strcpy(#str,srcstr)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies srcstr to #str, but starts reading srcstr at offset offset",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" },
        { "identifier": "offset", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "strcpy_from",
    "functioncall": { "eel": "strcpy_from(#str,srcstr,offset)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PHP-style (start at offs, offs<0 means from end, ml for maxlen, ml<0 = reduce length by this amt)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" },
        { "identifier": "offs", "description": "" },
        { "identifier": "ml", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "strcpy_substr",
    "functioncall": { "eel": "strcpy_substr(#str,srcstr,offs,ml))" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Compares strings ignoring case, returning 0 if equal.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "str2", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "stricmp",
    "functioncall": { "eel": "stricmp(str,str2)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the length of the string passed as a parameter.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "str", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "strlen",
    "functioncall": { "eel": "strlen(str)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" },
        { "identifier": "maxlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "strncat",
    "functioncall": { "eel": "strncat(#str,srcstr,maxlen)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Compares strings giving up after maxlen characters, returning 0 if equal.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "str2", "description": "" },
        { "identifier": "maxlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "strncmp",
    "functioncall": { "eel": "strncmp(str,str2,maxlen)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies srcstr to #str, stopping after maxlen characters. Returns #str.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "#str", "description": "" },
        { "identifier": "srcstr", "description": "" },
        { "identifier": "maxlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "strncpy",
    "functioncall": { "eel": "strncpy(#str,srcstr,maxlen)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "str", "description": "" },
        { "identifier": "str2", "description": "" },
        { "identifier": "maxlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "strnicmp",
    "functioncall": { "eel": "strnicmp(str,str2,maxlen)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the tangent of the angle specified (specified in radians).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "angle", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "tan",
    "functioncall": { "eel": "tan(angle)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Closes a TCP connection created by tcp_listen() or tcp_connect().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "connection", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "tcp_close",
    "functioncall": { "eel": "tcp_close(connection)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "address", "description": "" },
        { "identifier": "port", "description": "" },
        { "identifier": "block", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "tcp_connect",
    "functioncall": { "eel": "tcp_connect(address,port[,block])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "port", "description": "" },
        { "identifier": "interface", "description": "" },
        { "identifier": "#ip_out", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "tcp_listen",
    "functioncall": { "eel": "tcp_listen(port[,interface,#ip_out])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Ends listening on port specified.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "port", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "tcp_listen_end",
    "functioncall": { "eel": "tcp_listen_end(port)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "connection", "description": "" },
        { "identifier": "#str", "description": "" },
        { "identifier": "maxlen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "tcp_recv",
    "functioncall": { "eel": "tcp_recv(connection,#str[,maxlen])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "connection", "description": "" },
        { "identifier": "str", "description": "" },
        { "identifier": "len", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "tcp_send",
    "functioncall": { "eel": "tcp_send(connection,str[,len])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets whether a connection blocks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "connection", "description": "" },
        { "identifier": "block", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "tcp_set_block",
    "functioncall": { "eel": "tcp_set_block(connection,block)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "val", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "time",
    "functioncall": { "eel": "time([&amp;val])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "val", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "time_precise",
    "functioncall": { "eel": "time_precise([&amp;val])" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional EEL-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Executes expression until expression evaluates to zero, or until 1048576 iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "expression", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "while",
    "functioncall": { "eel": "while(expression)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.\n\nYou can't defer this atexit-function, when it is run as exit-function, though, when it is run regularily before exiting the script.\n\nYou can define more than one atexit-function. They will be run in the order they've been registered as atexit-functions.\nFor example:\n\n    reaper.atexit(exit1)\n    reaper.atexit(exit2)\n    reaper.atexit(exit3)\n    \nwill run exit1, exit2 and then exit3, when exiting the script.\n\nYou can have up to 1024 atexit-functions set in one script, no matter if its different or the same function.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "function function",
          "description": "the function, with which the script shall finish"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "atexit",
    "functioncall": { "lua": "reaper.atexit(function function)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "function", "type": "function" }],
        "method_name": "reaper.atexit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.\n\nThere can be 1024 defer-nodes running at the same time in one script, no matter if it's different functions or the same one.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "function function",
          "description": "the function to be called, when the current defer/runloop-run has ended"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "defer",
    "functioncall": { "lua": "boolean retval = reaper.defer(function function)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, node could be created; false, you tried to add more than 1024 defer-nodes in the script"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "function", "type": "function" }],
        "method_name": "reaper.defer",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns contextual information about the script, typically MIDI/OSC input values.val will be set to a relative or absolute value depending on mode (=0: absolute mode, &gt;0: relative modes). resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.Notes: sectionID, and cmdID will be set to -1 if the script is not part of the action list. mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\n\nFor relative mode bindings, calling get_action_context() will return the accumulated relative value in decoded form (not 65 or 63, but +1/-1 etc), and clear the internal state. So if you call it multiple times, the first one will return the accumulated value, and the second will always return 0.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "get_action_context",
    "functioncall": {
      "lua": "boolean is_new_value, string filename_with_path, integer sectionID, integer cmdID, integer mode, integer resolution, integer val = reaper.get_action_context()"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean is_new_value", "description": "" },
        {
          "identifier": "string filename_with_path",
          "description": "the script's own filename with path"
        },
        {
          "identifier": "integer sectionID",
          "description": "the section, in which this script was called"
        },
        {
          "identifier": "integer cmdID",
          "description": "the command-id associated with this script"
        },
        {
          "identifier": "integer mode",
          "description": "-1, if script isn't run by shortcut; 55953, is script is run by shortcut; probably for for MIDI?"
        },
        {
          "identifier": "integer resolution",
          "description": "-1, if script isn't run by shortcut; probably more for MIDI?"
        },
        {
          "identifier": "integer val",
          "description": "-1, if script isn't run by shortcut; probably more for MIDI?"
        }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.get_action_context",
        "return_values": [
          { "identifier": "is_new_value", "type": "boolean" },
          { "identifier": "filename_with_path", "type": "string" },
          { "identifier": "sectionID", "type": "integer" },
          { "identifier": "cmdID", "type": "integer" },
          { "identifier": "mode", "type": "integer" },
          { "identifier": "resolution", "type": "integer" },
          { "identifier": "val", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "The following global variables are special and will be used by the graphics system:\n\n* gfx.r, gfx.g, gfx.b, gfx.a2 - These represent the current red, green, blue, and alpha components used by drawing operations (0.0..1.0). gfx.a2 is the value written to the alpha channel when writing solid colors (normally ignored but useful when creating transparent images)\n* gfx.a, gfx.mode - Alpha and blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). \n* gfx.w, gfx.h - These are set to the current width and height of the UI framebuffer. \n* gfx.x, gfx.y - These set the \"current\" graphics position in x,y. You can set these yourselves, and many of the drawing functions update them as well. \n* gfx.clear - If set to a value greater than -1.0, this will result in the framebuffer being cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). \n* gfx.dest - Defaults to -1, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).\n* gfx.texth - Set to the height of a line of text in the current font. Do not modify this variable.\n* gfx.ext_retina - If set to 1.0 on initialization, will be updated to 2.0 if high resolution display is supported, and if so gfx.w/gfx.h/etc will be doubled.\n* gfx.mouse_x, gfx.mouse_y - gfx.mouse_x and gfx.mouse_y are set to the coordinates of the mouse relative to the graphics window.\n* gfx.mouse_wheel, gfx.mouse_hwheel - mouse wheel (and horizontal wheel) positions. These will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.\n* gfx.mouse_cap is a bitfield of mouse and keyboard modifier state.\n    1: left mouse button\n    2: right mouse button\n    4: Control key\n    8: Shift key\n    16: Alt key\n    32: Windows key\n    64: middle mouse button\nNote: Mousebuttons will be returned after gfx.init(), the other keyboard-modifier only when using gfx.getchar()!",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx_variables",
    "functioncall": { "lua": "gfx VARIABLES" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [{ "identifier": "VARIABLES", "type": "gfx" }], "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "x position of the center of the circle" },
        { "identifier": "integer y", "description": "y position of the center of the circle" },
        { "identifier": "integer r", "description": "the radius of the circle" },
        {
          "identifier": "number ang1",
          "description": "the beginning of the circle in radians; meant for partial circles; 0-6.28"
        },
        {
          "identifier": "number ang2",
          "description": "the end of the circle in radians; meant for partial circles; 0-6.28"
        },
        {
          "identifier": "optional number antialias",
          "description": "<=0.5, antialias off; >0.5, antialias on"
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx.arc",
    "functioncall": {
      "lua": "gfx.arc(integer x, integer y, integer r, number ang1, number ang2, optional number antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "ang1", "type": "number" },
          { "identifier": "ang2", "type": "number" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "gfx.arc",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits(draws) the content of source-image to another source-image or an opened window.\n\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size), destx/desty/destw/desth specify dest rectangle (if not specified, these will default to reasonable defaults -- destw/desth default to srcw/srch * scale). ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer source",
          "description": "the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer."
        },
        {
          "identifier": "number scale",
          "description": "the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger\nhas no effect, when destx, desty, destw, desth are given"
        },
        {
          "identifier": "number rotation",
          "description": "the rotation-factor; 0 to 6.28; 3.14 for 180 degrees."
        },
        {
          "identifier": "optional number srcx",
          "description": "the x-coordinate-offset in the source-image"
        },
        {
          "identifier": "optional number srcy",
          "description": "the y-coordinate-offset in the source-image"
        },
        {
          "identifier": "optional number srcw",
          "description": "the width-offset in the source-image"
        },
        {
          "identifier": "optional number srch",
          "description": "the height-offset in the source-image"
        },
        {
          "identifier": "optional integer destx",
          "description": "the x-coordinate of the blitting destination"
        },
        {
          "identifier": "optional integer desty",
          "description": "the y-coordinate of the blitting destination"
        },
        {
          "identifier": "optional integer destw",
          "description": "the width of the blitting destination; may lead to stretched images"
        },
        {
          "identifier": "optional integer desth",
          "description": "the height of the blitting destination; may lead to stretched images"
        },
        { "identifier": "optional number rotxoffs", "description": "influences rotation" },
        { "identifier": "optional number rotyoffs", "description": "influences rotation" }
      ],
      "param_count": 13,
      "markup_type": "plaintext"
    },
    "title": "gfx.blit",
    "functioncall": {
      "lua": "integer source = gfx.blit(integer source, number scale, number rotation, optional number srcx, optional number srcy, optional number srcw, optional number srch, optional integer destx, optional integer desty, optional integer destw, optional integer desth, optional integer rotxoffs,  optional integer rotyoffs)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source", "type": "integer" },
          { "identifier": "scale", "type": "number" },
          { "identifier": "rotation", "type": "number" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.blit",
        "return_values": [{ "identifier": "source", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits(draws) the content of source-image to another source-image or an opened window.\n\nThis is a simplified version of [gfx.blit()](#lua_gfx.blit).\n\nIf three parameters are specified, copies the entirity of the source bitmap to gfx.x,gfx.y using current opacity and copy mode (set with gfx.a, gfx.mode). You can specify scale (1.0 is unscaled) and rotation (0.0 is not rotated, angles are in radians).For the \"source\" parameter specify -1 to use the main framebuffer as source, or an image index (see gfx.loadimg()).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer source",
          "description": "the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer."
        },
        {
          "identifier": "number scale",
          "description": "the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger"
        },
        {
          "identifier": "number rotation",
          "description": "the rotation-factor; 0 to 6.28; 3.14 for 180 degrees."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx.blit(simplified)",
    "functioncall": {
      "lua": "integer source = gfx.blit(integer source, number scale, number rotation)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "source", "type": "integer" },
          { "identifier": "scale", "type": "number" },
          { "identifier": "rotation", "type": "number" }
        ],
        "method_name": "gfx.blit",
        "return_values": [{ "identifier": "source", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated, use gfx.blit instead.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "source", "description": "" },
        { "identifier": "coordinatelist", "description": "" },
        { "identifier": "rotation", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx.blitext",
    "functioncall": { "lua": "gfx.blitext(source,coordinatelist,rotation)" },
    "return_values": { "entries": [] },
    "signatures": { "lua": { "parameters": [], "method_name": "gfx.blitext", "return_values": [] } }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "x position of the other edge of the blur-region"
        },
        {
          "identifier": "integer y",
          "description": "y position of the other edge of the blur-region"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.blurto",
    "functioncall": { "lua": "gfx.blurto(integer x, integer y)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "gfx.blurto",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a circle, optionally filling/antialiasing. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "x position of center of the circle" },
        { "identifier": "integer y", "description": "y position of center of the circle" },
        { "identifier": "integer r", "description": "radius of the circle" },
        {
          "identifier": "optional number fill",
          "description": "<=0.5, circle is not filled; >0.5, circle is filled"
        },
        {
          "identifier": "optional number antialias",
          "description": "<=0.5, circle is not antialiased; >0.5, circle is antialiased"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx.circle",
    "functioncall": {
      "lua": "gfx.circle(integer x, integer y, integer r, optional number fill, optional number antialias)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "r", "type": "integer" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "gfx.circle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts the coordinates x,y to screen coordinates, returns those values.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates"
        },
        {
          "identifier": "integer y",
          "description": "the y coordinate within(!) the gfx.init()-window, that shall be converted to screen-coordinates "
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.clienttoscreen",
    "functioncall": { "lua": "int convx, int convy = gfx.clienttoscreen(integer x, integer y)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer convx",
          "description": "the converted coordinate in relation of the screen-viewport"
        },
        {
          "identifier": "integer convy",
          "description": "the converted coordinate in relation of the screen-viewport"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "gfx.clienttoscreen",
        "return_values": [
          { "identifier": "convx", "type": "int" },
          { "identifier": "convy", "type": "int" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.95" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits from srcimg(srcs,srct,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.\n\nThis function allows you to manipulate the image, which you want to blit, by transforming, moving or cropping it.\n\nTo do rotation, you can manipulate dtdx and dsdy together.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer srcimg", "description": "image - the image to blit" },
        {
          "identifier": "integer srcs",
          "description": "positiondeltaX - the delta of the x-position of the image within the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "integer srct",
          "description": "positiondeltaY - the delta of the y-position of the image within the blitted area in pixels(useful default: 0)"
        },
        { "identifier": "integer srcw", "description": "unknown - (useful default: 0)" },
        { "identifier": "integer srch", "description": "unknown - (useful default: 0)" },
        {
          "identifier": "number destx",
          "description": "positiondeltaX - the delta of the x-position of the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "number desty",
          "description": "positiondeltaY - the delta of the y-position of the blitted area in pixels(useful default: 0)"
        },
        {
          "identifier": "number destw",
          "description": "blitsizeX - the x-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: width of the image)"
        },
        {
          "identifier": "number desth",
          "description": "blitsizeY - the y-size of the blitted area in pixels; the deltaimage might be cropped, if it exceeds this size(useful default: height of the image)"
        },
        {
          "identifier": "number dsdx",
          "description": "stretchfactorX, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeX(useful default: 1)"
        },
        {
          "identifier": "number dtdx",
          "description": "deltaY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta is linear(useful default: 0)"
        },
        {
          "identifier": "number dsdy",
          "description": "deltaX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta is linear(useful default: 0)"
        },
        {
          "identifier": "number dtdy",
          "description": "stretchfactorY, the lower, the more stretched is the image(minimum 0; 1 for full size); limited by blitsizeY(useful default: 1)"
        },
        {
          "identifier": "number dsdxdy",
          "description": "deltacurvedY: the delta of the right side of the image, related to the left side of the image; positive, right is moved up; negative, right is moved down; this delta \"curves\" the delta via a bezier(useful default: 0)"
        },
        {
          "identifier": "number dtdxdy",
          "description": "deltacurvedX: the delta of the bottom side of the image, related to the top side of the image; positive, bottom is moved left; negative, bottom is moved right; this delta \"curves\" the delta via a bezier(useful default: 0)"
        },
        {
          "identifier": "optional integer usecliprect",
          "description": "can be set to 0 or 1(useful default: 0)"
        }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "gfx.deltablit",
    "functioncall": {
      "lua": "number retval = gfx.deltablit(integer srcimg, integer srcs, integer srct, integer srcw, integer srch, number destx, number desty, number destw, number desth, number dsdx, number dtdx, number dsdy, number dtdy, number dsdxdy, number dtdxdy,optional integer usecliprect)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "unknown, usually 0" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "srcimg", "type": "integer" },
          { "identifier": "srcs", "type": "integer" },
          { "identifier": "srct", "type": "integer" },
          { "identifier": "srcw", "type": "integer" },
          { "identifier": "srch", "type": "integer" },
          { "identifier": "destx", "type": "number" },
          { "identifier": "desty", "type": "number" },
          { "identifier": "destw", "type": "number" },
          { "identifier": "desth", "type": "number" },
          { "identifier": "dsdx", "type": "number" },
          { "identifier": "dtdx", "type": "number" },
          { "identifier": "dsdy", "type": "number" },
          { "identifier": "dtdy", "type": "number" },
          { "identifier": "dsdxdy", "type": "number" },
          { "identifier": "dtdxdy", "type": "number" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.deltablit",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Queries or sets the docking-state of the gfx.init()-window.\nCall with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. \nState is &amp;1 if docked, second byte is docker index (or last docker index if undocked). \nIf wx-wh specified, additional values will be returned with the undocked window position/size\n\nA specific docking index does not necessarily represent a specific docker, means, you can not query/set left docker top, but rather all dockers that exist in the current screenset.\nSo the first queried/set docker can be top-left-docker or the top docker or even one of the bottom dockers.\nThe order doesn't seem to make any sense. Especially with more than 16 windows docked in the current screenset.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer v",
          "description": "-1, query docking-state; 0 and higher, set state of the window to docked; the bits &amp;256, &amp;512, &amp;1024, &amp;2048 set the docker-index"
        },
        {
          "identifier": "optional integer wx",
          "description": "set to a number to query current-windowx-position"
        },
        {
          "identifier": "optional integer wy",
          "description": "set to a number to query current-windowy-position"
        },
        {
          "identifier": "optional integer ww",
          "description": "set to a number to query current-window-width"
        },
        {
          "identifier": "optional integer wh",
          "description": "set to a number to query current-window-height"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx.dock",
    "functioncall": {
      "lua": "number querystate, optional integer window_x_position, optional integer window_y_position, optional integer window_width, optional integer window_height = gfx.dock(integer v, optional integer wx, optional integer wy, optional integer ww, optional integer wh)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer querystate",
          "description": "0 if not docked; &amp;1 if docked;  the bits &amp;256, &amp;512, &amp;1024, &amp;2048 get the docker-index"
        },
        {
          "identifier": "integer window_x_position",
          "description": "the x position of the window in pixels"
        },
        {
          "identifier": "integer window_y_position",
          "description": "the y position of the window in pixels"
        },
        {
          "identifier": "integer window_width",
          "description": "the width of the window in pixels"
        },
        {
          "identifier": "integer window_height",
          "description": "the height of the window in pixels "
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "v", "type": "integer" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.dock",
        "return_values": [
          { "identifier": "querystate", "type": "number" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer char",
          "description": "the numeric ASCII-representation of the character to be drawn"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.drawchar",
    "functioncall": { "lua": "integer char = gfx.drawchar(integer char)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer char",
          "description": "the character drawn; 0, if invalid(like strings or characters passed as parameter)"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "char", "type": "integer" }],
        "method_name": "gfx.drawchar",
        "return_values": [{ "identifier": "char", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number n", "description": "the number to be drawn" },
        { "identifier": "integer ndigits", "description": "the number of digits for the precision" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.drawnumber",
    "functioncall": { "lua": "gfx.drawnumber(number n, integer ndigits)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "n", "type": "number" },
          { "identifier": "ndigits", "type": "integer" }
        ],
        "method_name": "gfx.drawnumber",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\n\nYou can optionally set a clipping area for the text, if you set parameter flags&amp;256 and the parameters right and bottom.\n\nOn Windows, fonts with a size > 255 may have trouble of being displayed correctly, due problems with the font-rendering and the alpha-channel. <a href=\"https://forum.cockos.com/showpost.php?p=2311977&postcount=7\">Justin's post about this.</a>\nTo overcome this, try this to disable the alpha-channel: \nBy default, gfx.blit() blits with alpha channel. You can disable this behavior by setting \"gfx.mode=2\" before calling gfx.blit().",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string str",
          "description": "the string to be drawn into the gfx.init-window"
        },
        {
          "identifier": "optional integer flags",
          "description": "influence, how the text shall be drawn\n flags&amp;1: center horizontally\n flags&amp;2: right justify\n flags&amp;4: center vertically\n flags&amp;8: bottom justify\n flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)"
        },
        {
          "identifier": "optional integer right",
          "description": "if flags&amp;256 is set, this parameter clips text on the right side in pixels"
        },
        {
          "identifier": "optional integer bottom",
          "description": "if flags&amp;256 is set, this parameter clips text on the bottom side in pixels "
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "gfx.drawstr",
    "functioncall": {
      "lua": "gfx.drawstr(string str, optional integer flags, optional integer right, optional integer bottom)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "str", "type": "string" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.drawstr",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.94" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. \n\nIf char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed.\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, \nincluding 'home', 'up', 'down', 'left', 'right', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \n\n\t\t\tShortcuts with scope \"Global + textfields\" will still run the associated action, scope of \"Normal\" or \"Global\" will not.\n\t\t\t\nModified and special keys can also be returned, including:  \n\n- Ctrl/Cmd+A..Ctrl+Z as 1..26  \n- Ctrl/Cmd+Alt+A..Z as 257..282  \n- Alt+A..Z as 'A'+256..'Z'+256  \n- 27 for ESC  \n- 13 for Enter  \n- ' ' for space  \n-   \n- use 65536 as parameter charactercode to query special flags, returns: &1 (supported in this script), &2=window has focus, &4=window is visible  \n\nSome multibyte-characters, like home, up, down, left, right, f1 .. f12, pgup, pgdn, ins, del are returned as values above 255, but some other characters, like €,  \nare \"real\"-multibyte-characters, stored as multiple 8-bit-values after each other.\nTo retrieve them, you need to run gfx.getchar() twice per defer-cycle and return their retvals into two variables:  \nExample:\n\n            A=gfx.getchar() -- first byte\n            B=gfx.getchar() -- second byte\n            \n            if A==261 and B==128 then reaper.MB(\"You typed the Euro-symbol.\", \"Message\", 0) end -- typed character is the Euro-currency-symbol.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "optional integer character",
          "description": "the character to check for; use 65536 to check window-state(visible, focus)\n   &1 (supported in this script), &2=window has focus, &4=window is visible"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.getchar",
    "functioncall": { "lua": "integer charactercode = gfx.getchar(optional integer character)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer charactercode",
          "description": "either the charactercode or 0 if nothing is pressed\n-1, if the gfx.init-window is closed\n\nWhen the parameter character is given and not 0, charactercode is either \n0, nothing is pressed, or\n&gt;0, the character you want to check for is pressed."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "integer", "type": "optional" }],
        "method_name": "gfx.getchar",
        "return_values": [{ "identifier": "charactercode", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.91" },
    "chapers": ["Additional Lua-Functions"],
    "tags": ["dragndrop", "drop", "file", "filename", "window", "gfx", "window", "lua"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns filenames, drag'n'dropped into a window created by gfx.init().\nUse idx to get a specific filename, that has been dropped into the gfx.init()-window.\n\nDoes NOT support mediaitems/takes or other Reaper-objects!\n\nIt MUST be called BEFORE calling gfx.update, as gfx.update flushes the filelist accessible with gfx.getdropfile.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the indexnumber for a filename, that has been dropped into a gfx.init()-window.\n0, the first file; 1, the second file; 2, the third file, etc.\n-1, clears the filelist."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.getdropfile",
    "functioncall": { "lua": "integer retval, string filename = gfx.getdropfile(integer idx)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, if droppped-filename with indexnumber idx doesn't exist; 1, if it exists; hints, if you already reached the last filename dropped."
        },
        {
          "identifier": "string filename",
          "description": "the filename of dropped-file with indexnumber idx"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "idx", "type": "integer" }],
        "method_name": "gfx.getdropfile",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "filename", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns current font index, and the actual font face used by this font (if available).",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx.getfont",
    "functioncall": { "lua": "integer fontindex = gfx.getfont()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer fontindex",
          "description": "the index of the font used. Use [gfx.setfont](#lua_gfx.setfont) to set a font for a specific index."
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "gfx.getfont",
        "return_values": [{ "identifier": "fontindex", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Retrieves the dimensions of an image specified by handle, returns w, h pair.\nHandle is basically a frame-buffer.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer handle",
          "description": "the index of the image-handle/framebuffer to retrieve the dimensions from;-1 to 1023; -1 for the currently displayed framebuffer."
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.getimgdim",
    "functioncall": { "lua": "integer w, integer h = gfx.getimgdim(integer handle)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer w", "description": "the width of the image-handle in pixels" },
        { "identifier": "integer h", "description": "the height of the image-handle in pixels" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "handle", "type": "integer" }],
        "method_name": "gfx.getimgdim",
        "return_values": [
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx.getpixel",
    "functioncall": { "lua": "integer r, integer g, integer b = gfx.getpixel()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer r", "description": "the red-color-value, a value between 0 to 1" },
        {
          "identifier": "integer g",
          "description": "the green-color-value, a value between 0 to 1"
        },
        { "identifier": "integer b", "description": "the blue-color-value, a value between 0 to 1" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "gfx.getpixel",
        "return_values": [
          { "identifier": "r", "type": "integer" },
          { "identifier": "g", "type": "integer" },
          { "identifier": "b", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "r", "description": "" },
        { "identifier": "g", "description": "" },
        { "identifier": "b", "description": "" },
        { "identifier": "a", "description": "" },
        { "identifier": "drdx", "description": "" },
        { "identifier": "dgdx", "description": "" },
        { "identifier": "dbdx", "description": "" },
        { "identifier": "dadx", "description": "" },
        { "identifier": "drdy", "description": "" },
        { "identifier": "dgdy", "description": "" },
        { "identifier": "dbdy", "description": "" },
        { "identifier": "dady", "description": "" }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "gfx.gradrect",
    "functioncall": {
      "lua": "gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": { "parameters": [], "method_name": "gfx.gradrect", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Initializes the graphics window with title name. Suggested width and height can be specified.Once the graphics window is open, gfx.update() should be called periodically. \n\nOnly one graphics-window can be opened per script! Calling gfx.ini after a window has been opened has no effect.\n\t\t\t\n\t\t\tTo resizes/reposition the window, call gfx.init again and pass an empty string as name-parameter.\n\nTo get the current window-states, dimensions, etc, you can use [gfx.dock](#lua_gfx.dock).            ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string name",
          "description": "the name of the window, which will be shown in the title of the window"
        },
        {
          "identifier": "optional integer width",
          "description": "the width of the window; minmum is 50"
        },
        {
          "identifier": "optional integer height",
          "description": "the height of the window; minimum is 16"
        },
        {
          "identifier": "optional integer dockstate",
          "description": "&1=0, undocked; &1=1, docked"
        },
        {
          "identifier": "optional integer xpos",
          "description": "x-position of the window in pixels; minimum is -80"
        },
        {
          "identifier": "optional integer ypos",
          "description": "y-position of the window in pixels; minimum is -15"
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx.init",
    "functioncall": {
      "lua": "integer retval = gfx.init(string \"name\", optional integer width, optional integer height, optional integer dockstate, optional integer xpos, optional integer ypos)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "number retval", "description": "1.0, if window is opened" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.init",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "x-position of start of the line in pixels" },
        { "identifier": "integer y", "description": "y-position of start of the line in pixels" },
        {
          "identifier": "integer x2",
          "description": "x-position of the end of the line in pixels"
        },
        {
          "identifier": "integer y2",
          "description": "y-position of the end of the line in pixels"
        },
        {
          "identifier": "optional number aa",
          "description": "<0.5, no antialias; >=0.5, antialias"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx.line",
    "functioncall": {
      "lua": "gfx.line(integer x, integer y, integer x2, integer y2, optional number aa)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "gfx.line",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "x-position of the end of the line in pixels" },
        { "identifier": "integer y", "description": "y-position of the end of the line in pixels" },
        {
          "identifier": "optional number aa",
          "description": "<0.5, no antialias; >=0.5, antialias"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx.lineto",
    "functioncall": { "lua": "gfx.lineto(integer x, integer y, number aa)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "aa", "type": "number" }
        ],
        "method_name": "gfx.lineto",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer image",
          "description": "the buffer-index(0 - 1023), in which to load the image"
        },
        {
          "identifier": "string filename",
          "description": "the path+filename of the image to be loaded"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.loadimg",
    "functioncall": { "lua": "integer retval = gfx.loadimg(integer image, string filename)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "the image-index in case of successful loading; -1 if loading failed"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "image", "type": "integer" },
          { "identifier": "filename", "type": "string" }
        ],
        "method_name": "gfx.loadimg",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Measures the drawing dimensions of a character with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of character.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer char", "description": "ASCII-Code of the character to measure" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.measurechar",
    "functioncall": { "lua": "integer width, integer height = gfx.measurechar(integer char)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer width", "description": "the width of the character in pixels" },
        { "identifier": "integer height", "description": "the height of the character in pixels" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "char", "type": "integer" }],
        "method_name": "gfx.measurechar",
        "return_values": [
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Measures the drawing dimensions of a string with the current font (as set by [gfx.setfont](#lua_gfx.setfont)). Returns width and height of string.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string str",
          "description": "the string, whose drawing dimensions you want to know"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.measurestr",
    "functioncall": { "lua": "integer width, integer height = gfx.measurestr(string str)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer width",
          "description": "the width of the drawing dimensions of str in pixels"
        },
        {
          "identifier": "integer height",
          "description": "the height of the drawing dimensions of str in pixels"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "string" }],
        "method_name": "gfx.measurestr",
        "return_values": [
          { "identifier": "width", "type": "integer" },
          { "identifier": "height", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Multiplies each pixel within the given rectangle(x,y,w,h) by the mul_*-parameters and optionally adds add_*-parameters, and updates in-place. Useful for changing brightness/contrast, or other effects.\n\nThe multiplied values usually affect only pixels, that are not black(0,0,0,0), while the added values affect all pixels.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x-position of the rectangle in pixels, in which you want to multiply/add colorvalues to"
        },
        {
          "identifier": "integer y",
          "description": "the y-position of the rectangle in pixels, in which you want to multiply/add colorvalues to"
        },
        {
          "identifier": "integer w",
          "description": "the width of the rectangle in pixels, in which you want to multiply/add colorvalues to"
        },
        {
          "identifier": "integer h",
          "description": "the height of the rectangle in pixels, in which you want to multiply/add colorvalues to"
        },
        {
          "identifier": "number mul_r",
          "description": "the red-value to multiply by within the rectangle; 0 to 1"
        },
        {
          "identifier": "number mul_g",
          "description": "the green-value to multiply by within the rectangle; 0 to 1"
        },
        {
          "identifier": "number mul_b",
          "description": "the blue-value to multiply by within the rectangle; 0 to 1"
        },
        {
          "identifier": "optional number mul_a",
          "description": "the alpha-value to multiply by within the rectangle; 0 to 1"
        },
        {
          "identifier": "optional number add_r",
          "description": "the red-value to add by within the rectangle; 0 to 1"
        },
        {
          "identifier": "optional number add_g",
          "description": "the green-value to add by within the rectangle; 0 to 1"
        },
        {
          "identifier": "optional number add_b",
          "description": "the blue-value to add by within the rectangle; 0 to 1"
        },
        {
          "identifier": "optional number add_a",
          "description": "the alpha-value to add by within the rectangle; 0 to 1"
        }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "title": "gfx.muladdrect",
    "functioncall": {
      "lua": "integer retval = gfx.muladdrect(integer x, integer y, integer w, integer h, number mul_r, number mul_g, number mul_b, optional number mul_a, optional number add_r, optional number add_g, optional number add_b, optional number add_a)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "unknown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "mul_r", "type": "number" },
          { "identifier": "mul_g", "type": "number" },
          { "identifier": "mul_b", "type": "number" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" }
        ],
        "method_name": "gfx.muladdrect",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()\n\n    * %% = %\n    * %s = string from parameter\n    * %d = parameter as integer\n    * %i = parameter as integer\n    * %u = parameter as unsigned integer\n    * %x = parameter as hex (lowercase) integer\n    * %X = parameter as hex (uppercase) integer\n    * %c = parameter as character\n    * %f = parameter as floating point\n    * %e = parameter as floating point (scientific notation, lowercase)\n    * %E = parameter as floating point (scientific notation, uppercase)\n    * %g = parameter as floating point (shortest representation, lowercase)\n    * %G = parameter as floating point (shortest representation, uppercase)\n\nMany standard C printf() modifiers can be used, including:\n\n    * %.10s = string, but only print up to 10 characters\n    * %-10s = string, left justified to 10 characters\n    * %10s = string, right justified to 10 characters\n    * %+f = floating point, always show sign\n    * %.4f = floating point, minimum of 4 digits after decimal point\n    * %10d = integer, minimum of 10 digits (space padded)\n    * %010f = integer, minimum of 10 digits (zero padded)\n\nValues for format specifiers can be specified as additional parameters to gfx.printf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "format", "description": "" },
        { "identifier": "...", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.printf",
    "functioncall": { "lua": "gfx.printf(format[, ...])" },
    "return_values": { "entries": [] },
    "signatures": { "lua": { "parameters": [], "method_name": "gfx.printf", "return_values": [] } }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Closes the graphics window.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx.quit",
    "functioncall": { "lua": "integer retval = gfx.quit()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "unknown, usually 0" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "gfx.quit",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "integer x", "description": "the x-position of the upper left corner" },
        { "identifier": "integer y", "description": "the y-position of the upper left corner" },
        {
          "identifier": "integer w",
          "description": "the width of the rectangle; must be positive"
        },
        {
          "identifier": "integer h",
          "description": "the height of the rectangle; must be positive"
        },
        {
          "identifier": "optional integer filled",
          "description": "0, unfilled; 1, filled; omitted/nil, filled"
        }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "gfx.rect",
    "functioncall": {
      "lua": "integer retval = gfx.rect(integer x, integer y, integer w, integer h, optional integer filled)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "unknown; usually 0" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.rect",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x-coordinate, to which the rectangle shall be drawn to"
        },
        {
          "identifier": "integer y",
          "description": "the y-coordinate, to which the rectangle shall be drawn to"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.rectto",
    "functioncall": { "lua": "integer x_coordinate = gfx.rectto(integer x, integer y)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x_coordinate",
          "description": "the x-coordinate given as x-parameter; the purpose is unknown"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "gfx.rectto",
        "return_values": [{ "identifier": "x_coordinate", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a rectangle with rounded corners. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x-coordinate of the upper-left corner of the rectangle in pixels"
        },
        {
          "identifier": "integer y",
          "description": "the y-coordinate of the upper-left corner of the rectangle in pixels"
        },
        { "identifier": "integer w", "description": "the width of the rectangle in pixels" },
        { "identifier": "integer h", "description": "the height of the rectangle in pixels" },
        {
          "identifier": "number radius",
          "description": "the radius of the rounded corners of the rectangle; 0, for a normal rectangle; "
        },
        {
          "identifier": "number antialias",
          "description": "0, no antialias; 1 and higher, apply antialias to the rectangle"
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx.roundrect",
    "functioncall": {
      "lua": "integer retval = gfx.roundrect(integer x, integer y, integer w, integer h, number radius, optional integer antialias)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "unknown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" },
          { "identifier": "radius", "type": "number" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.roundrect",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Converts the screen coordinates x,y to client coordinates, returns those values.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x",
          "description": "the x-screen-coordinate that shall be converted, in pixels"
        },
        {
          "identifier": "integer y",
          "description": "the y-screen-coordinate that shall be converted, in pixels"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.screentoclient",
    "functioncall": {
      "lua": "integer convx, integer convy = gfx.screentoclient(integer x, integer y)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer convx",
          "description": "the x-client-coordinate, as converted from the x-screen-coordinate, in pixels"
        },
        {
          "identifier": "integer convy",
          "description": "the y-client-coordinate, as converted from the y-screen-coordinate, in pixels"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x", "type": "integer" },
          { "identifier": "y", "type": "integer" }
        ],
        "method_name": "gfx.screentoclient",
        "return_values": [
          { "identifier": "convx", "type": "integer" },
          { "identifier": "convy", "type": "integer" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets color, drawing mode and optionally the drawing-image-source-destination.\nIf sets the corresponding gfx-variables.\nSets gfx.r/gfx.g/gfx.b/gfx.a2/gfx.mode sets gfx.dest if final parameter specified",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number r",
          "description": "the red-value; 0 to 1; if only parameter r is given, it's value will be used for g, b as well"
        },
        { "identifier": "optional number g", "description": "the green-value; 0 to 1" },
        { "identifier": "optional number b", "description": "the blue-value; 0 to 1" },
        { "identifier": "optional number a2", "description": "the alpha-value; 0 to 1" },
        {
          "identifier": "optional integer mode",
          "description": "the drawing-mode; \n Set to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). \n Add 2.0 to disable source alpha for gfx.blit(). \n Add 4.0 to disable filtering for gfx.blit(). "
        },
        {
          "identifier": "optional integer dest",
          "description": "the source-image/framebuffer to draw to; -1 to 1023; -1 for the currently displayed framebuffer."
        }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "gfx.set",
    "functioncall": {
      "lua": "integer retval = gfx.set(number r, optional number g, optional number b, optional number a2, optional integer mode, optional integer dest)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "integer retval", "description": "unknown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "r", "type": "number" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "number", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.set",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like \"arrow\" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "resource_id", "description": "" },
        { "identifier": "custom_cursor_name", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gfx.setcursor",
    "functioncall": { "lua": "gfx.setcursor(resource_id,custom_cursor_name)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "gfx.setcursor", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Can select a font and optionally configure it. \n\nAfter calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer idx",
          "description": "the font-id; idx=0 for default bitmapped font, no configuration is possible for this font.\nidx=1..16 for a configurable font"
        },
        {
          "identifier": "optional string fontface",
          "description": "the name of the font, like \"arial\""
        },
        { "identifier": "optional integer sz", "description": "the size of the font (8-100)" },
        {
          "identifier": "optional integer flags",
          "description": "flags, how to render the text; up to 4 flags can be passed at the same time\na multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. \nThese flags may or may not be supported depending on the font and OS. \n  66 and 98, Bold (B), (b)\n  73 and 105, italic (I), (i)\n  79 and 111, white outline (O), (o)\n  82 and 114, blurred (R), (r)\n  83 and 115, sharpen (S), (s)\n  85 and 117, underline (U), (u)\n  86 and 118, inVerse (V), (v)\n\nTo create such a multibyte-character, assume this flag-value as a 32-bit-value.\nThe first 8 bits are the first flag, the next 8 bits are the second flag, \nthe next 8 bits are the third flag and the last 8 bits are the second flag.\nThe flagvalue(each dot is a bit): .... ....   .... ....   .... ....   .... ....\nIf you want to set it to Bold(B) and Italic(I), you use the ASCII-Codes of both(66 and 73 respectively),\ntake them apart into bits and set them in this 32-bitfield.\nThe first 8 bits will be set by the bits of ASCII-value 66(B), the second 8 bits will be set by the bits of ASCII-Value 73(I).\nThe resulting flagvalue is: 0100 0010   1001 0010   0000 0000   0000 0000\nwhich is a binary representation of the integer value 18754, which combines 66 and 73 in it."
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "gfx.setfont",
    "functioncall": {
      "lua": "gfx.setfont(integer idx,optional string fontface, optional integer sz, optional integer flags)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "idx", "type": "integer" },
          { "identifier": "string", "type": "optional" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.setfont",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "6.14" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer image",
          "description": "the image-handle/framebuffer, whose dimensions you want to set"
        },
        { "identifier": "integer w", "description": "the new width of the image-handle" },
        { "identifier": "integer h", "description": "the new height of the image-handle" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx.setimgdim",
    "functioncall": {
      "lua": "integer retval = gfx.setimgdim(integer image, integer w, integer h)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "0, if image couldn't be set(e.g. no such handle exists); 1, if setting new dimensions was successful"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "image", "type": "integer" },
          { "identifier": "w", "type": "integer" },
          { "identifier": "h", "type": "integer" }
        ],
        "method_name": "gfx.setimgdim",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Writes a pixel of r,g,b to gfx.x,gfx.y.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "number r", "description": "the red-color-value of the pixel; 0-1" },
        { "identifier": "number g", "description": "the green-color-value of the pixel; 0-1" },
        { "identifier": "number b", "description": "the blue-color-value of the pixel; 0-1" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "gfx.setpixel",
    "functioncall": { "lua": "integer retval = gfx.setpixel(number r, number g, number b)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "1, if writing that pixel was successful; -1, is not"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "r", "type": "number" },
          { "identifier": "g", "type": "number" },
          { "identifier": "b", "type": "number" }
        ],
        "method_name": "gfx.setpixel",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. \nEach field represents a menu item. Fields can start with special characters:#, grayed out; !, checked; &gt;, this menu item shows a submenu;&gt;, last item in the current submenu. \nAn empty field will appear as a separator in the menu. \n\nExample: selection = gfx.showmenu(\"first item, followed by separator||!second item, checked|&gt;third item which spawns a submenu|#first item in submenu, grayed out|&gt;second and last item in submenu|fourth item in top menu\")\n\ngfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string str",
          "description": "a string with the menu-entries; separate the entrynames with a |\n  Each menu-entry can start with special characters that influence the appearance of that entry: \n  #, item is grayed out; !, item is checked; &gt;, this menu item shows a submenu;&lt;, last item in the current submenu. "
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gfx.showmenu",
    "functioncall": { "lua": "integer selection = gfx.showmenu(string str)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer selection",
          "description": "the menu-entry the user selected, with 1 for the first, 2 for the second, etc; 0, nothing was selected"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "str", "type": "string" }],
        "method_name": "gfx.showmenu",
        "return_values": [{ "identifier": "selection", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer srcimg",
          "description": "the image-index (1 to 1024) that you want to blit into the screenbuffer -1"
        },
        { "identifier": "integer destx", "description": "x position of the blit picture" },
        { "identifier": "integer desty", "description": "y position of the blit picture" },
        { "identifier": "integer destw", "description": "width of the blit picture" },
        { "identifier": "integer desth", "description": "height of the blit picture" },
        {
          "identifier": "integer div_w",
          "description": "unknown, 2 to 64; probably related to parameter table"
        },
        {
          "identifier": "integer div_h",
          "description": "unknown, 2 to 64; probably related to parameter table"
        },
        {
          "identifier": "table table",
          "description": "a table of the texture coordinates, with each entry being set to a pair of value, eg: 1, 0. Will be read from left to right and from top to bottom.\ntable[1]=1,2\ntable[2]=2,3\ntable[3]=3,1\nHow these values work needs more research..."
        }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "gfx.transformblit",
    "functioncall": {
      "lua": "gfx.transformblit(integer srcimg, integer destx, integer desty, integer destw, integer desth, integer div_w, integer div_h, table table)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "srcimg", "type": "integer" },
          { "identifier": "destx", "type": "integer" },
          { "identifier": "desty", "type": "integer" },
          { "identifier": "destw", "type": "integer" },
          { "identifier": "desth", "type": "integer" },
          { "identifier": "div_w", "type": "integer" },
          { "identifier": "div_h", "type": "integer" },
          { "identifier": "table", "type": "table" }
        ],
        "method_name": "gfx.transformblit",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Draws a filled triangle, or any convex polygon. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer x1",
          "description": "the x-position of the first point of the polygon"
        },
        {
          "identifier": "integer y1",
          "description": "the y-position of the first point of the polygon"
        },
        {
          "identifier": "integer x2",
          "description": "the x-position of the second point of the polygon"
        },
        {
          "identifier": "integer y2",
          "description": "the y-position of the second point of the polygon"
        },
        {
          "identifier": "integer x3",
          "description": "the x-position of the third point of the polygon"
        },
        {
          "identifier": "integer y3",
          "description": "the y-position of the third point of the polygon"
        },
        {
          "identifier": "optional integer x4",
          "description": "the x-position of the fourth point of the polygon"
        },
        {
          "identifier": "optional integer y4",
          "description": "the y-position of the fourth point of the polygon"
        },
        { "identifier": "...              ", "description": "..." },
        { "identifier": "...              ", "description": "..." }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "gfx.triangle",
    "functioncall": {
      "lua": "gfx.triangle(integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, [optional integer x4, optional integer y4, ...)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "x1", "type": "integer" },
          { "identifier": "y1", "type": "integer" },
          { "identifier": "x2", "type": "integer" },
          { "identifier": "y2", "type": "integer" },
          { "identifier": "x3", "type": "integer" },
          { "identifier": "y3", "type": "integer" },
          { "identifier": "integer", "type": "optional" },
          { "identifier": "integer", "type": "optional" }
        ],
        "method_name": "gfx.triangle",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Additional Lua-Functions"],
    "tags": ["lua", "shared memory", "video processor", "eel2", "jsfx"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach.\n\nMust be called, before you can use a specific gmem-variable-index with gmem_write!",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string sharedMemoryName", "description": "the name of the shared memory" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gmem_attach",
    "functioncall": { "lua": "reaper.gmem_attach(string sharedMemoryName)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "sharedMemoryName", "type": "string" }],
        "method_name": "reaper.gmem_attach",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Additional Lua-Functions"],
    "tags": ["lua", "shared memory", "read", "video processor", "eel2", "jsfx"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1&lt;&lt;25).\n\nreturns nil if not available",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer index",
          "description": "the index of the memory-variable to read from"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "gmem_read",
    "functioncall": { "lua": "number retval = reaper.gmem_read(integer index)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "number retval",
          "description": "the stored number-value stored in gmem-variable with index"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "index", "type": "integer" }],
        "method_name": "reaper.gmem_read",
        "return_values": [{ "identifier": "retval", "type": "number" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.97" },
    "chapers": ["Additional Lua-Functions"],
    "tags": ["lua", "shared memory", "write", "video processor", "eel2", "jsfx"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Write (number) value to shared memory attached-to by gmem_attach(). index can be \\[0..1&lt;&lt;25).\n\nBefore you can write into a currently unused variable with index \"index\", you must call [gmem\\_attach](#lua_gmem_attach) first!",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer index",
          "description": "the index of the memory-variable to write to"
        },
        { "identifier": "number value", "description": "a number, either integer or float" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "gmem_write",
    "functioncall": { "lua": "reaper.gmem_write(integer index, number value)" },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "index", "type": "integer" },
          { "identifier": "value", "type": "number" }
        ],
        "method_name": "reaper.gmem_write",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Updates the graphics display, if opened",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "gfx.update",
    "functioncall": { "lua": "gfx.update()" },
    "return_values": { "entries": [] },
    "signatures": { "lua": { "parameters": [], "method_name": "gfx.update", "return_values": [] } }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "table|array", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "new_array",
    "functioncall": { "lua": "ReaperArray reaper_array = reaper.new_array([table|array][size])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "reaper_array", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.new_array",
        "return_values": [{ "identifier": "reaper_array", "type": "ReaperArray" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "function function", "description": "the function to be called" }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "runloop",
    "functioncall": { "lua": "boolean retval = reaper.runloop(function function)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int retval", "description": "true, if succeded" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "function", "type": "function" }],
        "method_name": "reaper.runloop",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "value", "description": "" },
        { "identifier": "offset", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.clear",
    "functioncall": { "lua": "boolean retval = {reaper.array}.clear([value, offset, size])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.array",
        "return_values": [{ "identifier": "retval", "type": "boolean" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "scroffs", "description": "" },
        { "identifier": "size", "description": "" },
        { "identifier": "destoffs", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.convolve",
    "functioncall": {
      "lua": "integer retval = {reaper.array}.convolve([src, srcoffs, size, destoffs])"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.array",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "srcoffs", "description": "" },
        { "identifier": "size", "description": "" },
        { "identifier": "destoffs", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.copy",
    "functioncall": {
      "lua": "integer retval = {reaper.array}.copy([src, srcoffs, size, destoffs])"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "retval", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.array",
        "return_values": [{ "identifier": "retval", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "size", "description": "" },
        { "identifier": "premute", "description": "" },
        { "identifier": "offset", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.fft",
    "functioncall": { "lua": "{reaper.array}.fft(size[, permute, offset])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs a forward real-&gt;complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "size", "description": "" },
        { "identifier": "premute", "description": "" },
        { "identifier": "offset", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.fft_real",
    "functioncall": { "lua": "{reaper.array}.fft_real(size[, permute, offset])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the maximum (allocated) size of the array.",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "{reaper.array}.get_alloc",
    "functioncall": { "lua": "integer size = {reaper.array}.get_alloc()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "size", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [],
        "method_name": "reaper.array",
        "return_values": [{ "identifier": "size", "type": "integer" }]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "size", "description": "" },
        { "identifier": "permute", "description": "" },
        { "identifier": "offset", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.ifft",
    "functioncall": { "lua": "{reaper.array}.ifft(size[, permute, offset])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Performs a backwards complex-&gt;real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "size", "description": "" },
        { "identifier": "permute", "description": "" },
        { "identifier": "offset", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.ifft_real",
    "functioncall": { "lua": "{reaper.array}.ifft_real(size[, permute, offset])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "srcoffs", "description": "" },
        { "identifier": "size", "description": "" },
        { "identifier": "destoff", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.multiply",
    "functioncall": { "lua": "{reaper.array}.multiply([src, srcoffs, size, destoffs])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Resizes an array object to size. size must be [0..max_size].",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "size", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.resize",
    "functioncall": { "lua": "{reaper.array}.resize(size)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Lua": "5.3", "Reaper": "5.62" },
    "chapers": ["Additional Lua-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "offset", "description": "" },
        { "identifier": "size", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "{reaper.array}.table",
    "functioncall": { "lua": "{reaper.array}.table([offset, size])" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": { "parameters": [], "method_name": "reaper.array", "return_values": [] }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional Python-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "String code", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "atexit",
    "functioncall": { "python": "RPR_atexit(String code)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional Python-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.    ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "code", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "defer",
    "functioncall": { "python": "RPR_defer(String code)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional Python-Functions"],
    "tags": [""],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "code", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "runloop",
    "functioncall": { "python": "RPR_runloop(String code)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [],
      "param_count": 0,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "sort", "qsort"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "is a stable sorting function with an API similar to qsort().\nHOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,\nor NULL and it will allocate and free space internally. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "base", "description": "" },
        { "identifier": "nmemb", "description": "" },
        { "identifier": "size", "description": "" },
        { "identifier": "*cmpfunc", "description": "" },
        { "identifier": "tmpspace", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "__mergesort",
    "functioncall": {
      "cpp": "void (*__mergesort)(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "add", "customizable", "menu"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Adds customizable menu.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "menuidstr", "description": "is some unique identifying string" },
        {
          "identifier": "menuname",
          "description": "is for main menus only (displayed in a menu bar somewhere), NULL otherwise "
        },
        {
          "identifier": "kbdsecname",
          "description": "is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section"
        },
        {
          "identifier": "addtomainmenu",
          "description": "true, add to main menu; false, don't add to main menu"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "AddCustomizableMenu",
    "functioncall": {
      "cpp": "bool (*AddCustomizableMenu)(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "extension", "menu", "add"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Add an Extensions main menu, which the extension can populate/modify with [plugin\\_register(\"hookcustommenu\")](#plugin_register)",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "AddExtensionsMainMenu",
    "functioncall": { "cpp": "bool (*AddExtensionsMainMenu)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "plugin", "register", "command", "actioncommandid"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "like rec->Register\n        \nif you have a function called myfunction(..) that you want to expose to other extensions or plug-ins, use register(\"API_myfunction\",funcaddress), and \"-API_myfunction\" to remove.          Other extensions then use GetFunc(\"myfunction\") to get the function pointer.\n\nREAPER will also export the function address to ReaScript, so your extension could supply a Python module that provides a wrapper called RPR_myfunction(..). \nregister(\"APIdef_myfunction\",defstring) will include your function declaration and help in the auto-generated REAPER API header and ReaScript documentation.\n\ndefstring is four null-separated fields: return type, argument types, argument names, and help.\n\n   Example: double myfunction(char* str, int flag) would have defstring=\"double\\0char*,int\\0str,flag\\0help text for myfunction\"\n\nanother thing you can register is \"hookcommand\", which you pass a callback:\n\n   NON_API: bool runCommand(int command, int flag);\n            register(\"hookcommand\",runCommand);\n\nwhich returns TRUE to eat (process) the command.\n\nflag is usually 0 but can sometimes have useful info depending on the message.\n\nnote: it's OK to call Main_OnCommand() within your runCommand, however you MUST check for recursion if doing so!\nin fact, any use of this hook should benefit from a simple reentrancy test...\n\nto get notified when an action of the main section is performed, you can register \"hookpostcommand\", which you pass a callback:\n\n   NON_API: void postCommand(int command, int flag);\n            register(\"hookpostcommand\",postCommand);\n\nyou can also register \"hookcommand2\", which you pass a callback:\n\n   NON_API: bool onAction(KbdSectionInfo *sec, int command, int val, int valhw, int relmode, HWND hwnd);\n            register(\"hookcommand2\",onAction);\n\nwhich returns TRUE to eat (process) the command.\n\nval/valhw are used for actions learned with MIDI/OSC.\nval = \\[0..127\\] and valhw = -1 for MIDI CC, \nvalhw >=0 for MIDI pitch or OSC with value = (valhw|val<<7)/16383.0, \nrelmode absolute(0) or 1/2/3 for relative adjust modes\n\nyou can also register command IDs for actions, register with \"command_id\", parameter is a unique string with only A-Z, 0-9, returns command ID (or 0 if not supported/out of actions)\n\nregister(\"command_id_lookup\", unique_string) will look up the integer ID of the named action without registering the string if it doesn't already exist.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "name", "description": "" },
        { "identifier": "infostruct", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "plugin_register",
    "functioncall": { "cpp": "int (*plugin_register)(const char* name, void* infostruct)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "register", "hardware", "hook"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Registers Audio Hardware-Hook.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "isAdd", "description": "" },
        { "identifier": "reg", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "Audio_RegHardwareHook",
    "functioncall": {
      "cpp": "int (*Audio_RegHardwareHook)(bool isAdd, audio_hook_register_t* reg)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "calculate", "peaks"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Calculates Peaks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "srcBlock", "description": "" },
        { "identifier": "pksBlock", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CalculatePeaks",
    "functioncall": {
      "cpp": "int (*CalculatePeaks)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "calculate", "peaks"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Calculates Peaks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "srcBlock", "description": "" },
        { "identifier": "pksBlock", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CalculatePeaksFloatSrcPtr",
    "functioncall": {
      "cpp": "int (*CalculatePeaksFloatSrcPtr)(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "count", "actions", "shortcuts"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the number of shortcuts that exist for the given command ID. \nSee [GetActionShortcutDesc](#GetActionShortcutDesc), [DeleteActionShortcut](#DeleteActionShortcut), [DoActionShortcutDialog](#DoActionShortcutDialog).\n\nUse [NamedCommandLookup](#NamedCommandLookup) if you want to have the right commandID of an action, that is registered with an ActionCommandID-string.",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, in which the action lies\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "cmdID",
          "description": "the commandID of the action, whose count of shortcuts you want to know."
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CountActionShortcuts",
    "functioncall": { "cpp": "int (*CountActionShortcuts)(KbdSectionInfo* section, int cmdID)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "create", "osc", "handler", "local"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "callback is a function pointer: void (\\*callback)(void\\* obj, const char\\* msg, int msglen), which handles OSC messages sent from REAPER. The function return is a local osc handler. See [SendLocalOscMessage](#SendLocalOscMessage), [DestroyOscHandler](#DestroyOscHandler).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "obj", "description": "" },
        { "identifier": "callback", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CreateLocalOscHandler",
    "functioncall": { "cpp": "void* (*CreateLocalOscHandler)(void* obj, void* callback)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "create", "midi", "input"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "dev", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "CreateMIDIInput",
    "functioncall": { "cpp": "midi_Input* (*CreateMIDIInput)(int dev)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midi_Input*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "midi", "output", "create"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dev", "description": "" },
        {
          "identifier": "streamMode",
          "description": "true, msoffset points to a persistent variable(see msoffset100 for more details)"
        },
        {
          "identifier": "int* msoffset100",
          "description": "points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond. "
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "CreateMIDIOutput",
    "functioncall": {
      "cpp": "midi_Output* (*CreateMIDIOutput)(int dev, bool streamMode, int* msoffset100)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "midi_Output*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "control", "surface", "osc", "message"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On OSC Control Message.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "msg", "description": "" },
        { "identifier": "arg", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "CSurf_OnOscControlMessage",
    "functioncall": {
      "cpp": "void (*CSurf_OnOscControlMessage)(const char* msg, const float* arg)"
    },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "shortcut", "actions", "delete"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Delete the specific shortcut for the given command ID.\nSee [CountActionShortcuts](#CountActionShortcuts), [GetActionShortcutDesc](#GetActionShortcutDesc), [DoActionShortcutDialog](#DoActionShortcutDialog).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, to which this action belongs to\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        { "identifier": "cmdID", "description": "the commandID for the shortcut to be deleted" },
        { "identifier": "shortcutidx", "description": "the shortcut to be deleted" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DeleteActionShortcut",
    "functioncall": {
      "cpp": "bool (*DeleteActionShortcut)(KbdSectionInfo* section, int cmdID, int shortcutidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "osc", "destroy", "local", "handler"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "See [CreateLocalOscHandler](#CreateLocalOscHandler), [SendLocalOscMessage](#SendLocalOscMessage).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "local_osc_handler", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "DestroyLocalOscHandler",
    "functioncall": { "cpp": "void (*DestroyLocalOscHandler)(void* local_osc_handler)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "actions", "commandid", "shortcut", "add", "dialog"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. \nIf (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee [CountActionShortcuts](#CountActionShortcuts), [GetActionShortcutDesc](#GetActionShortcutDesc), [DeleteActionShortcut](#DeleteActionShortcut). ",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "section", "description": "" },
        { "identifier": "cmdID", "description": "" },
        { "identifier": "shortcutidx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "DoActionShortcutDialog",
    "functioncall": {
      "cpp": "bool (*DoActionShortcutDialog)(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "menu", "duplicate", "customizeable"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Populate destmenu with all the entries and submenus found in srcmenu.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "srcmenu", "description": "" },
        { "identifier": "destmenu", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "DuplicateCustomizableMenu",
    "functioncall": { "cpp": "bool (*DuplicateCustomizableMenu)(void* srcmenu, void* destmenu)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pointer", "free", "heap"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "free heap memory returned from a Reaper API function",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "ptr", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "FreeHeapPtr",
    "functioncall": { "cpp": "void (*FreeHeapPtr)(void* ptr)" },
    "return_values": { "entries": [] },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "config", "var", "get"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "gets config var\n\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "name", "description": "" },
        { "identifier": "szOut", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "get_config_var",
    "functioncall": { "cpp": "void* (*get_config_var)(const char* name, int* szOut)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "midi", "config", "var"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "name", "description": "" },
        { "identifier": "szOut", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "get_midi_config_var",
    "functioncall": { "cpp": "void* (*get_midi_config_var)(const char* name, int* szOut);" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "shortcut", "description", "section", "command", "commandid"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get the text description of a specific shortcut for the given command ID.\nSee [CountActionShortcuts](#CountActionShortcuts),[DeleteActionShortcut](#DeleteActionShortcut),[DoActionShortcutDialog](#DoActionShortcutDialog).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section of the action\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "cmdID",
          "description": "the commandID of the action, whose shortcut-description you want."
        },
        { "identifier": "shortcutidx", "description": "" },
        { "identifier": "desc", "description": "" },
        { "identifier": "descclean", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetActionShortcutDesc",
    "functioncall": {
      "cpp": "bool (*GetActionShortcutDesc)(KbdSectionInfo* section, int cmdID, int shortcutidx, char* desc, int desclen)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "color", "theme", "get"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Deprecated, see [GetColorThemeStruct](#GetColorThemeStruct).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "idx", "description": "" },
        { "identifier": "defval", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetColorTheme",
    "functioncall": { "cpp": "INT_PTR (*GetColorTheme)(int idx, int defval)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "INT_PTR", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "color", "theme", "struct"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "returns the whole color theme (icontheme.h) and the size",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "szOut", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetColorThemeStruct",
    "functioncall": { "cpp": "void* (*GetColorThemeStruct)(int* szOut)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "context", "menu"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "idx", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetContextMenu",
    "functioncall": { "cpp": "HMENU (*GetContextMenu)(int idx)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HMENU", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "icon", "theme", "pointer"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "returns a named icontheme entry",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "name", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetIconThemePointer",
    "functioncall": { "cpp": "void* (*GetIconThemePointer)(const char* name)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.02" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "icon", "theme", "pointer", "dpi"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "returns a named icontheme entry for a given DPI-scaling (256=1:1). \n\nNote: the return value should not be stored, it should be queried at each paint! \nQuerying name=NULL returns the start of the structure",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "name", "description": "" },
        { "identifier": "dpisc", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetIconThemePointerForDPI",
    "functioncall": { "cpp": "void* (*GetIconThemePointerForDPI)(const char* name, int dpisc);" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "icon", "theme", "struct"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "returns a pointer to the icon theme (icontheme.h) and the size of that struct.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "szOut", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "GetIconThemeStruct",
    "functioncall": { "cpp": "void* (*GetIconThemeStruct)(int* szOut)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "peaks", "bitmap"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "See note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "pks", "description": "" },
        { "identifier": "maxamp", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "bmp", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetPeaksBitmap",
    "functioncall": {
      "cpp": "void* (*GetPeaksBitmap)(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "preferred", "diskread", "mode"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mode", "description": "" },
        { "identifier": "nb", "description": "" },
        { "identifier": "bs", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetPreferredDiskReadMode",
    "functioncall": { "cpp": "void (*GetPreferredDiskReadMode)(int* mode, int* nb, int* bs)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "preferred", "diskread", "mode", "peak"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mode", "description": "" },
        { "identifier": "nb", "description": "" },
        { "identifier": "bs", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetPreferredDiskReadModePeak",
    "functioncall": { "cpp": "void (*GetPreferredDiskReadModePeak)(int* mode, int* nb, int* bs)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "preferred", "diskwrite", "mode"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mode", "description": "" },
        { "identifier": "nb", "description": "" },
        { "identifier": "bs", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetPreferredDiskWriteMode",
    "functioncall": { "cpp": "void (*GetPreferredDiskWriteMode)(int* mode, int* nb, int* bs)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "mediaitem", "take", "info"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets/Sets Media Item Take-parameters. Works like GetMediaItemTakeInfo_Value and SetMediaItemTakeInfo_Value but has more parameters.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tk", "description": "a MediaItem_Take-object, that shall be altered" },
        {
          "identifier": "parmname",
          "description": "the name of the parameter to be changed\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.\nGUID : GUID * : 16-byte GUID, can query or update\nP_NAME : char * to take name\nD_STARTOFFS : double *, start offset in take of item\nD_VOL : double *, take volume\nD_PAN : double *, take pan\nD_PANLAW : double *, take pan law (-1.0=default, 0.5=-6dB, 1.0=+0dB, etc)\nD_PLAYRATE : double *, take playrate (1.0=normal, 2.0=doublespeed, etc)\nD_PITCH : double *, take pitch adjust (in semitones, 0.0=normal, +12 = one octave up, etc)\nB_PPITCH, bool *, preserve pitch when changing rate\nI_CHANMODE, int *, channel mode (0=normal, 1=revstereo, 2=downmix, 3=l, 4=r)\nI_PITCHMODE, int *, pitch shifter mode, -1=proj default, otherwise high word=shifter low word = parameter\nI_CUSTOMCOLOR : int *, custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\nIP_TAKENUMBER : int, take number within the item (read-only, returns the take number directly)"
        },
        {
          "identifier": "setNewValue",
          "description": "the new value to be set to the parameter. See the description of parmname above for more details."
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaItemTakeInfo",
    "functioncall": {
      "cpp": "void* (*GetSetMediaItemTakeInfo)(MediaItem_Take* tk, const char* parmname, void* setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.941" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "track", "parameters", "info"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets/Sets MediaTrack-parameters. Works like GetMediaTrackInfo_Value and SetMediaTrackInfo_Value but has more parameters.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "tr", "description": "the Mediatrack-object, that shall be modified" },
        {
          "identifier": "parmname",
          "description": "the parameter to be gotten or set\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)\nGUID : GUID * : 16-byte GUID, can query or update (do not use on master though)\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_MCP_LAYOUT : const char * : layout name\nP_TCP_LAYOUT : const char * : layout name\n\nB_MUTE : bool * : mute flag\nB_PHASE : bool * : invert track phase\nIP_TRACKNUMBER : int : track number (returns zero if not found, -1 for master track) (read-only, returns the int directly)\nI_SOLO : int * : 0=not soloed, 1=solo, 2=soloed in place. also: 5=solo-safe solo, 6=solo-safe soloed in place\nI_FXEN : int * : 0=fx bypassed, nonzero = fx active\nI_RECARM : int * : 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input. &lt;0 = no input, 0..n = mono hardware input, 512+n = rearoute input, 1024 set for stereo input pair. 4096 set for MIDI input, if set, then low 5 bits represent channel (0=all, 1-16=only chan), then next 6 bits represent physical input (63=all, 62=VKB)\nI_RECMODE : int * : record mode (0=input, 1=stereo out, 2=none, 3=stereo out w/latcomp, 4=midi output, 5=mono out, 6=mono out w/ lat comp, 7=midi overdub, 8=midi replace\nI_RECMON : int * : record monitor (0=off, 1=normal, 2=not when playing (tapestyle))\nI_RECMONITEMS : int * : monitor items while recording (0=off, 1=on)\nI_AUTOMODE : int * : track automation mode (0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_NCHAN : int * : number of track channels, must be 2-64, even\nI_SELECTED : int * : track selected? 0 or 1\nI_WNDH : int * : current TCP window height (Read-only)\nI_FOLDERDEPTH : int * : folder depth change (0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacting (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index (&lt;0 for disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31))\nI_PERFFLAGS : int * : track perf flags (&amp;1=no media buffering, &amp;2=no anticipative FX)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window. 0 for none, otherwise size in pixels\nD_VOL : double * : trim volume of track (0 (-inf)..1 (+0dB) .. 2 (+6dB) etc ..)\nD_PAN : double * : trim pan of track (-1..1)\nD_WIDTH : double * : width of track (-1..1)\nD_DUALPANL : double * : dualpan position 1 (-1..1), only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2 (-1..1), only if I_PANMODE==6\nI_PANMODE : int * : pan mode (0 = classic 3.x, 3=new balance, 5=stereo pan, 6 = dual pan)\nD_PANLAW : double * : pan law of track. &lt;0 for project default, 1.0 for +0dB, etc\nP_ENV : read only, returns TrackEnvelope *, setNewValue=&lt;VOLENV, &lt;PANENV, etc\nB_SHOWINMIXER : bool * : show track panel in mixer -- do not use on master\nB_SHOWINTCP : bool * : show track panel in tcp -- do not use on master\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : track send to parent channel offset\nB_FREEMODE : bool * : track free-mode enabled (requires UpdateTimeline() after changing etc)\nC_BEATATTACHMODE : char * : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsposonly\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0.0=smallest allowed, 1=max allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=min allow, 1=max)"
        },
        {
          "identifier": "setNewValue",
          "description": "the new value. See the description of parmname above for more details"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaTrackInfo",
    "functioncall": {
      "cpp": "void* (*GetSetMediaTrackInfo)(MediaTrack* tr, const char* parmname, void* setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "object", "state", "rppxml", "statechunk"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "get or set the state of a {track,item,envelope} as an RPPXML chunk\nstr=\"\" to get the chunk string returned (must call FreeHeapPtr when done)\nsupply str to set the state (returns zero)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "obj",
          "description": "the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack."
        },
        {
          "identifier": "str",
          "description": "supply str to set the state (returns zero); str=\"\" to get the chunk string returned (must call [FreeHeapPtr](#FreeHeapPtr) when done)"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "GetSetObjectState",
    "functioncall": { "cpp": "char* (*GetSetObjectState)(void* obj, const char* str)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "object", "state", "rppxml", "statechunk"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "get or set the state of a {track,item,envelope} as an RPPXML chunk         ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "obj",
          "description": "the object, to be modified. Can be MediaItem, TrackEnvelope, MediaTrack."
        },
        {
          "identifier": "str",
          "description": "supply str to set the state (returns zero); str=\"\" to get the chunk string returned (must call FreeHeapPtr when done)"
        },
        {
          "identifier": "isundo",
          "description": "set, if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetObjectState2",
    "functioncall": {
      "cpp": "char* (*GetSetObjectState2)(void* obj, const char* str, bool isundo)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.02" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "midi", "support", "file"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get or set the filename for storage of the MIDI bank/program select file. \n\"which\" must be 1. \n\nIf fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned. ",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        {
          "identifier": "track",
          "description": "the MediaTrack-object of the track to be treated"
        },
        {
          "identifier": "which",
          "description": "thich MIDI-file to use\n0, MIDI colormap image file, \n1, MIDI bank/program select file, \n2, MIDI text string file, \n3, MIDI note mapping file. "
        },
        {
          "identifier": "filename",
          "description": "If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned."
        }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "GetSetTrackMIDISupportFile",
    "functioncall": {
      "cpp": "const char* (*GetSetTrackMIDISupportFile)(ReaProject* proj, MediaTrack* track, int which, const char* filename)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "send", "receive", "hardware", "output"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get or set send/receive/hardware output attributes.\n\nFor ReaRoute-users: the outputs are hardware outputs, but with 512 added to the destination channel index (512 is the first rearoute channel, 513 the second, etc).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "tr",
          "description": "the MediaTrack object for the track to be gotten or set"
        },
        {
          "identifier": "category",
          "description": "&lt;0 for receives, 0=sends, &gt;0 for hardware outputs "
        },
        {
          "identifier": "sendidx",
          "description": "0..n (to enumerate, iterate over sendidx until it returns NULL) "
        },
        {
          "identifier": "parmname",
          "description": "the parameter to get/set\nP_DESTTRACK : read only, returns MediaTrack *, destination track, only applies for sends/recvs\nP_SRCTRACK : read only, returns MediaTrack *, source track, only applies for sends/recvs\nP_ENV : read only, returns TrackEnvelope *, setNewValue=&lt;VOLENV, &lt;PANENV, etc\nB_MUTE : returns bool *\nB_PHASE : returns bool *, true to flip phase\nB_MONO : returns bool *\nD_VOL : returns double *, 1.0 = +0dB etc\nD_PAN : returns double *, -1..+1\nD_PANLAW : returns double *,1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : returns int *, 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : returns int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : returns int *, index,&amp;1024=mono, -1 for none\nI_DSTCHAN : returns int *, index, &amp;1024=mono, otherwise stereo pair, hwout:&amp;512=rearoute\nI_MIDIFLAGS : returns int *, low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan"
        },
        { "identifier": "setNewValue", "description": "the new value to be set" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "GetSetTrackSendInfo",
    "functioncall": {
      "cpp": "void* (*GetSetTrackSendInfo)(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "set", "toggle", "comand", "state", "hooks"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the state of an action via extension plugins' hooks.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, in which the action appears in\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "command_id",
          "description": "the command-id of the action, whose state you want"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetToggleCommandStateThroughHooks",
    "functioncall": {
      "cpp": "int (*GetToggleCommandStateThroughHooks)(KbdSectionInfo* section, int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "hires", "peaks", "source"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Hires peaks from source.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "block", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "HiresPeaksFromSource",
    "functioncall": {
      "cpp": "void (*HiresPeaksFromSource)(PCM_source* src, PCM_source_peaktransfer_t* block)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "realtime", "audio", "thread"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "IsInRealTimeAudio",
    "functioncall": { "cpp": "int (*IsInRealTimeAudio)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "mediaitem", "take", "check", "played", "active", "unmute"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "get whether a take will be played (active take, unmuted, etc)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "MediaItem in which the take is to be checked" },
        { "identifier": "take", "description": "the MediaItem_Take to be checked" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "IsItemTakeActiveForPlayback",
    "functioncall": {
      "cpp": "bool (*IsItemTakeActiveForPlayback)(MediaItem* item, MediaItem_Take* take)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "reaper", "reamote", "check"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns true if dealing with REAPER, returns false for ReaMote, etc",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "IsREAPER",
    "functioncall": { "cpp": "bool (*IsREAPER)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "actions", "section", "enumerate"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Enumerates actions.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        { "identifier": "idx", "description": "" },
        { "identifier": "nameOut", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "kbd_enumerateActions",
    "functioncall": {
      "cpp": "int (*kbd_enumerateActions)(KbdSectionInfo* section, int idx, const char** nameOut)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "keyname", "format"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Format keyname",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "ac", "description": "" },
        { "identifier": "s", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_formatKeyName",
    "functioncall": { "cpp": "void (*kbd_formatKeyName)(ACCEL* ac, char* s)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "key", "assigned", "command"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get the string of a key assigned to command \"cmd\" in a section.\nThis function is poorly named as it doesn't return the command's name, see [kbd\\_getTextFromCmd](#kbd_getTextFromCmd).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "cmd", "description": "commandid of the action" },
        { "identifier": "s", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "kbd_getCommandName",
    "functioncall": {
      "cpp": "void (*kbd_getCommandName)(int cmd, char* s, KbdSectionInfo* section)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "text", "command"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get text from Command",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "cmd", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_getTextFromCmd",
    "functioncall": {
      "cpp": "const char* (*kbd_getTextFromCmd)(DWORD cmd, KbdSectionInfo* section)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "const char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "on", "midi", "event"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On Midi Event. Can be called from anywhere (threadsafe)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "evt", "description": "the MIDI-event" },
        { "identifier": "dev_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_OnMidiEvent",
    "functioncall": { "cpp": "void (*kbd_OnMidiEvent)(MIDI_event_t* evt, int dev_index)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "on", "midi", "list"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "On MIDI List. Can be called from anywhere (threadsafe)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "list", "description": "" },
        { "identifier": "dev_index", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_OnMidiList",
    "functioncall": { "cpp": "void (*kbd_OnMidiList)(MIDI_eventlist* list, int dev_index)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "process", "actions", "menu"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Process actions-menu.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "menu", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_ProcessActionsMenu",
    "functioncall": {
      "cpp": "void (*kbd_ProcessActionsMenu)(HMENU menu, KbdSectionInfo* section)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "process", "midi", "event", "action", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Process Midi Event Action",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "evt", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        { "identifier": "hwndCtx", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "kbd_processMidiEventActionEx",
    "functioncall": {
      "cpp": "bool (*kbd_processMidiEventActionEx)(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "reprocess", "menu"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "menu", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_reprocessMenu",
    "functioncall": { "cpp": "void (*kbd_reprocessMenu)(HMENU menu, KbdSectionInfo* section)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "run", "command", "hooks", "action", "commandid", "section"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Run command through hooks. actioncommandID may get modified.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "actionCommandID",
          "description": "the commandid-number of the action you want to run."
        },
        { "identifier": "val", "description": "" },
        { "identifier": "valhw", "description": "" },
        { "identifier": "relmode", "description": "" },
        { "identifier": "hwnd", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "kbd_RunCommandThroughHooks",
    "functioncall": {
      "cpp": "bool (*kbd_RunCommandThroughHooks)(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "translate", "accelerator", "message", "key", "section", "keybinding"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Pass in the HWND to receive commands, a MSG of a key command,  and a valid section,\nand kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.\nReturns 1 if processed, 0 if no key binding found.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "hwnd", "description": "" },
        { "identifier": "msg", "description": "" },
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "kbd_translateAccelerator",
    "functioncall": {
      "cpp": "int (*kbd_translateAccelerator)(HWND hwnd, MSG* msg, KbdSectionInfo* section)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "translate", "mouse", "midi", "message", "windows"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Translate mouse.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "winmsg", "description": "" },
        { "identifier": "midimsg", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "kbd_translateMouse",
    "functioncall": { "cpp": "bool (*kbd_translateMouse)(void* winmsg, unsigned char* midimsg)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "destroy"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE destroy.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__Destroy",
    "functioncall": { "cpp": "void (*LICE__Destroy)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "font", "destroy"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE destroy-font.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "font", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__DestroyFont",
    "functioncall": { "cpp": "void (*LICE__DestroyFont)(LICE_IFont* font);" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "text"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE draw text.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "font", "description": "" },
        { "identifier": "bm", "description": "" },
        { "identifier": "str", "description": "" },
        { "identifier": "strcnt", "description": "" },
        { "identifier": "rect", "description": "" },
        { "identifier": "dtFlags", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "LICE__DrawText",
    "functioncall": {
      "cpp": "int (*LICE__DrawText)(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "bits", "bitmap"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE get bits.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__GetBits",
    "functioncall": { "cpp": "void* (*LICE__GetBits)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "dc", "bitmap"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Translate mouse.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__GetDC",
    "functioncall": { "cpp": "HDC (*LICE__GetDC)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "HDC", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "height"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE get height",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__GetHeight",
    "functioncall": { "cpp": "int (*LICE__GetHeight)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "row", "span"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE get row span.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__GetRowSpan",
    "functioncall": { "cpp": "int (*LICE__GetRowSpan)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "width"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE get width.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__GetWidth",
    "functioncall": { "cpp": "int (*LICE__GetWidth)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "is", "flipped"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE is flipped",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bm", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "LICE__IsFlipped",
    "functioncall": { "cpp": "bool (*LICE__IsFlipped)(LICE_IBitmap* bm)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "resize"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE resize",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bm", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE__resize",
    "functioncall": { "cpp": "bool (*LICE__resize)(LICE_IBitmap* bm, int w, int h)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "set", "bk", "color"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE set bk color",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "font", "description": "" },
        { "identifier": "color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "LICE__SetBkColor",
    "functioncall": { "cpp": "LICE_pixel (*LICE__SetBkColor)(LICE_IFont* font, LICE_pixel color)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_pixel", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "translate", "lice", "set", "from", "hfont"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE set from h-font",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "font",
          "description": "font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set"
        },
        { "identifier": "hfont", "description": "" },
        { "identifier": "flags", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE__SetFromHFont",
    "functioncall": {
      "cpp": "void (*LICE__SetFromHFont)(LICE_IFont* font, HFONT hfont, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "set", "text", "color"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE set text color",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "font", "description": "" },
        { "identifier": "color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "LICE__SetTextColor",
    "functioncall": {
      "cpp": "LICE_pixel (*LICE__SetTextColor)(LICE_IFont* font, LICE_pixel color)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_pixel", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "set", "text", "combine", "mode"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE set text combine mode",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "ifont", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "alpha", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE__SetTextCombineMode",
    "functioncall": {
      "cpp": "void (*LICE__SetTextCombineMode)(LICE_IFont* ifont, int mode, float alpha)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "arc"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE arc",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "cx", "description": "" },
        { "identifier": "cy", "description": "" },
        { "identifier": "r", "description": "" },
        { "identifier": "minAngle", "description": "" },
        { "identifier": "maxAngle", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "LICE_Arc",
    "functioncall": {
      "cpp": "void (*LICE_Arc)(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "blit"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE blit",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "dstx", "description": "" },
        { "identifier": "dsty", "description": "" },
        { "identifier": "srcx", "description": "" },
        { "identifier": "srcy", "description": "" },
        { "identifier": "srcw", "description": "" },
        { "identifier": "srch", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "LICE_Blit",
    "functioncall": {
      "cpp": "void (*LICE_Blit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "blur"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE blur",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "dstx", "description": "" },
        { "identifier": "dsty", "description": "" },
        { "identifier": "srcx", "description": "" },
        { "identifier": "srcy", "description": "" },
        { "identifier": "srcw", "description": "" },
        { "identifier": "srch", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_Blur",
    "functioncall": {
      "cpp": "void (*LICE_Blur)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "bordered", "rect"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE bordered rect.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "bgcolor", "description": "" },
        { "identifier": "fgcolor", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "LICE_BorderedRect",
    "functioncall": {
      "cpp": "void (*LICE_BorderedRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "circle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE circle",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "cx", "description": "" },
        { "identifier": "cy", "description": "" },
        { "identifier": "r", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_Circle",
    "functioncall": {
      "cpp": "void (*LICE_Circle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "clear"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE clear",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "color", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "LICE_Clear",
    "functioncall": { "cpp": "void (*LICE_Clear)(LICE_IBitmap* dest, LICE_pixel color)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "clear", "rect"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE clear rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "mask", "description": "" },
        { "identifier": "orbits", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "LICE_ClearRect",
    "functioncall": {
      "cpp": "void (*LICE_ClearRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "copy"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE copy",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "LICE_Copy",
    "functioncall": { "cpp": "void (*LICE_Copy)(LICE_IBitmap* dest, LICE_IBitmap* src)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "create", "bitmap"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "mode", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE_CreateBitmap",
    "functioncall": { "cpp": "LICE_IBitmap* (*LICE_CreateBitmap)(int mode, int w, int h)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_IBitmap*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "create", "font"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE create font",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "LICE_CreateFont",
    "functioncall": { "cpp": "LICE_IFont* (*LICE_CreateFont)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_IFont*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "char"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE draw char",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "LICE_DrawChar",
    "functioncall": {
      "cpp": "void (*LICE_DrawChar)(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "glyph"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE draw glyph",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alphas", "description": "" },
        { "identifier": "glyph_w", "description": "" },
        { "identifier": "glyph_h", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "LICE_DrawGlyph",
    "functioncall": {
      "cpp": "void (*LICE_DrawGlyph)(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.80" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "bezier"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE Draw C Bezier",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "LICE_IBitmap* dest", "description": "" },
        { "identifier": "double xstart", "description": "" },
        { "identifier": "double ystart", "description": "" },
        { "identifier": "double xctl1", "description": "" },
        { "identifier": "double yctl1", "description": "" },
        { "identifier": "double xctl2", "description": "" },
        { "identifier": "double yctl2", "description": "" },
        { "identifier": "double xend", "description": "" },
        { "identifier": "double yend", "description": "" },
        { "identifier": "LICE_pixel color", "description": "" },
        { "identifier": "float alpha", "description": "" },
        { "identifier": "int mode", "description": "" },
        { "identifier": "bool aa", "description": "" },
        { "identifier": "double tol", "description": "" }
      ],
      "param_count": 14,
      "markup_type": "plaintext"
    },
    "title": "LICE_DrawCBezier",
    "functioncall": {
      "cpp": "void (*LICE_DrawCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "rectangle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE draw rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_DrawRect",
    "functioncall": {
      "cpp": "void (*LICE_DrawRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "draw", "text"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE draw text",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bm", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "string", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "LICE_DrawText",
    "functioncall": {
      "cpp": "void (*LICE_DrawText)(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.95" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "bezier"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE Fill CBezier",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "LICE_IBitmap* dest", "description": "" },
        { "identifier": "double xstart", "description": "" },
        { "identifier": "double ystart", "description": "" },
        { "identifier": "double xctl1", "description": "" },
        { "identifier": "double yctl1", "description": "" },
        { "identifier": "double xctl2", "description": "" },
        { "identifier": "double yctl2", "description": "" },
        { "identifier": "double xend", "description": "" },
        { "identifier": "double yend", "description": "" },
        { "identifier": "int yfill", "description": "" },
        { "identifier": "LICE_pixel color", "description": "" },
        { "identifier": "float alpha", "description": "" },
        { "identifier": "int mode", "description": "" },
        { "identifier": "bool aa", "description": "" },
        { "identifier": "double tol", "description": "" }
      ],
      "param_count": 15,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillCBezier",
    "functioncall": {
      "cpp": "void (*LICE_FillCBezier)(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "circle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE fill circle",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "cx", "description": "" },
        { "identifier": "cy", "description": "" },
        { "identifier": "r", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillCircle",
    "functioncall": {
      "cpp": "void (*LICE_FillCircle)(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "convex", "polygon"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE fill convex polygon",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "npoints", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillConvexPolygon",
    "functioncall": {
      "cpp": "void (*LICE_FillConvexPolygon)(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "rect"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE fill rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 8,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillRect",
    "functioncall": {
      "cpp": "void (*LICE_FillRect)(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "trapezoid"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE fill trapezoid",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x1a", "description": "" },
        { "identifier": "x1b", "description": "" },
        { "identifier": "y1", "description": "" },
        { "identifier": "x2a", "description": "" },
        { "identifier": "x2b", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillTrapezoid",
    "functioncall": {
      "cpp": "void (*LICE_FillTrapezoid)(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "fill", "triangle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE fill triangle",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x1", "description": "" },
        { "identifier": "y1", "description": "" },
        { "identifier": "x2", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "x3", "description": "" },
        { "identifier": "y3", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "LICE_FillTriangle",
    "functioncall": {
      "cpp": "void (*LICE_FillTriangle)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "get", "pixel"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE get pixel",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bm", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE_GetPixel",
    "functioncall": { "cpp": "LICE_pixel (*LICE_GetPixel)(LICE_IBitmap* bm, int x, int y)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_pixel", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "grad", "rectangle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE grad rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "dstx", "description": "" },
        { "identifier": "dsty", "description": "" },
        { "identifier": "dstw", "description": "" },
        { "identifier": "dsth", "description": "" },
        { "identifier": "ir", "description": "" },
        { "identifier": "ig", "description": "" },
        { "identifier": "ib", "description": "" },
        { "identifier": "ia", "description": "" },
        { "identifier": "drdx", "description": "" },
        { "identifier": "dgdx", "description": "" },
        { "identifier": "dbdx", "description": "" },
        { "identifier": "dadx", "description": "" },
        { "identifier": "drdy", "description": "" },
        { "identifier": "dgdy", "description": "" },
        { "identifier": "dbdy", "description": "" },
        { "identifier": "dady", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 18,
      "markup_type": "plaintext"
    },
    "title": "LICE_GradRect",
    "functioncall": {
      "cpp": "void (*LICE_GradRect)(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "line"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE line",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x1", "description": "" },
        { "identifier": "y1", "description": "" },
        { "identifier": "x2", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "LICE_Line",
    "functioncall": {
      "cpp": "void (*LICE_Line)(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "line", "int"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE line int",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x1", "description": "" },
        { "identifier": "y1", "description": "" },
        { "identifier": "x2", "description": "" },
        { "identifier": "y2", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 9,
      "markup_type": "plaintext"
    },
    "title": "LICE_LineInt",
    "functioncall": {
      "cpp": "void (*LICE_LineInt)(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "load", "png", "file", "graphic"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE load png",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "filename", "description": "" },
        { "identifier": "bmp", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "LICE_LoadPNG",
    "functioncall": {
      "cpp": "LICE_IBitmap* (*LICE_LoadPNG)(const char* filename, LICE_IBitmap* bmp)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_IBitmap*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "load", "png", "resource", "hinstance"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE load png from resource",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "hInst", "description": "" },
        { "identifier": "resid", "description": "" },
        { "identifier": "bmp", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE_LoadPNGFromResource",
    "functioncall": {
      "cpp": "LICE_IBitmap* (*LICE_LoadPNGFromResource)(HINSTANCE hInst, int resid, LICE_IBitmap* bmp)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "LICE_IBitmap*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "measure", "text"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE measure text",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "LICE_MeasureText",
    "functioncall": { "cpp": "void (*LICE_MeasureText)(const char* string, int* w, int* h)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "multiply", "add", "rectangle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE multiplay add rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "rsc", "description": "" },
        { "identifier": "gsc", "description": "" },
        { "identifier": "bsc", "description": "" },
        { "identifier": "asc", "description": "" },
        { "identifier": "radd", "description": "" },
        { "identifier": "gadd", "description": "" },
        { "identifier": "badd", "description": "" },
        { "identifier": "aadd", "description": "" }
      ],
      "param_count": 13,
      "markup_type": "plaintext"
    },
    "title": "LICE_MultiplyAddRect",
    "functioncall": {
      "cpp": "void (*LICE_MultiplyAddRect)(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "put", "pixel"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE put pixel",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "bm", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "color", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "LICE_PutPixel",
    "functioncall": {
      "cpp": "void (*LICE_PutPixel)(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "rotate", "blit"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE rotate blit. These coordinates are offset from the center of the image,in source pixel coordinates.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "dstx", "description": "" },
        { "identifier": "dsty", "description": "" },
        { "identifier": "dstw", "description": "" },
        { "identifier": "dsth", "description": "" },
        { "identifier": "srcx", "description": "" },
        { "identifier": "srcy", "description": "" },
        { "identifier": "srcw", "description": "" },
        { "identifier": "srch", "description": "" },
        { "identifier": "angle", "description": "" },
        { "identifier": "cliptosourcerect", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "rotxcent", "description": "" },
        { "identifier": "rtoycent", "description": "" }
      ],
      "param_count": 16,
      "markup_type": "plaintext"
    },
    "title": "LICE_RotatedBlit",
    "functioncall": {
      "cpp": "void (*LICE_RotatedBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "round", "rectangle"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE round rect",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "drawbm", "description": "" },
        { "identifier": "xpos", "description": "" },
        { "identifier": "ypos", "description": "" },
        { "identifier": "w", "description": "" },
        { "identifier": "h", "description": "" },
        { "identifier": "cornerradius", "description": "" },
        { "identifier": "col", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "aa", "description": "" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "title": "LICE_RoundRect",
    "functioncall": {
      "cpp": "void (*LICE_RoundRect)(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "scaled", "blit"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE scaled blit.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "dstx", "description": "" },
        { "identifier": "dsty", "description": "" },
        { "identifier": "dstw", "description": "" },
        { "identifier": "dsth", "description": "" },
        { "identifier": "srcx", "description": "" },
        { "identifier": "srcy", "description": "" },
        { "identifier": "srcw", "description": "" },
        { "identifier": "srch", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "title": "LICE_ScaledBlit",
    "functioncall": {
      "cpp": "void (*LICE_ScaledBlit)(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "lice", "simple", "fill"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE simple fill",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "newcolor", "description": "" },
        { "identifier": "comparemask", "description": "" },
        { "identifier": "keepmask", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "LICE_SimpleFill",
    "functioncall": {
      "cpp": "void (*LICE_SimpleFill)(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pcm", "source", "create"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PCM_Source create from simple",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dec", "description": "" },
        { "identifier": "fn", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "PCM_Source_CreateFromSimple",
    "functioncall": {
      "cpp": "PCM_source* (*PCM_Source_CreateFromSimple)(ISimpleMediaDecoder* dec, const char* fn)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_source*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "peak", "build", "create"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Peak build create",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "fn", "description": "" },
        { "identifier": "srate", "description": "" },
        { "identifier": "nch", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "title": "PeakBuild_Create",
    "functioncall": {
      "cpp": "REAPER_PeakBuild_Interface* (*PeakBuild_Create)(PCM_source* src, const char* fn, int srate, int nch)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "REAPER_PeakBuild_Interface*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "peak", "ex", "create"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Peakbuild create-ex. flags&1 for FP support",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "src", "description": "" },
        { "identifier": "fn", "description": "" },
        { "identifier": "srate", "description": "" },
        { "identifier": "nch", "description": "" },
        { "identifier": "flags", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "PeakBuild_CreateEx",
    "functioncall": {
      "cpp": "REAPER_PeakBuild_Interface* (*PeakBuild_CreateEx)(PCM_source* src, const char* fn, int srate, int nch, int flags)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "REAPER_PeakBuild_Interface*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "peak", "create", "get"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Peak get create.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "fn", "description": "" },
        { "identifier": "srate", "description": "" },
        { "identifier": "nch", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "PeakGet_Create",
    "functioncall": {
      "cpp": "REAPER_PeakGet_Interface* (*PeakGet_Create)(const char* fn, int srate, int nch)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "REAPER_PeakGet_Interface*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "play", "preview"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Play preview. Return nonzero on success.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "preview", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PlayPreview",
    "functioncall": { "cpp": "int (*PlayPreview)(preview_register_t* preview)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.16" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "play", "preview", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "return nonzero on success. bufflags\n&amp;1 = buffer source, \n&amp;2 = treat length changes in source as varispeed and adjust internal state accordingly if buffering.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "preview", "description": "" },
        { "identifier": "bufflags", "description": "" },
        { "identifier": "MSI", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "PlayPreviewEx",
    "functioncall": {
      "cpp": "int (*PlayPreviewEx)(preview_register_t* preview, int bufflags, double MSI)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "play", "track", "preview"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Play track preview. Returns nonzero on success,in these,m_out_chan is a track index (0-n).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "preview", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "PlayTrackPreview",
    "functioncall": { "cpp": "int (*PlayTrackPreview)(preview_register_t* preview)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "play", "track", "preview"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Play track preview. Return nonzero on success,in these,m_out_chan is a track index (0-n).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "preview", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "PlayTrackPreview2",
    "functioncall": {
      "cpp": "int (*PlayTrackPreview2)(ReaProject* proj, preview_register_t* preview)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.16" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "play", "track", "preview", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "return nonzero on success,in these,m_out_chan is a track index (0-n). for flags see [PlayPreviewEx](#PlayPreviewEx) bufflags",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "preview", "description": "" },
        { "identifier": "flags", "description": "" },
        { "identifier": "msi", "description": "" }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "PlayTrackPreview2Ex",
    "functioncall": {
      "cpp": "int (*PlayTrackPreview2Ex)(ReaProject* proj, preview_register_t* preview, int flags, double msi)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "plugin", "get", "api"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Plugin get api.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "name", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "plugin_getapi",
    "functioncall": { "cpp": "void* (*plugin_getapi)(const char* name)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "filter", "list", "plugin"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Plugin get filter list. Returns a double-NULL terminated list of importable media files, suitable for passing to [GetOpenFileName()](#GetOpenFileName) etc. Includes *.* (All files).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "plugin_getFilterList",
    "functioncall": { "cpp": "const char* (*plugin_getFilterList)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "plugin", "get", "importable", "project", "filter", "list", "file"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Plugin get importable project filter list. Returns a double-NULL terminated list of importable project files, suitable for passing to [GetOpenFileName()](#GetOpenFileName) etc. Includes *.* (All files). ",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "plugin_getImportableProjectFilterList",
    "functioncall": { "cpp": "const char* (*plugin_getImportableProjectFilterList)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "project", "config", "var", "addr"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Project config var addr.\n\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "idx", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "projectconfig_var_addr",
    "functioncall": { "cpp": "void* (*projectconfig_var_addr)(ReaProject* proj, int idx)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "project", "config", "var", "getoffs", "offset"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object.\n\nsee [Reaper\\_Config\\_Variables.html](Reaper_Config_Variables.html) for valid config-vars",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "name", "description": "" },
        { "identifier": "szOut", "description": "size of the object" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "projectconfig_var_getoffs",
    "functioncall": { "cpp": "int (*projectconfig_var_getoffs)(const char* name, int* szOut)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "reaper", "pitch", "shift", "api"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "version must be REAPER_PITCHSHIFT_API_VER",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "version", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "ReaperGetPitchShiftAPI",
    "functioncall": { "cpp": "IReaperPitchShift* (*ReaperGetPitchShiftAPI)(int version)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "IReaperPitchShift*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "resampler", "create", "interface"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Resampler create",
      "markup_type": "plaintext"
    },
    "params": { "entries": [] },
    "title": "Resampler_Create",
    "functioncall": { "cpp": "REAPER_Resample_Interface* (*Resampler_Create)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "REAPER_Resample_Interface*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "screenset", "register"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Screenset register.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "id", "description": "" },
        { "identifier": "callbackFunc", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "screenset_register",
    "functioncall": {
      "cpp": "void (*screenset_register)(char* id, void* callbackFunc, void* param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "screenset", "register", "new"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Screenset register new.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "id", "description": "" },
        { "identifier": "callbackFunc", "description": "" },
        { "identifier": "param", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "screenset_registerNew",
    "functioncall": {
      "cpp": "void (*screenset_registerNew)(char* id, screensetNewCallbackFunc callbackFunc, void* param)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "screenset", "unregister"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Screenset unregister.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "id", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "screenset_unregister",
    "functioncall": { "cpp": "void (*screenset_unregister)(char* id)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "screenset", "unregister", "param"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Screenset unregister by param",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "param", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "screenset_unregisterByParam",
    "functioncall": { "cpp": "void (*screenset_unregisterByParam)(void* param)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "screenset", "update", "focus"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "LICE simple fill",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "prevWin", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "screenset_updateLastFocus",
    "functioncall": { "cpp": "void (*screenset_updateLastFocus)(HWND prevWin)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "section", "unique", "id"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Section from unique ID.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "uniqueID", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SectionFromUniqueID",
    "functioncall": { "cpp": "KbdSectionInfo* (*SectionFromUniqueID)(int uniqueID)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "KbdSectionInfo*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "set", "render", "error"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Set render last error.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "errorstr", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "SetRenderLastError",
    "functioncall": { "cpp": "void (*SetRenderLastError)(const char* errorstr)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "stop", "preview"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Stop preview.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "preview", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "StopPreview",
    "functioncall": { "cpp": "int (*StopPreview)(preview_register_t* preview)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "stop", "track", "preview"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Stop track preview. Return nonzero on success.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "preview", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "StopTrackPreview",
    "functioncall": { "cpp": "int (*StopTrackPreview)(preview_register_t* preview)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "stop", "track", "preview", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Stop track preview2.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "preview", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "StopTrackPreview2",
    "functioncall": { "cpp": "int (*StopTrackPreview2)(void* proj, preview_register_t* preview)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "6.13" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "update", "disk", "counters", "statistics", "bytes", "transferred"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Updates disk I/O statistics with bytes transferred since last call. \nNotify REAPER of a write error by calling with readamt=0, writeamt=-101010110 for unknown or -101010111 for disk full",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "readamt", "description": "" },
        { "identifier": "writeamt", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "update_disk_counters",
    "functioncall": { "cpp": "void (*update_disk_counters)(int readamt, int writeamt)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "set", "render", "error"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "WDL virtualwnd scale blit bg.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "dest", "description": "" },
        { "identifier": "src", "description": "" },
        { "identifier": "destx", "description": "" },
        { "identifier": "desty", "description": "" },
        { "identifier": "destw", "description": "" },
        { "identifier": "desth", "description": "" },
        { "identifier": "clipx", "description": "" },
        { "identifier": "clipy", "description": "" },
        { "identifier": "clipw", "description": "" },
        { "identifier": "cliph", "description": "" },
        { "identifier": "alpha", "description": "" },
        { "identifier": "mode", "description": "" }
      ],
      "param_count": 12,
      "markup_type": "plaintext"
    },
    "title": "WDL_VirtualWnd_ScaledBlitBG",
    "functioncall": {
      "cpp": "bool (*WDL_VirtualWnd_ScaledBlitBG)(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "bool", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.976" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "mediaitem", "parameters", "get", "set", "info"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get/Set Media Item Info",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "item", "description": "a MediaItem-object" },
        {
          "identifier": "parmname",
          "description": "the parameter to be gotten/set\nP_TRACK : MediaTrack * (read only)                \nB_MUTE : bool * to muted state\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * to loop source\nB_ALLTAKESPLAY : bool * to all takes play\nB_UISEL : bool * to ui selected\nC_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly\nC_LOCK : char * to one char of lock flags (&1 is locked, currently)\nD_VOL : double *, take volume (negative if take polarity is flipped)\nD_POSITION : double * of item position (seconds)\nD_LENGTH : double * of item length (seconds)\nD_SNAPOFFSET : double * of item snap offset (seconds)\nD_FADEINLEN : double * of item fade in length (manual, seconds)\nD_FADEOUTLEN : double * of item fade out length (manual, seconds)\nD_FADEINDIR : double * of item fade in curve [-1; 1]\nD_FADEOUTDIR : double * of item fade out curve [-1; 1]\nD_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)\nD_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)\nC_FADEINSHAPE : int * to fadein shape, 0=linear, ...\nC_FADEOUTSHAPE : int * to fadeout shape\nI_GROUPID : int * to group ID (0 = no group)\nI_LASTY : int * to last y position in track (readonly)\nI_LASTH : int * to last height in track (readonly)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used (though will store the color anyway).\nI_CURTAKE : int * to active take\nIP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * to free mode y position (0..1)\nF_FREEMODE_H : float * to free mode height (0..1)\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)"
        },
        {
          "identifier": "setNewValue",
          "description": "the new value to be set, refer description of parmname for the values"
        }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "GetSetMediaItemInfo",
    "functioncall": {
      "cpp": "void* (*GetSetMediaItemInfo)(MediaItem* item, const char* parmname, void* setNewValue)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "toggle", "command", "state", "section", "commandid"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Get Toggle Command State 2",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "section",
          "description": "the section, in which the action exists\n0, Main\n100, Main (alt recording)\n32060, MIDI Editor\n32061, MIDI Event List Editor\n32062, MIDI Inline Editor\n32063, Media Explorer"
        },
        {
          "identifier": "command_id",
          "description": "the command-id of the command, whose toggle-state you want"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetToggleCommandState2",
    "functioncall": {
      "cpp": "int (*GetToggleCommandState2)(KbdSectionInfo* section, int command_id)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "get", "track", "info", "flag"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Gets track info (returns name).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "track",
          "description": "track index, -1=master, 0..n, or cast a MediaTrack* to int "
        },
        {
          "identifier": "flags",
          "description": "if flags is non-NULL, will be set to:\n&1, folder\n&2, selected\n&4, has fx enabled\n&8, muted\n&16, soloed\n&32, SIP'd (with &16)\n&64, rec armed"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "GetTrackInfo",
    "functioncall": { "cpp": "const char* (*GetTrackInfo)(INT_PTR track, int* flags)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "char*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "midi", "command", "value", "relmode", "main", "action"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "val/valhw are used for midi stuff.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "cmd", "description": "" },
        { "identifier": "val", "description": "val=[0..127] and valhw=-1 (midi CC)" },
        { "identifier": "valhw", "description": "valhw >=0 (midi pitch (valhw | val<<7))" },
        {
          "identifier": "relmode",
          "description": "relmode absolute (0) or 1/2/3 for relative adjust modes"
        },
        { "identifier": "hwnd", "description": "" },
        { "identifier": "proj", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "KBD_OnMainActionEx",
    "functioncall": {
      "cpp": "int (*KBD_OnMainActionEx)(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "midi", "event", "list", "create"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Create a MIDI_eventlist object. The returned object must be deleted with [MIDI\\_eventlist\\_destroy()](#MIDI_eventlist_destroy).",
      "markup_type": "markdown"
    },
    "params": { "entries": [] },
    "title": "MIDI_eventlist_Create",
    "functioncall": { "cpp": "MIDI_eventlist* (*MIDI_eventlist_Create)()" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "MIDI_eventlist*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "midi", "event", "list", "destroy"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Destroy a MIDI_eventlist object that was created using [MIDI\\_eventlist\\_Create()](#MIDI_eventlist_Create).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [{ "identifier": "evtlist", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "title": "MIDI_eventlist_Destroy",
    "functioncall": { "cpp": "void (*MIDI_eventlist_Destroy)(MIDI_eventlist* evtlist)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pcm", "sink", "create", "filename"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PCM sink create",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "filename", "description": "" },
        { "identifier": "cfg", "description": "" },
        { "identifier": "cfg_sz", "description": "" },
        { "identifier": "nch", "description": "" },
        { "identifier": "srate", "description": "" },
        { "identifier": "buildpeaks", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "plaintext"
    },
    "title": "PCM_Sink_Create",
    "functioncall": {
      "cpp": "PCM_sink* (*PCM_Sink_Create)(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_sink*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pcm", "sink", "create", "filename", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PCM sink create ex.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "filename", "description": "" },
        { "identifier": "cfg", "description": "" },
        { "identifier": "cfg_sz", "description": "" },
        { "identifier": "nch", "description": "" },
        { "identifier": "srate", "description": "" },
        { "identifier": "buildpeaks", "description": "" }
      ],
      "param_count": 7,
      "markup_type": "markdown"
    },
    "title": "PCM_Sink_CreateEx",
    "functioncall": {
      "cpp": "PCM_sink* (*PCM_Sink_CreateEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_sink*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pcm", "sink", "create", "midi", "filename"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PCM sink create MIDI file.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "filename", "description": "" },
        { "identifier": "cfg", "description": "" },
        { "identifier": "cfg_sz", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "div", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "PCM_Sink_CreateMIDIFile",
    "functioncall": {
      "cpp": "PCM_sink* (*PCM_Sink_CreateMIDIFile)(const char* filename, const char* cfg, int cfg_sz, double bpm, int div)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_sink*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pcm", "sink", "create", "midi", "filename", "ex"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "PCM sink create MIDI file ex",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "proj",
          "description": "the project-number. 0 for the current project. Can also be a ReaProject-object, as returned by [EnumProjects](#EnumProjects)"
        },
        { "identifier": "filename", "description": "" },
        { "identifier": "cfg", "description": "" },
        { "identifier": "cfg_sz", "description": "" },
        { "identifier": "bpm", "description": "" },
        { "identifier": "div", "description": "" }
      ],
      "param_count": 6,
      "markup_type": "markdown"
    },
    "title": "PCM_Sink_CreateMIDIFileEx",
    "functioncall": {
      "cpp": "PCM_sink* (*PCM_Sink_CreateMIDIFileEx)(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "PCM_sink*", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "send", "local", "osc", "message"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Send local Osc message.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "local_osc_handler", "description": "" },
        { "identifier": "msg", "description": "" },
        { "identifier": "msglen", "description": "" }
      ],
      "param_count": 3,
      "markup_type": "plaintext"
    },
    "title": "SendLocalOscMessage",
    "functioncall": {
      "cpp": "void (*SendLocalOscMessage)(void* local_osc_handler, const char* msg, int msglen)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "void", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "pitch", "shift", "sub", "mode", "menu"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "menu to select/modify pitch shifter submode, returns new value (or old value if no item selected)",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "hwnd", "description": "" },
        { "identifier": "x", "description": "" },
        { "identifier": "y", "description": "" },
        { "identifier": "mode", "description": "" },
        { "identifier": "submode_sel", "description": "" }
      ],
      "param_count": 5,
      "markup_type": "plaintext"
    },
    "title": "PitchShiftSubModeMenu",
    "functioncall": {
      "cpp": "int (*PitchShiftSubModeMenu)(HWND hwnd, int x, int y, int mode, int submode_sel)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.62" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "check", "function", "plugin", "api"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Checks, whether a certain Reaper-API-function exists.\n\nBecause the API is dynamic, callers should never assume a function exists.\nCheck that a non-NULL function pointer was returned before using it (unless\nloaded functions are verified using REAPERAPI_LoadAPI(), see note below).\n\n  1) most source files should just #include \"reaper_plugin_functions.h\" as is.\n  2) one file should #define REAPERAPI_IMPLEMENT before including this file.\n  3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT\n     and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "*getAPI", "description": "" },
        { "identifier": "*", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "REAPERAPI_LoadAPI",
    "functioncall": { "cpp": "int REAPERAPI_LoadAPI(void *(*getAPI)(const char *))" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "0, if a function exists" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper_plugin.h",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "Reaper": "5.965" },
    "chapers": ["Additional C++ Functions"],
    "tags": ["cpp", "check", "function", "plugin", "api"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "special use for NeedBig script API functions - reallocates a NeedBig buffer and updates its size, returns false on error",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "*getAPI", "description": "" },
        { "identifier": "*", "description": "" }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "title": "realloc_cmd_ptr",
    "functioncall": { "cpp": "bool (*realloc_cmd_ptr)(char** ptr, int* ptr_size, int new_size)" },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "int", "description": "0, if a function exists" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": []
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "show", "about", "install", "package"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PackageEntry entry",
          "description": "the installed Reapack-package, whose about dialog you want to show; see [ReaPack\\_GetOwner](#ReaPack_GetOwner) to get this parameter"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_AboutInstalledPackage",
    "functioncall": {
      "lua": "boolean reaper.ReaPack_AboutInstalledPackage(PackageEntry entry)",
      "cpp": "bool ReaPack_AboutInstalledPackage(PackageEntry* entry)",
      "python": "Boolean ReaPack_AboutInstalledPackage(PackageEntry entry)",
      "eel": "bool extension_api(\"ReaPack_AboutInstalledPackage\", PackageEntry entry)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "true, if the dialog is shown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "entry", "type": "PackageEntry" }
        ],
        "method_name": "reaper.ReaPack_AboutInstalledPackage",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "show", "about", "repository"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string repoName",
          "description": "the repository, whose about-dialog you would love to have"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_AboutRepository",
    "functioncall": {
      "lua": "boolean reaper.ReaPack_AboutRepository(string repoName)",
      "cpp": "bool ReaPack_AboutRepository(const char* repoName)",
      "python": "Boolean ReaPack_AboutRepository(String repoName)",
      "eel": "bool extension_api(\"ReaPack_AboutRepository\", \"repoName\")"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "true, if the dialog is shown" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "repoName", "type": "string" }
        ],
        "method_name": "reaper.ReaPack_AboutRepository",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "add", "set", "repository"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call [ReaPack\\_ProcessQueue(true)](#ReaPack_ProcessQueue) when done to process the new list and update the GUI.\n\nautoInstall: usually set to 2 (obey user setting).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "string name", "description": "the name of the package" },
        {
          "identifier": "string url",
          "description": "the url to the repository's xml-file; set nil to keep the current one"
        },
        {
          "identifier": "boolean enable",
          "description": "set this repo as enabled in the GUI of ReaPack, so synchronizing is possible"
        },
        {
          "identifier": "integer autoInstall",
          "description": "shall this repository automatically installed, when synchronizing and an update is available?\n   0, don't autoinstall new packages when synchronizing\n   1, autoinstall new packages when synchronizing\n   2, use user-settings"
        }
      ],
      "param_count": 4,
      "markup_type": "markdown"
    },
    "title": "ReaPack_AddSetRepository",
    "functioncall": {
      "lua": "boolean retval, string error = reaper.ReaPack_AddSetRepository(string name, string url, boolean enable, integer autoInstall)",
      "cpp": "bool ReaPack_AddSetRepository(const char* name, const char* url, bool enable, int autoInstall, char* errorOut, int errorOut_sz)",
      "python": "(Boolean retval, String name, String url, Boolean enable, Int autoInstall, String errorOut, Int errorOut_sz) = ReaPack_AddSetRepository(name, url, enable, autoInstall, errorOut, errorOut_sz)",
      "eel": "bool extension_api(\"ReaPack_AddSetRepository\", \"name\", \"url\", bool enable, int autoInstall, #error)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [{ "identifier": "boolean", "description": "true, if the repo has been added" }],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "name", "type": "string" },
          { "identifier": "url", "type": "string" },
          { "identifier": "enable", "type": "boolean" },
          { "identifier": "autoInstall", "type": "integer" }
        ],
        "method_name": "reaper.ReaPack_AddSetRepository",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "error", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "browse", "packages"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Opens the package browser with the given filter string.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string filter",
          "description": "the filter to be applied in the package browser. Only packages that feature words included in this filter will be shown."
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_BrowsePackages",
    "functioncall": {
      "lua": "reaper.ReaPack_BrowsePackages(string filter)",
      "cpp": "void ReaPack_BrowsePackages(const char* filter)",
      "python": "ReaPack_BrowsePackages(String filter)",
      "eel": "extension_api(\"ReaPack_BrowsePackages\", \"filter\")"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "filter", "type": "string" }],
        "method_name": "reaper.ReaPack_BrowsePackages",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "compare", "versionnumber"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Compares two versionnumbers. Versionnumbers must start with a number/digit, or they can't be compared.\nReturns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string ver1",
          "description": "a first versionnumber to compare; must start with a number/digit"
        },
        {
          "identifier": "string ver2",
          "description": "a second versionnumber to compare; must start with a number/digit"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "ReaPack_CompareVersions",
    "functioncall": {
      "lua": "integer retval, string error = reaper.ReaPack_CompareVersions(string ver1, string ver2)",
      "cpp": "int ReaPack_CompareVersions(const char* ver1, const char* ver2, char* errorOut, int errorOut_sz)",
      "python": "(Int retval, String ver1, String ver2, String errorOut, Int errorOut_sz) = ReaPack_CompareVersions(ver1, ver2, errorOut, errorOut_sz)",
      "eel": "int extension_api(\"ReaPack_CompareVersions\", \"ver1\", \"ver2\", #error)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "integer retval",
          "description": "-1, ver1&lt;ver2\n0, ver1 = ver2\n1, ver1&gt;ver2"
        },
        {
          "identifier": "string error",
          "description": "the errormessage, if comparing the parameters ver1 and ver2 is impossible"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "ver1", "type": "string" },
          { "identifier": "ver2", "type": "string" }
        ],
        "method_name": "reaper.ReaPack_CompareVersions",
        "return_values": [
          { "identifier": "retval", "type": "integer" },
          { "identifier": "error", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "enumerate", "installed files", "packageentry", "package"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Enumerate the files owned by the given package. Returns false when there is no more data.\n\n    sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\n    type: see [ReaPack\\_GetEntryInfo](#ReaPack_GetEntryInfo).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PackageEntry entry",
          "description": "the installed Reapack-package, whose file you want to enumerate; see [ReaPack\\_GetOwner](#ReaPack_GetOwner) to get this parameter"
        },
        {
          "identifier": "integer index",
          "description": "the index of the file of this ReaPack-package with 0 for the first file"
        }
      ],
      "param_count": 2,
      "markup_type": "markdown"
    },
    "title": "ReaPack_EnumOwnedFiles",
    "functioncall": {
      "lua": "boolean retval, string path, number sections, number type = reaper.ReaPack_EnumOwnedFiles(PackageEntry entry, integer index)",
      "cpp": "bool ReaPack_EnumOwnedFiles(PackageEntry* entry, int index, char* pathOut, int pathOut_sz, int* sectionsOut, int* typeOut)",
      "python": "(Boolean retval, PackageEntry entry, Int index, String pathOut, Int pathOut_sz, Int sectionsOut, Int typeOut) = ReaPack_EnumOwnedFiles(entry, index, pathOut, pathOut_sz, sectionsOut, typeOut)",
      "eel": "bool extension_api(\"ReaPack_EnumOwnedFiles\", PackageEntry entry, int index, #path, int &sections, int &type)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if more files exist; false, if this is the last/only file"
        },
        {
          "identifier": "string path",
          "description": "the path and filename of the installed file"
        },
        {
          "identifier": "number sections",
          "description": "the section(s), in which this file is installed; it is an integer bitfield\n  0=not in action list\n  &1=main\n  &2=midi editor\n  &4=midi inline editor"
        },
        {
          "identifier": "number type",
          "description": "the type of the extension, in which this file exists\n  1, script \n  2, extension\n  3, effect \n  4, data \n  5, theme\n  6, langpack \n  7, webinterface"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "entry", "type": "PackageEntry" },
          { "identifier": "index", "type": "integer" }
        ],
        "method_name": "reaper.ReaPack_EnumOwnedFiles",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "path", "type": "string" },
          { "identifier": "sections", "type": "number" },
          { "identifier": "type", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "enumerate", "free", "ressources", "packageentry", "package"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Free resources allocated for the given package entry. Must be used to free PackageEntry-objects created by [ReaPack\\_GetOwner](#ReaPack_GetOwner).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PackageEntry entry",
          "description": "the installed Reapack-package, whose ressources you want to free; see [ReaPack\\_GetOwner](#ReaPack_GetOwner) to get this parameter"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_FreeEntry",
    "functioncall": {
      "lua": "boolean reaper.ReaPack_FreeEntry(PackageEntry entry)",
      "cpp": "bool ReaPack_FreeEntry(PackageEntry* entry)",
      "python": "Boolean ReaPack_FreeEntry(PackageEntry entry)",
      "eel": "bool extension_api(\"ReaPack_FreeEntry\", PackageEntry entry)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, if freeing was successful; false, if no"
        }
      ],
      "param_count": 1,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [
          { "identifier": "reaper", "type": "boolean" },
          { "identifier": "entry", "type": "PackageEntry" }
        ],
        "method_name": "reaper.ReaPack_FreeEntry",
        "return_values": []
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "get", "entry", "info", "packageentry", "package"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, pinned status and how many files are owned by the given package entry.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PackageEntry entry",
          "description": "the installed Reapack-package, whose package-infos you want; see [ReaPack\\_GetOwner](#ReaPack_GetOwner) to get this parameter"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_GetEntryInfo",
    "functioncall": {
      "lua": "boolean retval, string repo, string cat, string pkg, string desc, number type, string ver, string author, boolean pinned, number fileCount = reaper.ReaPack_GetEntryInfo(PackageEntry entry)",
      "cpp": "bool ReaPack_GetEntryInfo(PackageEntry* entry, char* repoOut, int repoOut_sz, char* catOut, int catOut_sz, char* pkgOut, int pkgOut_sz, char* descOut, int descOut_sz, int* typeOut, char* verOut, int verOut_sz, char* authorOut, int authorOut_sz, bool* pinnedOut, int* fileCountOut)",
      "python": "(Boolean retval, PackageEntry entry, String repoOut, Int repoOut_sz, String catOut, Int catOut_sz, String pkgOut, Int pkgOut_sz, String descOut, Int descOut_sz, Int typeOut, String verOut, Int verOut_sz, String authorOut, Int authorOut_sz, Boolean pinnedOut, Int fileCountOut) = ReaPack_GetEntryInfo(entry, repoOut, repoOut_sz, catOut, catOut_sz, pkgOut, pkgOut_sz, descOut, descOut_sz, typeOut, verOut, verOut_sz, authorOut, authorOut_sz, pinnedOut, fileCountOut)",
      "eel": "bool extension_api(\"ReaPack_GetEntryInfo\", PackageEntry entry, #repo, #cat, #pkg, #desc, int &type, #ver, #author, bool &pinned, int &fileCount)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        { "identifier": "boolean retval", "description": "true, if getting the info worked" },
        { "identifier": "string repo", "description": "the name of the repository" },
        { "identifier": "string cat", "description": "the category of this package" },
        { "identifier": "string pkg", "description": "the package-name of this package" },
        { "identifier": "string desc", "description": "the description of this package" },
        {
          "identifier": "number type",
          "description": "the type of this package\n 1, script\n 2, extension\n 3, effect\n 4, data\n 5, theme\n 6, langpack\n 7, webinterface"
        },
        {
          "identifier": "string ver",
          "description": "the currently installed version of this package"
        },
        { "identifier": "string author", "description": "the author of this package" },
        { "identifier": "boolean pinned", "description": "the pinned-status of this package" },
        { "identifier": "number fileCount", "description": "the number of files of this package" }
      ],
      "param_count": 10,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "entry", "type": "PackageEntry" }],
        "method_name": "reaper.ReaPack_GetEntryInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "repo", "type": "string" },
          { "identifier": "cat", "type": "string" },
          { "identifier": "pkg", "type": "string" },
          { "identifier": "desc", "type": "string" },
          { "identifier": "type", "type": "number" },
          { "identifier": "ver", "type": "string" },
          { "identifier": "author", "type": "string" },
          { "identifier": "pinned", "type": "boolean" },
          { "identifier": "fileCount", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "get", "owner", "filename", "packageentry", "package"],
    "description": {
      "language": "",
      "prog_lang": "",
      "description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with [ReaPack\\_FreeEntry](#ReaPack_FreeEntry).",
      "markup_type": "markdown"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string fn",
          "description": "filename with path to a file, of which you want to know, whose package owns it"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_GetOwner",
    "functioncall": {
      "lua": "PackageEntry retval, string error = reaper.ReaPack_GetOwner(string fn)",
      "cpp": "PackageEntry* ReaPack_GetOwner(const char* fn, char* errorOut, int errorOut_sz)",
      "python": "(PackageEntry retval, String fn, String errorOut, Int errorOut_sz) = ReaPack_GetOwner(fn, errorOut, errorOut_sz)",
      "eel": "PackageEntry extension_api(\"ReaPack_GetOwner\", \"fn\", #error)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "PackageEntry retval",
          "description": "the installed Reapack-package, who is owner of this file"
        },
        {
          "identifier": "string error",
          "description": "an errormessage, if the file is not part of a ReaPack-package"
        }
      ],
      "param_count": 2,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "fn", "type": "string" }],
        "method_name": "reaper.ReaPack_GetOwner",
        "return_values": [
          { "identifier": "retval", "type": "PackageEntry" },
          { "identifier": "error", "type": "string" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "get", "repository", "url"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Get the infos of the given repository.",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "string name",
          "description": "the name of the ReaPack package, whose repository you want to have"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_GetRepositoryInfo",
    "functioncall": {
      "lua": "boolean retval, string url, boolean enabled, number autoInstall = reaper.ReaPack_GetRepositoryInfo(string name)",
      "cpp": "bool ReaPack_GetRepositoryInfo(const char* name, char* urlOut, int urlOut_sz, bool* enabledOut, int* autoInstallOut)",
      "python": "(Boolean retval, String name, String urlOut, Int urlOut_sz, Boolean enabledOut, Int autoInstallOut) = ReaPack_GetRepositoryInfo(name, urlOut, urlOut_sz, enabledOut, autoInstallOut)",
      "eel": "bool extension_api(\"ReaPack_GetRepositoryInfo\", \"name\", #url, bool &enabled, int &autoInstall)"
    },
    "return_values": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean retval",
          "description": "true, such a repository exists; false, it does not exist"
        },
        { "identifier": "string url", "description": "the url of the repository" },
        {
          "identifier": "boolean enabled",
          "description": "true, the repository is enabled for installing/syncing; false, if not"
        },
        {
          "identifier": "number autoInstall",
          "description": "shall this repository be automatically installed when syncing?\n0, manual \n1, when synchronizing\n2, obey user setting"
        }
      ],
      "param_count": 4,
      "markup_type": "plaintext"
    },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "name", "type": "string" }],
        "method_name": "reaper.ReaPack_GetRepositoryInfo",
        "return_values": [
          { "identifier": "retval", "type": "boolean" },
          { "identifier": "url", "type": "string" },
          { "identifier": "enabled", "type": "boolean" },
          { "identifier": "autoInstall", "type": "number" }
        ]
      }
    }
  },
  {
    "source_document": "reaper-apidocs.USDocML",
    "target_document": "Reaper_Api_Documentation",
    "requires": { "ReaPack": "1.2.2", "Lua": "5.3", "Reaper": "5.965" },
    "chapers": ["ReaPack"],
    "tags": ["reapack", "process", "queue", "refresh ui"],
    "description": {
      "language": "",
      "prog_lang": "*",
      "description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).",
      "markup_type": "plaintext"
    },
    "params": {
      "prog_lang": "*",
      "entries": [
        {
          "identifier": "boolean refreshUI",
          "description": "true, refreshes the UI of the ReaPack-user-interface; false, doesn't update the UI"
        }
      ],
      "param_count": 1,
      "markup_type": "markdown"
    },
    "title": "ReaPack_ProcessQueue",
    "functioncall": {
      "lua": "reaper.ReaPack_ProcessQueue(boolean refreshUI)",
      "cpp": "void ReaPack_ProcessQueue(bool refreshUI)",
      "python": "ReaPack_ProcessQueue(Boolean refreshUI)",
      "eel": "extension_api(\"ReaPack_ProcessQueue\", bool refreshUI)"
    },
    "return_values": { "entries": [] },
    "signatures": {
      "lua": {
        "parameters": [{ "identifier": "refreshUI", "type": "boolean" }],
        "method_name": "reaper.ReaPack_ProcessQueue",
        "return_values": []
      }
    }
  }
]
